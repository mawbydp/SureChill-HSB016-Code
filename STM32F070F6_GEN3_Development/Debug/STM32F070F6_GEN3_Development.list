
STM32F070F6_GEN3_Development.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c58  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003d18  08003d18  00013d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003de4  08003de4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003de4  08003de4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003de4  08003de4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003de4  08003de4  00013de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003de8  08003de8  00013de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000070  08003e5c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08003e5c  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009df7  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016e6  00000000  00000000  00029e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000708  00000000  00000000  0002b578  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000660  00000000  00000000  0002bc80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000105c7  00000000  00000000  0002c2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007fc7  00000000  00000000  0003c8a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00060ec7  00000000  00000000  0004486e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a5735  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b5c  00000000  00000000  000a57b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d00 	.word	0x08003d00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003d00 	.word	0x08003d00

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c08      	adds	r0, r1, #0
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 f8a9 	bl	8000380 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 f82b 	bl	8000294 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 f89b 	bl	8000380 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f891 	bl	8000380 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f839 	bl	80002e4 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f82f 	bl	80002e4 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__eqsf2>:
 8000294:	b570      	push	{r4, r5, r6, lr}
 8000296:	0042      	lsls	r2, r0, #1
 8000298:	024e      	lsls	r6, r1, #9
 800029a:	004c      	lsls	r4, r1, #1
 800029c:	0245      	lsls	r5, r0, #9
 800029e:	0a6d      	lsrs	r5, r5, #9
 80002a0:	0e12      	lsrs	r2, r2, #24
 80002a2:	0fc3      	lsrs	r3, r0, #31
 80002a4:	0a76      	lsrs	r6, r6, #9
 80002a6:	0e24      	lsrs	r4, r4, #24
 80002a8:	0fc9      	lsrs	r1, r1, #31
 80002aa:	2aff      	cmp	r2, #255	; 0xff
 80002ac:	d00f      	beq.n	80002ce <__eqsf2+0x3a>
 80002ae:	2cff      	cmp	r4, #255	; 0xff
 80002b0:	d011      	beq.n	80002d6 <__eqsf2+0x42>
 80002b2:	2001      	movs	r0, #1
 80002b4:	42a2      	cmp	r2, r4
 80002b6:	d000      	beq.n	80002ba <__eqsf2+0x26>
 80002b8:	bd70      	pop	{r4, r5, r6, pc}
 80002ba:	42b5      	cmp	r5, r6
 80002bc:	d1fc      	bne.n	80002b8 <__eqsf2+0x24>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d00d      	beq.n	80002de <__eqsf2+0x4a>
 80002c2:	2a00      	cmp	r2, #0
 80002c4:	d1f8      	bne.n	80002b8 <__eqsf2+0x24>
 80002c6:	0028      	movs	r0, r5
 80002c8:	1e45      	subs	r5, r0, #1
 80002ca:	41a8      	sbcs	r0, r5
 80002cc:	e7f4      	b.n	80002b8 <__eqsf2+0x24>
 80002ce:	2001      	movs	r0, #1
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d1f1      	bne.n	80002b8 <__eqsf2+0x24>
 80002d4:	e7eb      	b.n	80002ae <__eqsf2+0x1a>
 80002d6:	2001      	movs	r0, #1
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d1ed      	bne.n	80002b8 <__eqsf2+0x24>
 80002dc:	e7e9      	b.n	80002b2 <__eqsf2+0x1e>
 80002de:	2000      	movs	r0, #0
 80002e0:	e7ea      	b.n	80002b8 <__eqsf2+0x24>
 80002e2:	46c0      	nop			; (mov r8, r8)

080002e4 <__gesf2>:
 80002e4:	b570      	push	{r4, r5, r6, lr}
 80002e6:	004a      	lsls	r2, r1, #1
 80002e8:	024e      	lsls	r6, r1, #9
 80002ea:	0245      	lsls	r5, r0, #9
 80002ec:	0044      	lsls	r4, r0, #1
 80002ee:	0a6d      	lsrs	r5, r5, #9
 80002f0:	0e24      	lsrs	r4, r4, #24
 80002f2:	0fc3      	lsrs	r3, r0, #31
 80002f4:	0a76      	lsrs	r6, r6, #9
 80002f6:	0e12      	lsrs	r2, r2, #24
 80002f8:	0fc9      	lsrs	r1, r1, #31
 80002fa:	2cff      	cmp	r4, #255	; 0xff
 80002fc:	d015      	beq.n	800032a <__gesf2+0x46>
 80002fe:	2aff      	cmp	r2, #255	; 0xff
 8000300:	d00e      	beq.n	8000320 <__gesf2+0x3c>
 8000302:	2c00      	cmp	r4, #0
 8000304:	d115      	bne.n	8000332 <__gesf2+0x4e>
 8000306:	2a00      	cmp	r2, #0
 8000308:	d101      	bne.n	800030e <__gesf2+0x2a>
 800030a:	2e00      	cmp	r6, #0
 800030c:	d01c      	beq.n	8000348 <__gesf2+0x64>
 800030e:	2d00      	cmp	r5, #0
 8000310:	d014      	beq.n	800033c <__gesf2+0x58>
 8000312:	428b      	cmp	r3, r1
 8000314:	d027      	beq.n	8000366 <__gesf2+0x82>
 8000316:	2002      	movs	r0, #2
 8000318:	3b01      	subs	r3, #1
 800031a:	4018      	ands	r0, r3
 800031c:	3801      	subs	r0, #1
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0ee      	beq.n	8000302 <__gesf2+0x1e>
 8000324:	2002      	movs	r0, #2
 8000326:	4240      	negs	r0, r0
 8000328:	e7f9      	b.n	800031e <__gesf2+0x3a>
 800032a:	2d00      	cmp	r5, #0
 800032c:	d1fa      	bne.n	8000324 <__gesf2+0x40>
 800032e:	2aff      	cmp	r2, #255	; 0xff
 8000330:	d00e      	beq.n	8000350 <__gesf2+0x6c>
 8000332:	2a00      	cmp	r2, #0
 8000334:	d10e      	bne.n	8000354 <__gesf2+0x70>
 8000336:	2e00      	cmp	r6, #0
 8000338:	d0ed      	beq.n	8000316 <__gesf2+0x32>
 800033a:	e00b      	b.n	8000354 <__gesf2+0x70>
 800033c:	2301      	movs	r3, #1
 800033e:	3901      	subs	r1, #1
 8000340:	4399      	bics	r1, r3
 8000342:	0008      	movs	r0, r1
 8000344:	3001      	adds	r0, #1
 8000346:	e7ea      	b.n	800031e <__gesf2+0x3a>
 8000348:	2000      	movs	r0, #0
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0e7      	beq.n	800031e <__gesf2+0x3a>
 800034e:	e7e2      	b.n	8000316 <__gesf2+0x32>
 8000350:	2e00      	cmp	r6, #0
 8000352:	d1e7      	bne.n	8000324 <__gesf2+0x40>
 8000354:	428b      	cmp	r3, r1
 8000356:	d1de      	bne.n	8000316 <__gesf2+0x32>
 8000358:	4294      	cmp	r4, r2
 800035a:	dd05      	ble.n	8000368 <__gesf2+0x84>
 800035c:	2102      	movs	r1, #2
 800035e:	1e58      	subs	r0, r3, #1
 8000360:	4008      	ands	r0, r1
 8000362:	3801      	subs	r0, #1
 8000364:	e7db      	b.n	800031e <__gesf2+0x3a>
 8000366:	2400      	movs	r4, #0
 8000368:	42a2      	cmp	r2, r4
 800036a:	dc04      	bgt.n	8000376 <__gesf2+0x92>
 800036c:	42b5      	cmp	r5, r6
 800036e:	d8d2      	bhi.n	8000316 <__gesf2+0x32>
 8000370:	2000      	movs	r0, #0
 8000372:	42b5      	cmp	r5, r6
 8000374:	d2d3      	bcs.n	800031e <__gesf2+0x3a>
 8000376:	1e58      	subs	r0, r3, #1
 8000378:	2301      	movs	r3, #1
 800037a:	4398      	bics	r0, r3
 800037c:	3001      	adds	r0, #1
 800037e:	e7ce      	b.n	800031e <__gesf2+0x3a>

08000380 <__lesf2>:
 8000380:	b530      	push	{r4, r5, lr}
 8000382:	0042      	lsls	r2, r0, #1
 8000384:	0244      	lsls	r4, r0, #9
 8000386:	024d      	lsls	r5, r1, #9
 8000388:	0fc3      	lsrs	r3, r0, #31
 800038a:	0048      	lsls	r0, r1, #1
 800038c:	0a64      	lsrs	r4, r4, #9
 800038e:	0e12      	lsrs	r2, r2, #24
 8000390:	0a6d      	lsrs	r5, r5, #9
 8000392:	0e00      	lsrs	r0, r0, #24
 8000394:	0fc9      	lsrs	r1, r1, #31
 8000396:	2aff      	cmp	r2, #255	; 0xff
 8000398:	d012      	beq.n	80003c0 <__lesf2+0x40>
 800039a:	28ff      	cmp	r0, #255	; 0xff
 800039c:	d00c      	beq.n	80003b8 <__lesf2+0x38>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d112      	bne.n	80003c8 <__lesf2+0x48>
 80003a2:	2800      	cmp	r0, #0
 80003a4:	d119      	bne.n	80003da <__lesf2+0x5a>
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	d117      	bne.n	80003da <__lesf2+0x5a>
 80003aa:	2c00      	cmp	r4, #0
 80003ac:	d02b      	beq.n	8000406 <__lesf2+0x86>
 80003ae:	2002      	movs	r0, #2
 80003b0:	3b01      	subs	r3, #1
 80003b2:	4018      	ands	r0, r3
 80003b4:	3801      	subs	r0, #1
 80003b6:	e026      	b.n	8000406 <__lesf2+0x86>
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	d0f0      	beq.n	800039e <__lesf2+0x1e>
 80003bc:	2002      	movs	r0, #2
 80003be:	e022      	b.n	8000406 <__lesf2+0x86>
 80003c0:	2c00      	cmp	r4, #0
 80003c2:	d1fb      	bne.n	80003bc <__lesf2+0x3c>
 80003c4:	28ff      	cmp	r0, #255	; 0xff
 80003c6:	d01f      	beq.n	8000408 <__lesf2+0x88>
 80003c8:	2800      	cmp	r0, #0
 80003ca:	d11f      	bne.n	800040c <__lesf2+0x8c>
 80003cc:	2d00      	cmp	r5, #0
 80003ce:	d11d      	bne.n	800040c <__lesf2+0x8c>
 80003d0:	2002      	movs	r0, #2
 80003d2:	3b01      	subs	r3, #1
 80003d4:	4018      	ands	r0, r3
 80003d6:	3801      	subs	r0, #1
 80003d8:	e015      	b.n	8000406 <__lesf2+0x86>
 80003da:	2c00      	cmp	r4, #0
 80003dc:	d00e      	beq.n	80003fc <__lesf2+0x7c>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d1e5      	bne.n	80003ae <__lesf2+0x2e>
 80003e2:	2200      	movs	r2, #0
 80003e4:	4290      	cmp	r0, r2
 80003e6:	dc04      	bgt.n	80003f2 <__lesf2+0x72>
 80003e8:	42ac      	cmp	r4, r5
 80003ea:	d8e0      	bhi.n	80003ae <__lesf2+0x2e>
 80003ec:	2000      	movs	r0, #0
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	d209      	bcs.n	8000406 <__lesf2+0x86>
 80003f2:	1e58      	subs	r0, r3, #1
 80003f4:	2301      	movs	r3, #1
 80003f6:	4398      	bics	r0, r3
 80003f8:	3001      	adds	r0, #1
 80003fa:	e004      	b.n	8000406 <__lesf2+0x86>
 80003fc:	2301      	movs	r3, #1
 80003fe:	3901      	subs	r1, #1
 8000400:	4399      	bics	r1, r3
 8000402:	0008      	movs	r0, r1
 8000404:	3001      	adds	r0, #1
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	2d00      	cmp	r5, #0
 800040a:	d1d7      	bne.n	80003bc <__lesf2+0x3c>
 800040c:	428b      	cmp	r3, r1
 800040e:	d1ce      	bne.n	80003ae <__lesf2+0x2e>
 8000410:	4282      	cmp	r2, r0
 8000412:	dde7      	ble.n	80003e4 <__lesf2+0x64>
 8000414:	2102      	movs	r1, #2
 8000416:	1e58      	subs	r0, r3, #1
 8000418:	4008      	ands	r0, r1
 800041a:	3801      	subs	r0, #1
 800041c:	e7f3      	b.n	8000406 <__lesf2+0x86>
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__aeabi_dmul>:
 8000420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000422:	4657      	mov	r7, sl
 8000424:	46de      	mov	lr, fp
 8000426:	464e      	mov	r6, r9
 8000428:	4645      	mov	r5, r8
 800042a:	b5e0      	push	{r5, r6, r7, lr}
 800042c:	4683      	mov	fp, r0
 800042e:	0006      	movs	r6, r0
 8000430:	030f      	lsls	r7, r1, #12
 8000432:	0048      	lsls	r0, r1, #1
 8000434:	b087      	sub	sp, #28
 8000436:	4692      	mov	sl, r2
 8000438:	001d      	movs	r5, r3
 800043a:	0b3f      	lsrs	r7, r7, #12
 800043c:	0d40      	lsrs	r0, r0, #21
 800043e:	0fcc      	lsrs	r4, r1, #31
 8000440:	2800      	cmp	r0, #0
 8000442:	d100      	bne.n	8000446 <__aeabi_dmul+0x26>
 8000444:	e06f      	b.n	8000526 <__aeabi_dmul+0x106>
 8000446:	4bde      	ldr	r3, [pc, #888]	; (80007c0 <__aeabi_dmul+0x3a0>)
 8000448:	4298      	cmp	r0, r3
 800044a:	d038      	beq.n	80004be <__aeabi_dmul+0x9e>
 800044c:	2380      	movs	r3, #128	; 0x80
 800044e:	00ff      	lsls	r7, r7, #3
 8000450:	041b      	lsls	r3, r3, #16
 8000452:	431f      	orrs	r7, r3
 8000454:	0f73      	lsrs	r3, r6, #29
 8000456:	433b      	orrs	r3, r7
 8000458:	9301      	str	r3, [sp, #4]
 800045a:	4bda      	ldr	r3, [pc, #872]	; (80007c4 <__aeabi_dmul+0x3a4>)
 800045c:	2700      	movs	r7, #0
 800045e:	4699      	mov	r9, r3
 8000460:	2300      	movs	r3, #0
 8000462:	469b      	mov	fp, r3
 8000464:	00f6      	lsls	r6, r6, #3
 8000466:	4481      	add	r9, r0
 8000468:	032b      	lsls	r3, r5, #12
 800046a:	0069      	lsls	r1, r5, #1
 800046c:	0b1b      	lsrs	r3, r3, #12
 800046e:	4652      	mov	r2, sl
 8000470:	4698      	mov	r8, r3
 8000472:	0d49      	lsrs	r1, r1, #21
 8000474:	0fed      	lsrs	r5, r5, #31
 8000476:	2900      	cmp	r1, #0
 8000478:	d100      	bne.n	800047c <__aeabi_dmul+0x5c>
 800047a:	e085      	b.n	8000588 <__aeabi_dmul+0x168>
 800047c:	4bd0      	ldr	r3, [pc, #832]	; (80007c0 <__aeabi_dmul+0x3a0>)
 800047e:	4299      	cmp	r1, r3
 8000480:	d100      	bne.n	8000484 <__aeabi_dmul+0x64>
 8000482:	e073      	b.n	800056c <__aeabi_dmul+0x14c>
 8000484:	4643      	mov	r3, r8
 8000486:	00da      	lsls	r2, r3, #3
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	041b      	lsls	r3, r3, #16
 800048c:	4313      	orrs	r3, r2
 800048e:	4652      	mov	r2, sl
 8000490:	48cc      	ldr	r0, [pc, #816]	; (80007c4 <__aeabi_dmul+0x3a4>)
 8000492:	0f52      	lsrs	r2, r2, #29
 8000494:	4684      	mov	ip, r0
 8000496:	4313      	orrs	r3, r2
 8000498:	4652      	mov	r2, sl
 800049a:	2000      	movs	r0, #0
 800049c:	4461      	add	r1, ip
 800049e:	00d2      	lsls	r2, r2, #3
 80004a0:	4489      	add	r9, r1
 80004a2:	0021      	movs	r1, r4
 80004a4:	4069      	eors	r1, r5
 80004a6:	9100      	str	r1, [sp, #0]
 80004a8:	468c      	mov	ip, r1
 80004aa:	2101      	movs	r1, #1
 80004ac:	4449      	add	r1, r9
 80004ae:	468a      	mov	sl, r1
 80004b0:	2f0f      	cmp	r7, #15
 80004b2:	d900      	bls.n	80004b6 <__aeabi_dmul+0x96>
 80004b4:	e090      	b.n	80005d8 <__aeabi_dmul+0x1b8>
 80004b6:	49c4      	ldr	r1, [pc, #784]	; (80007c8 <__aeabi_dmul+0x3a8>)
 80004b8:	00bf      	lsls	r7, r7, #2
 80004ba:	59cf      	ldr	r7, [r1, r7]
 80004bc:	46bf      	mov	pc, r7
 80004be:	465b      	mov	r3, fp
 80004c0:	433b      	orrs	r3, r7
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	d000      	beq.n	80004c8 <__aeabi_dmul+0xa8>
 80004c6:	e16a      	b.n	800079e <__aeabi_dmul+0x37e>
 80004c8:	2302      	movs	r3, #2
 80004ca:	2708      	movs	r7, #8
 80004cc:	2600      	movs	r6, #0
 80004ce:	4681      	mov	r9, r0
 80004d0:	469b      	mov	fp, r3
 80004d2:	e7c9      	b.n	8000468 <__aeabi_dmul+0x48>
 80004d4:	0032      	movs	r2, r6
 80004d6:	4658      	mov	r0, fp
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	4661      	mov	r1, ip
 80004dc:	9100      	str	r1, [sp, #0]
 80004de:	2802      	cmp	r0, #2
 80004e0:	d100      	bne.n	80004e4 <__aeabi_dmul+0xc4>
 80004e2:	e075      	b.n	80005d0 <__aeabi_dmul+0x1b0>
 80004e4:	2803      	cmp	r0, #3
 80004e6:	d100      	bne.n	80004ea <__aeabi_dmul+0xca>
 80004e8:	e1fe      	b.n	80008e8 <__aeabi_dmul+0x4c8>
 80004ea:	2801      	cmp	r0, #1
 80004ec:	d000      	beq.n	80004f0 <__aeabi_dmul+0xd0>
 80004ee:	e12c      	b.n	800074a <__aeabi_dmul+0x32a>
 80004f0:	2300      	movs	r3, #0
 80004f2:	2700      	movs	r7, #0
 80004f4:	2600      	movs	r6, #0
 80004f6:	2500      	movs	r5, #0
 80004f8:	033f      	lsls	r7, r7, #12
 80004fa:	0d2a      	lsrs	r2, r5, #20
 80004fc:	0b3f      	lsrs	r7, r7, #12
 80004fe:	48b3      	ldr	r0, [pc, #716]	; (80007cc <__aeabi_dmul+0x3ac>)
 8000500:	0512      	lsls	r2, r2, #20
 8000502:	433a      	orrs	r2, r7
 8000504:	4002      	ands	r2, r0
 8000506:	051b      	lsls	r3, r3, #20
 8000508:	4313      	orrs	r3, r2
 800050a:	9a00      	ldr	r2, [sp, #0]
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	07d1      	lsls	r1, r2, #31
 8000510:	085b      	lsrs	r3, r3, #1
 8000512:	430b      	orrs	r3, r1
 8000514:	0030      	movs	r0, r6
 8000516:	0019      	movs	r1, r3
 8000518:	b007      	add	sp, #28
 800051a:	bc3c      	pop	{r2, r3, r4, r5}
 800051c:	4690      	mov	r8, r2
 800051e:	4699      	mov	r9, r3
 8000520:	46a2      	mov	sl, r4
 8000522:	46ab      	mov	fp, r5
 8000524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000526:	465b      	mov	r3, fp
 8000528:	433b      	orrs	r3, r7
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	d100      	bne.n	8000530 <__aeabi_dmul+0x110>
 800052e:	e12f      	b.n	8000790 <__aeabi_dmul+0x370>
 8000530:	2f00      	cmp	r7, #0
 8000532:	d100      	bne.n	8000536 <__aeabi_dmul+0x116>
 8000534:	e1a5      	b.n	8000882 <__aeabi_dmul+0x462>
 8000536:	0038      	movs	r0, r7
 8000538:	f000 fa9a 	bl	8000a70 <__clzsi2>
 800053c:	0003      	movs	r3, r0
 800053e:	3b0b      	subs	r3, #11
 8000540:	2b1c      	cmp	r3, #28
 8000542:	dd00      	ble.n	8000546 <__aeabi_dmul+0x126>
 8000544:	e196      	b.n	8000874 <__aeabi_dmul+0x454>
 8000546:	221d      	movs	r2, #29
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	465a      	mov	r2, fp
 800054c:	0001      	movs	r1, r0
 800054e:	40da      	lsrs	r2, r3
 8000550:	465e      	mov	r6, fp
 8000552:	3908      	subs	r1, #8
 8000554:	408f      	lsls	r7, r1
 8000556:	0013      	movs	r3, r2
 8000558:	408e      	lsls	r6, r1
 800055a:	433b      	orrs	r3, r7
 800055c:	9301      	str	r3, [sp, #4]
 800055e:	4b9c      	ldr	r3, [pc, #624]	; (80007d0 <__aeabi_dmul+0x3b0>)
 8000560:	2700      	movs	r7, #0
 8000562:	1a1b      	subs	r3, r3, r0
 8000564:	4699      	mov	r9, r3
 8000566:	2300      	movs	r3, #0
 8000568:	469b      	mov	fp, r3
 800056a:	e77d      	b.n	8000468 <__aeabi_dmul+0x48>
 800056c:	4641      	mov	r1, r8
 800056e:	4653      	mov	r3, sl
 8000570:	430b      	orrs	r3, r1
 8000572:	4993      	ldr	r1, [pc, #588]	; (80007c0 <__aeabi_dmul+0x3a0>)
 8000574:	468c      	mov	ip, r1
 8000576:	44e1      	add	r9, ip
 8000578:	2b00      	cmp	r3, #0
 800057a:	d000      	beq.n	800057e <__aeabi_dmul+0x15e>
 800057c:	e11a      	b.n	80007b4 <__aeabi_dmul+0x394>
 800057e:	2202      	movs	r2, #2
 8000580:	2002      	movs	r0, #2
 8000582:	4317      	orrs	r7, r2
 8000584:	2200      	movs	r2, #0
 8000586:	e78c      	b.n	80004a2 <__aeabi_dmul+0x82>
 8000588:	4313      	orrs	r3, r2
 800058a:	d100      	bne.n	800058e <__aeabi_dmul+0x16e>
 800058c:	e10d      	b.n	80007aa <__aeabi_dmul+0x38a>
 800058e:	4643      	mov	r3, r8
 8000590:	2b00      	cmp	r3, #0
 8000592:	d100      	bne.n	8000596 <__aeabi_dmul+0x176>
 8000594:	e181      	b.n	800089a <__aeabi_dmul+0x47a>
 8000596:	4640      	mov	r0, r8
 8000598:	f000 fa6a 	bl	8000a70 <__clzsi2>
 800059c:	0002      	movs	r2, r0
 800059e:	3a0b      	subs	r2, #11
 80005a0:	2a1c      	cmp	r2, #28
 80005a2:	dd00      	ble.n	80005a6 <__aeabi_dmul+0x186>
 80005a4:	e172      	b.n	800088c <__aeabi_dmul+0x46c>
 80005a6:	0001      	movs	r1, r0
 80005a8:	4643      	mov	r3, r8
 80005aa:	3908      	subs	r1, #8
 80005ac:	408b      	lsls	r3, r1
 80005ae:	4698      	mov	r8, r3
 80005b0:	231d      	movs	r3, #29
 80005b2:	1a9a      	subs	r2, r3, r2
 80005b4:	4653      	mov	r3, sl
 80005b6:	40d3      	lsrs	r3, r2
 80005b8:	001a      	movs	r2, r3
 80005ba:	4643      	mov	r3, r8
 80005bc:	4313      	orrs	r3, r2
 80005be:	4652      	mov	r2, sl
 80005c0:	408a      	lsls	r2, r1
 80005c2:	4649      	mov	r1, r9
 80005c4:	1a08      	subs	r0, r1, r0
 80005c6:	4982      	ldr	r1, [pc, #520]	; (80007d0 <__aeabi_dmul+0x3b0>)
 80005c8:	4689      	mov	r9, r1
 80005ca:	4481      	add	r9, r0
 80005cc:	2000      	movs	r0, #0
 80005ce:	e768      	b.n	80004a2 <__aeabi_dmul+0x82>
 80005d0:	4b7b      	ldr	r3, [pc, #492]	; (80007c0 <__aeabi_dmul+0x3a0>)
 80005d2:	2700      	movs	r7, #0
 80005d4:	2600      	movs	r6, #0
 80005d6:	e78e      	b.n	80004f6 <__aeabi_dmul+0xd6>
 80005d8:	0c14      	lsrs	r4, r2, #16
 80005da:	0412      	lsls	r2, r2, #16
 80005dc:	0c12      	lsrs	r2, r2, #16
 80005de:	0011      	movs	r1, r2
 80005e0:	0c37      	lsrs	r7, r6, #16
 80005e2:	0436      	lsls	r6, r6, #16
 80005e4:	0c35      	lsrs	r5, r6, #16
 80005e6:	4379      	muls	r1, r7
 80005e8:	0028      	movs	r0, r5
 80005ea:	468c      	mov	ip, r1
 80005ec:	002e      	movs	r6, r5
 80005ee:	4360      	muls	r0, r4
 80005f0:	4460      	add	r0, ip
 80005f2:	4683      	mov	fp, r0
 80005f4:	4356      	muls	r6, r2
 80005f6:	0021      	movs	r1, r4
 80005f8:	0c30      	lsrs	r0, r6, #16
 80005fa:	4680      	mov	r8, r0
 80005fc:	4658      	mov	r0, fp
 80005fe:	4379      	muls	r1, r7
 8000600:	4440      	add	r0, r8
 8000602:	9102      	str	r1, [sp, #8]
 8000604:	4584      	cmp	ip, r0
 8000606:	d906      	bls.n	8000616 <__aeabi_dmul+0x1f6>
 8000608:	4688      	mov	r8, r1
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	0249      	lsls	r1, r1, #9
 800060e:	468c      	mov	ip, r1
 8000610:	44e0      	add	r8, ip
 8000612:	4641      	mov	r1, r8
 8000614:	9102      	str	r1, [sp, #8]
 8000616:	0436      	lsls	r6, r6, #16
 8000618:	0c01      	lsrs	r1, r0, #16
 800061a:	0c36      	lsrs	r6, r6, #16
 800061c:	0400      	lsls	r0, r0, #16
 800061e:	468b      	mov	fp, r1
 8000620:	1981      	adds	r1, r0, r6
 8000622:	0c1e      	lsrs	r6, r3, #16
 8000624:	041b      	lsls	r3, r3, #16
 8000626:	0c1b      	lsrs	r3, r3, #16
 8000628:	9103      	str	r1, [sp, #12]
 800062a:	0019      	movs	r1, r3
 800062c:	4379      	muls	r1, r7
 800062e:	468c      	mov	ip, r1
 8000630:	0028      	movs	r0, r5
 8000632:	4375      	muls	r5, r6
 8000634:	4465      	add	r5, ip
 8000636:	46a8      	mov	r8, r5
 8000638:	4358      	muls	r0, r3
 800063a:	0c05      	lsrs	r5, r0, #16
 800063c:	4445      	add	r5, r8
 800063e:	4377      	muls	r7, r6
 8000640:	42a9      	cmp	r1, r5
 8000642:	d903      	bls.n	800064c <__aeabi_dmul+0x22c>
 8000644:	2180      	movs	r1, #128	; 0x80
 8000646:	0249      	lsls	r1, r1, #9
 8000648:	468c      	mov	ip, r1
 800064a:	4467      	add	r7, ip
 800064c:	0c29      	lsrs	r1, r5, #16
 800064e:	468c      	mov	ip, r1
 8000650:	0039      	movs	r1, r7
 8000652:	0400      	lsls	r0, r0, #16
 8000654:	0c00      	lsrs	r0, r0, #16
 8000656:	042d      	lsls	r5, r5, #16
 8000658:	182d      	adds	r5, r5, r0
 800065a:	4461      	add	r1, ip
 800065c:	44ab      	add	fp, r5
 800065e:	9105      	str	r1, [sp, #20]
 8000660:	4659      	mov	r1, fp
 8000662:	9104      	str	r1, [sp, #16]
 8000664:	9901      	ldr	r1, [sp, #4]
 8000666:	040f      	lsls	r7, r1, #16
 8000668:	0c3f      	lsrs	r7, r7, #16
 800066a:	0c08      	lsrs	r0, r1, #16
 800066c:	0039      	movs	r1, r7
 800066e:	4351      	muls	r1, r2
 8000670:	4342      	muls	r2, r0
 8000672:	4690      	mov	r8, r2
 8000674:	0002      	movs	r2, r0
 8000676:	468c      	mov	ip, r1
 8000678:	0c09      	lsrs	r1, r1, #16
 800067a:	468b      	mov	fp, r1
 800067c:	4362      	muls	r2, r4
 800067e:	437c      	muls	r4, r7
 8000680:	4444      	add	r4, r8
 8000682:	445c      	add	r4, fp
 8000684:	45a0      	cmp	r8, r4
 8000686:	d903      	bls.n	8000690 <__aeabi_dmul+0x270>
 8000688:	2180      	movs	r1, #128	; 0x80
 800068a:	0249      	lsls	r1, r1, #9
 800068c:	4688      	mov	r8, r1
 800068e:	4442      	add	r2, r8
 8000690:	0c21      	lsrs	r1, r4, #16
 8000692:	4688      	mov	r8, r1
 8000694:	4661      	mov	r1, ip
 8000696:	0409      	lsls	r1, r1, #16
 8000698:	0c09      	lsrs	r1, r1, #16
 800069a:	468c      	mov	ip, r1
 800069c:	0039      	movs	r1, r7
 800069e:	4359      	muls	r1, r3
 80006a0:	4343      	muls	r3, r0
 80006a2:	4370      	muls	r0, r6
 80006a4:	437e      	muls	r6, r7
 80006a6:	0c0f      	lsrs	r7, r1, #16
 80006a8:	18f6      	adds	r6, r6, r3
 80006aa:	0424      	lsls	r4, r4, #16
 80006ac:	19be      	adds	r6, r7, r6
 80006ae:	4464      	add	r4, ip
 80006b0:	4442      	add	r2, r8
 80006b2:	468c      	mov	ip, r1
 80006b4:	42b3      	cmp	r3, r6
 80006b6:	d903      	bls.n	80006c0 <__aeabi_dmul+0x2a0>
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	025b      	lsls	r3, r3, #9
 80006bc:	4698      	mov	r8, r3
 80006be:	4440      	add	r0, r8
 80006c0:	9b02      	ldr	r3, [sp, #8]
 80006c2:	4661      	mov	r1, ip
 80006c4:	4698      	mov	r8, r3
 80006c6:	9b04      	ldr	r3, [sp, #16]
 80006c8:	0437      	lsls	r7, r6, #16
 80006ca:	4443      	add	r3, r8
 80006cc:	469b      	mov	fp, r3
 80006ce:	45ab      	cmp	fp, r5
 80006d0:	41ad      	sbcs	r5, r5
 80006d2:	426b      	negs	r3, r5
 80006d4:	040d      	lsls	r5, r1, #16
 80006d6:	9905      	ldr	r1, [sp, #20]
 80006d8:	0c2d      	lsrs	r5, r5, #16
 80006da:	468c      	mov	ip, r1
 80006dc:	197f      	adds	r7, r7, r5
 80006de:	4467      	add	r7, ip
 80006e0:	18fd      	adds	r5, r7, r3
 80006e2:	46a8      	mov	r8, r5
 80006e4:	465d      	mov	r5, fp
 80006e6:	192d      	adds	r5, r5, r4
 80006e8:	42a5      	cmp	r5, r4
 80006ea:	41a4      	sbcs	r4, r4
 80006ec:	4693      	mov	fp, r2
 80006ee:	4264      	negs	r4, r4
 80006f0:	46a4      	mov	ip, r4
 80006f2:	44c3      	add	fp, r8
 80006f4:	44dc      	add	ip, fp
 80006f6:	428f      	cmp	r7, r1
 80006f8:	41bf      	sbcs	r7, r7
 80006fa:	4598      	cmp	r8, r3
 80006fc:	419b      	sbcs	r3, r3
 80006fe:	4593      	cmp	fp, r2
 8000700:	4192      	sbcs	r2, r2
 8000702:	45a4      	cmp	ip, r4
 8000704:	41a4      	sbcs	r4, r4
 8000706:	425b      	negs	r3, r3
 8000708:	427f      	negs	r7, r7
 800070a:	431f      	orrs	r7, r3
 800070c:	0c36      	lsrs	r6, r6, #16
 800070e:	4252      	negs	r2, r2
 8000710:	4264      	negs	r4, r4
 8000712:	19bf      	adds	r7, r7, r6
 8000714:	4322      	orrs	r2, r4
 8000716:	18bf      	adds	r7, r7, r2
 8000718:	4662      	mov	r2, ip
 800071a:	1838      	adds	r0, r7, r0
 800071c:	0243      	lsls	r3, r0, #9
 800071e:	0dd2      	lsrs	r2, r2, #23
 8000720:	9903      	ldr	r1, [sp, #12]
 8000722:	4313      	orrs	r3, r2
 8000724:	026a      	lsls	r2, r5, #9
 8000726:	430a      	orrs	r2, r1
 8000728:	1e50      	subs	r0, r2, #1
 800072a:	4182      	sbcs	r2, r0
 800072c:	4661      	mov	r1, ip
 800072e:	0ded      	lsrs	r5, r5, #23
 8000730:	432a      	orrs	r2, r5
 8000732:	024e      	lsls	r6, r1, #9
 8000734:	4332      	orrs	r2, r6
 8000736:	01d9      	lsls	r1, r3, #7
 8000738:	d400      	bmi.n	800073c <__aeabi_dmul+0x31c>
 800073a:	e0b3      	b.n	80008a4 <__aeabi_dmul+0x484>
 800073c:	2601      	movs	r6, #1
 800073e:	0850      	lsrs	r0, r2, #1
 8000740:	4032      	ands	r2, r6
 8000742:	4302      	orrs	r2, r0
 8000744:	07de      	lsls	r6, r3, #31
 8000746:	4332      	orrs	r2, r6
 8000748:	085b      	lsrs	r3, r3, #1
 800074a:	4c22      	ldr	r4, [pc, #136]	; (80007d4 <__aeabi_dmul+0x3b4>)
 800074c:	4454      	add	r4, sl
 800074e:	2c00      	cmp	r4, #0
 8000750:	dd62      	ble.n	8000818 <__aeabi_dmul+0x3f8>
 8000752:	0751      	lsls	r1, r2, #29
 8000754:	d009      	beq.n	800076a <__aeabi_dmul+0x34a>
 8000756:	200f      	movs	r0, #15
 8000758:	4010      	ands	r0, r2
 800075a:	2804      	cmp	r0, #4
 800075c:	d005      	beq.n	800076a <__aeabi_dmul+0x34a>
 800075e:	1d10      	adds	r0, r2, #4
 8000760:	4290      	cmp	r0, r2
 8000762:	4192      	sbcs	r2, r2
 8000764:	4252      	negs	r2, r2
 8000766:	189b      	adds	r3, r3, r2
 8000768:	0002      	movs	r2, r0
 800076a:	01d9      	lsls	r1, r3, #7
 800076c:	d504      	bpl.n	8000778 <__aeabi_dmul+0x358>
 800076e:	2480      	movs	r4, #128	; 0x80
 8000770:	4819      	ldr	r0, [pc, #100]	; (80007d8 <__aeabi_dmul+0x3b8>)
 8000772:	00e4      	lsls	r4, r4, #3
 8000774:	4003      	ands	r3, r0
 8000776:	4454      	add	r4, sl
 8000778:	4818      	ldr	r0, [pc, #96]	; (80007dc <__aeabi_dmul+0x3bc>)
 800077a:	4284      	cmp	r4, r0
 800077c:	dd00      	ble.n	8000780 <__aeabi_dmul+0x360>
 800077e:	e727      	b.n	80005d0 <__aeabi_dmul+0x1b0>
 8000780:	075e      	lsls	r6, r3, #29
 8000782:	025b      	lsls	r3, r3, #9
 8000784:	08d2      	lsrs	r2, r2, #3
 8000786:	0b1f      	lsrs	r7, r3, #12
 8000788:	0563      	lsls	r3, r4, #21
 800078a:	4316      	orrs	r6, r2
 800078c:	0d5b      	lsrs	r3, r3, #21
 800078e:	e6b2      	b.n	80004f6 <__aeabi_dmul+0xd6>
 8000790:	2300      	movs	r3, #0
 8000792:	4699      	mov	r9, r3
 8000794:	3301      	adds	r3, #1
 8000796:	2704      	movs	r7, #4
 8000798:	2600      	movs	r6, #0
 800079a:	469b      	mov	fp, r3
 800079c:	e664      	b.n	8000468 <__aeabi_dmul+0x48>
 800079e:	2303      	movs	r3, #3
 80007a0:	9701      	str	r7, [sp, #4]
 80007a2:	4681      	mov	r9, r0
 80007a4:	270c      	movs	r7, #12
 80007a6:	469b      	mov	fp, r3
 80007a8:	e65e      	b.n	8000468 <__aeabi_dmul+0x48>
 80007aa:	2201      	movs	r2, #1
 80007ac:	2001      	movs	r0, #1
 80007ae:	4317      	orrs	r7, r2
 80007b0:	2200      	movs	r2, #0
 80007b2:	e676      	b.n	80004a2 <__aeabi_dmul+0x82>
 80007b4:	2303      	movs	r3, #3
 80007b6:	2003      	movs	r0, #3
 80007b8:	431f      	orrs	r7, r3
 80007ba:	4643      	mov	r3, r8
 80007bc:	e671      	b.n	80004a2 <__aeabi_dmul+0x82>
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	000007ff 	.word	0x000007ff
 80007c4:	fffffc01 	.word	0xfffffc01
 80007c8:	08003d58 	.word	0x08003d58
 80007cc:	800fffff 	.word	0x800fffff
 80007d0:	fffffc0d 	.word	0xfffffc0d
 80007d4:	000003ff 	.word	0x000003ff
 80007d8:	feffffff 	.word	0xfeffffff
 80007dc:	000007fe 	.word	0x000007fe
 80007e0:	2300      	movs	r3, #0
 80007e2:	2780      	movs	r7, #128	; 0x80
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	033f      	lsls	r7, r7, #12
 80007e8:	2600      	movs	r6, #0
 80007ea:	4b43      	ldr	r3, [pc, #268]	; (80008f8 <__aeabi_dmul+0x4d8>)
 80007ec:	e683      	b.n	80004f6 <__aeabi_dmul+0xd6>
 80007ee:	9b01      	ldr	r3, [sp, #4]
 80007f0:	0032      	movs	r2, r6
 80007f2:	46a4      	mov	ip, r4
 80007f4:	4658      	mov	r0, fp
 80007f6:	e670      	b.n	80004da <__aeabi_dmul+0xba>
 80007f8:	46ac      	mov	ip, r5
 80007fa:	e66e      	b.n	80004da <__aeabi_dmul+0xba>
 80007fc:	2780      	movs	r7, #128	; 0x80
 80007fe:	9901      	ldr	r1, [sp, #4]
 8000800:	033f      	lsls	r7, r7, #12
 8000802:	4239      	tst	r1, r7
 8000804:	d02d      	beq.n	8000862 <__aeabi_dmul+0x442>
 8000806:	423b      	tst	r3, r7
 8000808:	d12b      	bne.n	8000862 <__aeabi_dmul+0x442>
 800080a:	431f      	orrs	r7, r3
 800080c:	033f      	lsls	r7, r7, #12
 800080e:	0b3f      	lsrs	r7, r7, #12
 8000810:	9500      	str	r5, [sp, #0]
 8000812:	0016      	movs	r6, r2
 8000814:	4b38      	ldr	r3, [pc, #224]	; (80008f8 <__aeabi_dmul+0x4d8>)
 8000816:	e66e      	b.n	80004f6 <__aeabi_dmul+0xd6>
 8000818:	2501      	movs	r5, #1
 800081a:	1b2d      	subs	r5, r5, r4
 800081c:	2d38      	cmp	r5, #56	; 0x38
 800081e:	dd00      	ble.n	8000822 <__aeabi_dmul+0x402>
 8000820:	e666      	b.n	80004f0 <__aeabi_dmul+0xd0>
 8000822:	2d1f      	cmp	r5, #31
 8000824:	dc40      	bgt.n	80008a8 <__aeabi_dmul+0x488>
 8000826:	4835      	ldr	r0, [pc, #212]	; (80008fc <__aeabi_dmul+0x4dc>)
 8000828:	001c      	movs	r4, r3
 800082a:	4450      	add	r0, sl
 800082c:	0016      	movs	r6, r2
 800082e:	4082      	lsls	r2, r0
 8000830:	4084      	lsls	r4, r0
 8000832:	40ee      	lsrs	r6, r5
 8000834:	1e50      	subs	r0, r2, #1
 8000836:	4182      	sbcs	r2, r0
 8000838:	4334      	orrs	r4, r6
 800083a:	4314      	orrs	r4, r2
 800083c:	40eb      	lsrs	r3, r5
 800083e:	0762      	lsls	r2, r4, #29
 8000840:	d009      	beq.n	8000856 <__aeabi_dmul+0x436>
 8000842:	220f      	movs	r2, #15
 8000844:	4022      	ands	r2, r4
 8000846:	2a04      	cmp	r2, #4
 8000848:	d005      	beq.n	8000856 <__aeabi_dmul+0x436>
 800084a:	0022      	movs	r2, r4
 800084c:	1d14      	adds	r4, r2, #4
 800084e:	4294      	cmp	r4, r2
 8000850:	4180      	sbcs	r0, r0
 8000852:	4240      	negs	r0, r0
 8000854:	181b      	adds	r3, r3, r0
 8000856:	021a      	lsls	r2, r3, #8
 8000858:	d53e      	bpl.n	80008d8 <__aeabi_dmul+0x4b8>
 800085a:	2301      	movs	r3, #1
 800085c:	2700      	movs	r7, #0
 800085e:	2600      	movs	r6, #0
 8000860:	e649      	b.n	80004f6 <__aeabi_dmul+0xd6>
 8000862:	2780      	movs	r7, #128	; 0x80
 8000864:	9b01      	ldr	r3, [sp, #4]
 8000866:	033f      	lsls	r7, r7, #12
 8000868:	431f      	orrs	r7, r3
 800086a:	033f      	lsls	r7, r7, #12
 800086c:	0b3f      	lsrs	r7, r7, #12
 800086e:	9400      	str	r4, [sp, #0]
 8000870:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <__aeabi_dmul+0x4d8>)
 8000872:	e640      	b.n	80004f6 <__aeabi_dmul+0xd6>
 8000874:	0003      	movs	r3, r0
 8000876:	465a      	mov	r2, fp
 8000878:	3b28      	subs	r3, #40	; 0x28
 800087a:	409a      	lsls	r2, r3
 800087c:	2600      	movs	r6, #0
 800087e:	9201      	str	r2, [sp, #4]
 8000880:	e66d      	b.n	800055e <__aeabi_dmul+0x13e>
 8000882:	4658      	mov	r0, fp
 8000884:	f000 f8f4 	bl	8000a70 <__clzsi2>
 8000888:	3020      	adds	r0, #32
 800088a:	e657      	b.n	800053c <__aeabi_dmul+0x11c>
 800088c:	0003      	movs	r3, r0
 800088e:	4652      	mov	r2, sl
 8000890:	3b28      	subs	r3, #40	; 0x28
 8000892:	409a      	lsls	r2, r3
 8000894:	0013      	movs	r3, r2
 8000896:	2200      	movs	r2, #0
 8000898:	e693      	b.n	80005c2 <__aeabi_dmul+0x1a2>
 800089a:	4650      	mov	r0, sl
 800089c:	f000 f8e8 	bl	8000a70 <__clzsi2>
 80008a0:	3020      	adds	r0, #32
 80008a2:	e67b      	b.n	800059c <__aeabi_dmul+0x17c>
 80008a4:	46ca      	mov	sl, r9
 80008a6:	e750      	b.n	800074a <__aeabi_dmul+0x32a>
 80008a8:	201f      	movs	r0, #31
 80008aa:	001e      	movs	r6, r3
 80008ac:	4240      	negs	r0, r0
 80008ae:	1b04      	subs	r4, r0, r4
 80008b0:	40e6      	lsrs	r6, r4
 80008b2:	2d20      	cmp	r5, #32
 80008b4:	d003      	beq.n	80008be <__aeabi_dmul+0x49e>
 80008b6:	4c12      	ldr	r4, [pc, #72]	; (8000900 <__aeabi_dmul+0x4e0>)
 80008b8:	4454      	add	r4, sl
 80008ba:	40a3      	lsls	r3, r4
 80008bc:	431a      	orrs	r2, r3
 80008be:	1e50      	subs	r0, r2, #1
 80008c0:	4182      	sbcs	r2, r0
 80008c2:	4332      	orrs	r2, r6
 80008c4:	2607      	movs	r6, #7
 80008c6:	2700      	movs	r7, #0
 80008c8:	4016      	ands	r6, r2
 80008ca:	d009      	beq.n	80008e0 <__aeabi_dmul+0x4c0>
 80008cc:	200f      	movs	r0, #15
 80008ce:	2300      	movs	r3, #0
 80008d0:	4010      	ands	r0, r2
 80008d2:	0014      	movs	r4, r2
 80008d4:	2804      	cmp	r0, #4
 80008d6:	d1b9      	bne.n	800084c <__aeabi_dmul+0x42c>
 80008d8:	0022      	movs	r2, r4
 80008da:	075e      	lsls	r6, r3, #29
 80008dc:	025b      	lsls	r3, r3, #9
 80008de:	0b1f      	lsrs	r7, r3, #12
 80008e0:	08d2      	lsrs	r2, r2, #3
 80008e2:	4316      	orrs	r6, r2
 80008e4:	2300      	movs	r3, #0
 80008e6:	e606      	b.n	80004f6 <__aeabi_dmul+0xd6>
 80008e8:	2780      	movs	r7, #128	; 0x80
 80008ea:	033f      	lsls	r7, r7, #12
 80008ec:	431f      	orrs	r7, r3
 80008ee:	033f      	lsls	r7, r7, #12
 80008f0:	0b3f      	lsrs	r7, r7, #12
 80008f2:	0016      	movs	r6, r2
 80008f4:	4b00      	ldr	r3, [pc, #0]	; (80008f8 <__aeabi_dmul+0x4d8>)
 80008f6:	e5fe      	b.n	80004f6 <__aeabi_dmul+0xd6>
 80008f8:	000007ff 	.word	0x000007ff
 80008fc:	0000041e 	.word	0x0000041e
 8000900:	0000043e 	.word	0x0000043e

08000904 <__aeabi_ui2d>:
 8000904:	b510      	push	{r4, lr}
 8000906:	1e04      	subs	r4, r0, #0
 8000908:	d025      	beq.n	8000956 <__aeabi_ui2d+0x52>
 800090a:	f000 f8b1 	bl	8000a70 <__clzsi2>
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <__aeabi_ui2d+0x5c>)
 8000910:	1a1b      	subs	r3, r3, r0
 8000912:	055b      	lsls	r3, r3, #21
 8000914:	0d5b      	lsrs	r3, r3, #21
 8000916:	280a      	cmp	r0, #10
 8000918:	dd12      	ble.n	8000940 <__aeabi_ui2d+0x3c>
 800091a:	380b      	subs	r0, #11
 800091c:	4084      	lsls	r4, r0
 800091e:	2200      	movs	r2, #0
 8000920:	0324      	lsls	r4, r4, #12
 8000922:	0b24      	lsrs	r4, r4, #12
 8000924:	2100      	movs	r1, #0
 8000926:	0010      	movs	r0, r2
 8000928:	0324      	lsls	r4, r4, #12
 800092a:	0d0a      	lsrs	r2, r1, #20
 800092c:	0b24      	lsrs	r4, r4, #12
 800092e:	0512      	lsls	r2, r2, #20
 8000930:	4322      	orrs	r2, r4
 8000932:	4c0c      	ldr	r4, [pc, #48]	; (8000964 <__aeabi_ui2d+0x60>)
 8000934:	051b      	lsls	r3, r3, #20
 8000936:	4022      	ands	r2, r4
 8000938:	4313      	orrs	r3, r2
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	0859      	lsrs	r1, r3, #1
 800093e:	bd10      	pop	{r4, pc}
 8000940:	0002      	movs	r2, r0
 8000942:	0021      	movs	r1, r4
 8000944:	3215      	adds	r2, #21
 8000946:	4091      	lsls	r1, r2
 8000948:	000a      	movs	r2, r1
 800094a:	210b      	movs	r1, #11
 800094c:	1a08      	subs	r0, r1, r0
 800094e:	40c4      	lsrs	r4, r0
 8000950:	0324      	lsls	r4, r4, #12
 8000952:	0b24      	lsrs	r4, r4, #12
 8000954:	e7e6      	b.n	8000924 <__aeabi_ui2d+0x20>
 8000956:	2300      	movs	r3, #0
 8000958:	2400      	movs	r4, #0
 800095a:	2200      	movs	r2, #0
 800095c:	e7e2      	b.n	8000924 <__aeabi_ui2d+0x20>
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	0000041e 	.word	0x0000041e
 8000964:	800fffff 	.word	0x800fffff

08000968 <__aeabi_d2f>:
 8000968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800096a:	004c      	lsls	r4, r1, #1
 800096c:	0d64      	lsrs	r4, r4, #21
 800096e:	030b      	lsls	r3, r1, #12
 8000970:	1c62      	adds	r2, r4, #1
 8000972:	0a5b      	lsrs	r3, r3, #9
 8000974:	0f46      	lsrs	r6, r0, #29
 8000976:	0552      	lsls	r2, r2, #21
 8000978:	0fc9      	lsrs	r1, r1, #31
 800097a:	431e      	orrs	r6, r3
 800097c:	00c5      	lsls	r5, r0, #3
 800097e:	0d52      	lsrs	r2, r2, #21
 8000980:	2a01      	cmp	r2, #1
 8000982:	dd29      	ble.n	80009d8 <__aeabi_d2f+0x70>
 8000984:	4b37      	ldr	r3, [pc, #220]	; (8000a64 <__aeabi_d2f+0xfc>)
 8000986:	18e7      	adds	r7, r4, r3
 8000988:	2ffe      	cmp	r7, #254	; 0xfe
 800098a:	dc1c      	bgt.n	80009c6 <__aeabi_d2f+0x5e>
 800098c:	2f00      	cmp	r7, #0
 800098e:	dd3b      	ble.n	8000a08 <__aeabi_d2f+0xa0>
 8000990:	0180      	lsls	r0, r0, #6
 8000992:	1e43      	subs	r3, r0, #1
 8000994:	4198      	sbcs	r0, r3
 8000996:	2207      	movs	r2, #7
 8000998:	00f3      	lsls	r3, r6, #3
 800099a:	0f6d      	lsrs	r5, r5, #29
 800099c:	4303      	orrs	r3, r0
 800099e:	432b      	orrs	r3, r5
 80009a0:	401a      	ands	r2, r3
 80009a2:	2a00      	cmp	r2, #0
 80009a4:	d004      	beq.n	80009b0 <__aeabi_d2f+0x48>
 80009a6:	220f      	movs	r2, #15
 80009a8:	401a      	ands	r2, r3
 80009aa:	2a04      	cmp	r2, #4
 80009ac:	d000      	beq.n	80009b0 <__aeabi_d2f+0x48>
 80009ae:	3304      	adds	r3, #4
 80009b0:	2280      	movs	r2, #128	; 0x80
 80009b2:	04d2      	lsls	r2, r2, #19
 80009b4:	401a      	ands	r2, r3
 80009b6:	d024      	beq.n	8000a02 <__aeabi_d2f+0x9a>
 80009b8:	3701      	adds	r7, #1
 80009ba:	b2fa      	uxtb	r2, r7
 80009bc:	2fff      	cmp	r7, #255	; 0xff
 80009be:	d002      	beq.n	80009c6 <__aeabi_d2f+0x5e>
 80009c0:	019b      	lsls	r3, r3, #6
 80009c2:	0a58      	lsrs	r0, r3, #9
 80009c4:	e001      	b.n	80009ca <__aeabi_d2f+0x62>
 80009c6:	22ff      	movs	r2, #255	; 0xff
 80009c8:	2000      	movs	r0, #0
 80009ca:	0240      	lsls	r0, r0, #9
 80009cc:	05d2      	lsls	r2, r2, #23
 80009ce:	0a40      	lsrs	r0, r0, #9
 80009d0:	07c9      	lsls	r1, r1, #31
 80009d2:	4310      	orrs	r0, r2
 80009d4:	4308      	orrs	r0, r1
 80009d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009d8:	4335      	orrs	r5, r6
 80009da:	2c00      	cmp	r4, #0
 80009dc:	d104      	bne.n	80009e8 <__aeabi_d2f+0x80>
 80009de:	2d00      	cmp	r5, #0
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_d2f+0x90>
 80009e2:	2200      	movs	r2, #0
 80009e4:	2000      	movs	r0, #0
 80009e6:	e7f0      	b.n	80009ca <__aeabi_d2f+0x62>
 80009e8:	2d00      	cmp	r5, #0
 80009ea:	d0ec      	beq.n	80009c6 <__aeabi_d2f+0x5e>
 80009ec:	2080      	movs	r0, #128	; 0x80
 80009ee:	03c0      	lsls	r0, r0, #15
 80009f0:	4330      	orrs	r0, r6
 80009f2:	22ff      	movs	r2, #255	; 0xff
 80009f4:	e7e9      	b.n	80009ca <__aeabi_d2f+0x62>
 80009f6:	2400      	movs	r4, #0
 80009f8:	2300      	movs	r3, #0
 80009fa:	025b      	lsls	r3, r3, #9
 80009fc:	0a58      	lsrs	r0, r3, #9
 80009fe:	b2e2      	uxtb	r2, r4
 8000a00:	e7e3      	b.n	80009ca <__aeabi_d2f+0x62>
 8000a02:	08db      	lsrs	r3, r3, #3
 8000a04:	003c      	movs	r4, r7
 8000a06:	e7f8      	b.n	80009fa <__aeabi_d2f+0x92>
 8000a08:	003b      	movs	r3, r7
 8000a0a:	3317      	adds	r3, #23
 8000a0c:	dbf3      	blt.n	80009f6 <__aeabi_d2f+0x8e>
 8000a0e:	2380      	movs	r3, #128	; 0x80
 8000a10:	041b      	lsls	r3, r3, #16
 8000a12:	4333      	orrs	r3, r6
 8000a14:	261e      	movs	r6, #30
 8000a16:	1bf6      	subs	r6, r6, r7
 8000a18:	2e1f      	cmp	r6, #31
 8000a1a:	dd14      	ble.n	8000a46 <__aeabi_d2f+0xde>
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	4252      	negs	r2, r2
 8000a20:	1bd7      	subs	r7, r2, r7
 8000a22:	001a      	movs	r2, r3
 8000a24:	40fa      	lsrs	r2, r7
 8000a26:	0017      	movs	r7, r2
 8000a28:	2e20      	cmp	r6, #32
 8000a2a:	d004      	beq.n	8000a36 <__aeabi_d2f+0xce>
 8000a2c:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <__aeabi_d2f+0x100>)
 8000a2e:	4694      	mov	ip, r2
 8000a30:	4464      	add	r4, ip
 8000a32:	40a3      	lsls	r3, r4
 8000a34:	431d      	orrs	r5, r3
 8000a36:	002b      	movs	r3, r5
 8000a38:	1e5d      	subs	r5, r3, #1
 8000a3a:	41ab      	sbcs	r3, r5
 8000a3c:	2207      	movs	r2, #7
 8000a3e:	433b      	orrs	r3, r7
 8000a40:	401a      	ands	r2, r3
 8000a42:	2700      	movs	r7, #0
 8000a44:	e7ad      	b.n	80009a2 <__aeabi_d2f+0x3a>
 8000a46:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <__aeabi_d2f+0x104>)
 8000a48:	0028      	movs	r0, r5
 8000a4a:	18a2      	adds	r2, r4, r2
 8000a4c:	4095      	lsls	r5, r2
 8000a4e:	4093      	lsls	r3, r2
 8000a50:	1e6c      	subs	r4, r5, #1
 8000a52:	41a5      	sbcs	r5, r4
 8000a54:	40f0      	lsrs	r0, r6
 8000a56:	2207      	movs	r2, #7
 8000a58:	432b      	orrs	r3, r5
 8000a5a:	4303      	orrs	r3, r0
 8000a5c:	401a      	ands	r2, r3
 8000a5e:	2700      	movs	r7, #0
 8000a60:	e79f      	b.n	80009a2 <__aeabi_d2f+0x3a>
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	fffffc80 	.word	0xfffffc80
 8000a68:	fffffca2 	.word	0xfffffca2
 8000a6c:	fffffc82 	.word	0xfffffc82

08000a70 <__clzsi2>:
 8000a70:	211c      	movs	r1, #28
 8000a72:	2301      	movs	r3, #1
 8000a74:	041b      	lsls	r3, r3, #16
 8000a76:	4298      	cmp	r0, r3
 8000a78:	d301      	bcc.n	8000a7e <__clzsi2+0xe>
 8000a7a:	0c00      	lsrs	r0, r0, #16
 8000a7c:	3910      	subs	r1, #16
 8000a7e:	0a1b      	lsrs	r3, r3, #8
 8000a80:	4298      	cmp	r0, r3
 8000a82:	d301      	bcc.n	8000a88 <__clzsi2+0x18>
 8000a84:	0a00      	lsrs	r0, r0, #8
 8000a86:	3908      	subs	r1, #8
 8000a88:	091b      	lsrs	r3, r3, #4
 8000a8a:	4298      	cmp	r0, r3
 8000a8c:	d301      	bcc.n	8000a92 <__clzsi2+0x22>
 8000a8e:	0900      	lsrs	r0, r0, #4
 8000a90:	3904      	subs	r1, #4
 8000a92:	a202      	add	r2, pc, #8	; (adr r2, 8000a9c <__clzsi2+0x2c>)
 8000a94:	5c10      	ldrb	r0, [r2, r0]
 8000a96:	1840      	adds	r0, r0, r1
 8000a98:	4770      	bx	lr
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	02020304 	.word	0x02020304
 8000aa0:	01010101 	.word	0x01010101
	...

08000aac <Read_ADC_Values>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to Read ADC Values for ADC_IN1, ADC_IN2, ADC_IN3
void Read_ADC_Values (ADC_HandleTypeDef* hadc)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]

  //start of actual code
  HAL_ADCEx_Calibration_Start(hadc);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f001 f8b8 	bl	8001c2c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(hadc);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f000 fd44 	bl	800154c <HAL_ADC_Start>

  // Get Dry NTC resistance _!!! Might not need these 3 Poll for conversions!! Check with a UART print
  HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	425a      	negs	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	0011      	movs	r1, r2
 8000acc:	0018      	movs	r0, r3
 8000ace:	f000 fdd1 	bl	8001674 <HAL_ADC_PollForConversion>
  WET_NTC_raw = HAL_ADC_GetValue(hadc);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f000 fe65 	bl	80017a4 <HAL_ADC_GetValue>
 8000ada:	0002      	movs	r2, r0
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <Read_ADC_Values+0xa0>)
 8000ade:	601a      	str	r2, [r3, #0]

  // Get Wet NTC resistance
  HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	425a      	negs	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	0011      	movs	r1, r2
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f000 fdc3 	bl	8001674 <HAL_ADC_PollForConversion>
  DRY_NTC_raw = HAL_ADC_GetValue(hadc);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	0018      	movs	r0, r3
 8000af2:	f000 fe57 	bl	80017a4 <HAL_ADC_GetValue>
 8000af6:	0002      	movs	r2, r0
 8000af8:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <Read_ADC_Values+0xa4>)
 8000afa:	601a      	str	r2, [r3, #0]

  // Get VPV_SENSE voltage
  HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8000afc:	2301      	movs	r3, #1
 8000afe:	425a      	negs	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	0011      	movs	r1, r2
 8000b04:	0018      	movs	r0, r3
 8000b06:	f000 fdb5 	bl	8001674 <HAL_ADC_PollForConversion>
  PV_REF_raw = HAL_ADC_GetValue(hadc);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f000 fe49 	bl	80017a4 <HAL_ADC_GetValue>
 8000b12:	0002      	movs	r2, r0
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <Read_ADC_Values+0xa8>)
 8000b16:	601a      	str	r2, [r3, #0]
  PV_REF = PV_REF_raw  * (28.08/4096); // Convert RAW ADC to voltage
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <Read_ADC_Values+0xa8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f7ff fef1 	bl	8000904 <__aeabi_ui2d>
 8000b22:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <Read_ADC_Values+0xac>)
 8000b24:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <Read_ADC_Values+0xb0>)
 8000b26:	f7ff fc7b 	bl	8000420 <__aeabi_dmul>
 8000b2a:	0003      	movs	r3, r0
 8000b2c:	000c      	movs	r4, r1
 8000b2e:	0018      	movs	r0, r3
 8000b30:	0021      	movs	r1, r4
 8000b32:	f7ff ff19 	bl	8000968 <__aeabi_d2f>
 8000b36:	1c02      	adds	r2, r0, #0
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <Read_ADC_Values+0xb4>)
 8000b3a:	601a      	str	r2, [r3, #0]

  HAL_ADC_Stop(hadc);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f000 fd58 	bl	80015f4 <HAL_ADC_Stop>
  return;
 8000b44:	46c0      	nop			; (mov r8, r8)
}
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b003      	add	sp, #12
 8000b4a:	bd90      	pop	{r4, r7, pc}
 8000b4c:	2000012c 	.word	0x2000012c
 8000b50:	20000124 	.word	0x20000124
 8000b54:	2000009c 	.word	0x2000009c
 8000b58:	e147ae14 	.word	0xe147ae14
 8000b5c:	3f7c147a 	.word	0x3f7c147a
 8000b60:	20000098 	.word	0x20000098

08000b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b08f      	sub	sp, #60	; 0x3c
 8000b68:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6a:	f000 fb29 	bl	80011c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6e:	f000 f8a1 	bl	8000cb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b72:	f000 f9a1 	bl	8000eb8 <MX_GPIO_Init>
  MX_ADC_Init();
 8000b76:	f000 f8fb 	bl	8000d70 <MX_ADC_Init>
  MX_USART1_UART_Init();
 8000b7a:	f000 f96d 	bl	8000e58 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Set BLDC enable pin low
 8000b7e:	2390      	movs	r3, #144	; 0x90
 8000b80:	05db      	lsls	r3, r3, #23
 8000b82:	2200      	movs	r2, #0
 8000b84:	2120      	movs	r1, #32
 8000b86:	0018      	movs	r0, r3
 8000b88:	f001 fb1c 	bl	80021c4 <HAL_GPIO_WritePin>

  // UART TRansmit Test
  uart_buf_len = sprintf(uart_buf, "UART Test\r\n");
 8000b8c:	003b      	movs	r3, r7
 8000b8e:	4a3f      	ldr	r2, [pc, #252]	; (8000c8c <main+0x128>)
 8000b90:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000b92:	c313      	stmia	r3!, {r0, r1, r4}
 8000b94:	230b      	movs	r3, #11
 8000b96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	0039      	movs	r1, r7
 8000b9e:	483c      	ldr	r0, [pc, #240]	; (8000c90 <main+0x12c>)
 8000ba0:	2364      	movs	r3, #100	; 0x64
 8000ba2:	f002 f8d1 	bl	8002d48 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	uart_buf_len = sprintf(uart_buf, "UART Test 2\r\n");
 8000ba6:	003b      	movs	r3, r7
 8000ba8:	4a3a      	ldr	r2, [pc, #232]	; (8000c94 <main+0x130>)
 8000baa:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000bac:	c313      	stmia	r3!, {r0, r1, r4}
 8000bae:	8812      	ldrh	r2, [r2, #0]
 8000bb0:	801a      	strh	r2, [r3, #0]
 8000bb2:	230d      	movs	r3, #13
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	0039      	movs	r1, r7
 8000bbc:	4834      	ldr	r0, [pc, #208]	; (8000c90 <main+0x12c>)
 8000bbe:	2364      	movs	r3, #100	; 0x64
 8000bc0:	f002 f8c2 	bl	8002d48 <HAL_UART_Transmit>



	Read_ADC_Values(&hadc);
 8000bc4:	4b34      	ldr	r3, [pc, #208]	; (8000c98 <main+0x134>)
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f7ff ff70 	bl	8000aac <Read_ADC_Values>

	uart_buf_len = sprintf(uart_buf, "\r\n", WET_NTC_raw);
 8000bcc:	4b33      	ldr	r3, [pc, #204]	; (8000c9c <main+0x138>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4933      	ldr	r1, [pc, #204]	; (8000ca0 <main+0x13c>)
 8000bd2:	003b      	movs	r3, r7
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f002 fc8b 	bl	80034f0 <siprintf>
 8000bda:	0003      	movs	r3, r0
 8000bdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	0039      	movs	r1, r7
 8000be4:	482a      	ldr	r0, [pc, #168]	; (8000c90 <main+0x12c>)
 8000be6:	2364      	movs	r3, #100	; 0x64
 8000be8:	f002 f8ae 	bl	8002d48 <HAL_UART_Transmit>

    /* USER CODE BEGIN 3 */



    HAL_Delay(100);
 8000bec:	2064      	movs	r0, #100	; 0x64
 8000bee:	f000 fb4b 	bl	8001288 <HAL_Delay>



    if (PV_REF > 16){
 8000bf2:	4b2c      	ldr	r3, [pc, #176]	; (8000ca4 <main+0x140>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2183      	movs	r1, #131	; 0x83
 8000bf8:	05c9      	lsls	r1, r1, #23
 8000bfa:	1c18      	adds	r0, r3, #0
 8000bfc:	f7ff fb36 	bl	800026c <__aeabi_fcmpgt>
 8000c00:	1e03      	subs	r3, r0, #0
 8000c02:	d007      	beq.n	8000c14 <main+0xb0>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000c04:	2390      	movs	r3, #144	; 0x90
 8000c06:	05db      	lsls	r3, r3, #23
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2180      	movs	r1, #128	; 0x80
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f001 fad9 	bl	80021c4 <HAL_GPIO_WritePin>
 8000c12:	e017      	b.n	8000c44 <main+0xe0>
    }
    else if (PV_REF <= 16  &&  PV_REF >= 14){
 8000c14:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <main+0x140>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2183      	movs	r1, #131	; 0x83
 8000c1a:	05c9      	lsls	r1, r1, #23
 8000c1c:	1c18      	adds	r0, r3, #0
 8000c1e:	f7ff fb1b 	bl	8000258 <__aeabi_fcmple>
 8000c22:	1e03      	subs	r3, r0, #0
 8000c24:	d007      	beq.n	8000c36 <main+0xd2>
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <main+0x140>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	491f      	ldr	r1, [pc, #124]	; (8000ca8 <main+0x144>)
 8000c2c:	1c18      	adds	r0, r3, #0
 8000c2e:	f7ff fb27 	bl	8000280 <__aeabi_fcmpge>
 8000c32:	1e03      	subs	r3, r0, #0
 8000c34:	d106      	bne.n	8000c44 <main+0xe0>
    	;
    }
    else {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c36:	2390      	movs	r3, #144	; 0x90
 8000c38:	05db      	lsls	r3, r3, #23
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2180      	movs	r1, #128	; 0x80
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f001 fac0 	bl	80021c4 <HAL_GPIO_WritePin>
    }



    if (WET_NTC_raw > 3500){
 8000c44:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <main+0x138>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a18      	ldr	r2, [pc, #96]	; (8000cac <main+0x148>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d907      	bls.n	8000c5e <main+0xfa>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000c4e:	2390      	movs	r3, #144	; 0x90
 8000c50:	05db      	lsls	r3, r3, #23
 8000c52:	2201      	movs	r2, #1
 8000c54:	2120      	movs	r1, #32
 8000c56:	0018      	movs	r0, r3
 8000c58:	f001 fab4 	bl	80021c4 <HAL_GPIO_WritePin>
 8000c5c:	e7a3      	b.n	8000ba6 <main+0x42>
    }
    else if (WET_NTC_raw <= 3500  &&  WET_NTC_raw >= 3000){
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <main+0x138>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a12      	ldr	r2, [pc, #72]	; (8000cac <main+0x148>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d804      	bhi.n	8000c72 <main+0x10e>
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <main+0x138>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <main+0x14c>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d80b      	bhi.n	8000c8a <main+0x126>
    	;
    }
    else if(WET_NTC_raw < 3000){
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <main+0x138>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <main+0x14c>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d894      	bhi.n	8000ba6 <main+0x42>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c7c:	2390      	movs	r3, #144	; 0x90
 8000c7e:	05db      	lsls	r3, r3, #23
 8000c80:	2200      	movs	r2, #0
 8000c82:	2120      	movs	r1, #32
 8000c84:	0018      	movs	r0, r3
 8000c86:	f001 fa9d 	bl	80021c4 <HAL_GPIO_WritePin>
	uart_buf_len = sprintf(uart_buf, "UART Test 2\r\n");
 8000c8a:	e78c      	b.n	8000ba6 <main+0x42>
 8000c8c:	08003d18 	.word	0x08003d18
 8000c90:	200000a0 	.word	0x200000a0
 8000c94:	08003d24 	.word	0x08003d24
 8000c98:	20000130 	.word	0x20000130
 8000c9c:	2000012c 	.word	0x2000012c
 8000ca0:	08003d34 	.word	0x08003d34
 8000ca4:	20000098 	.word	0x20000098
 8000ca8:	41600000 	.word	0x41600000
 8000cac:	00000dac 	.word	0x00000dac
 8000cb0:	00000bb7 	.word	0x00000bb7

08000cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b097      	sub	sp, #92	; 0x5c
 8000cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cba:	2428      	movs	r4, #40	; 0x28
 8000cbc:	193b      	adds	r3, r7, r4
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	2330      	movs	r3, #48	; 0x30
 8000cc2:	001a      	movs	r2, r3
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	f002 fc0b 	bl	80034e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cca:	2318      	movs	r3, #24
 8000ccc:	18fb      	adds	r3, r7, r3
 8000cce:	0018      	movs	r0, r3
 8000cd0:	2310      	movs	r3, #16
 8000cd2:	001a      	movs	r2, r3
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	f002 fc03 	bl	80034e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	0018      	movs	r0, r3
 8000cde:	2314      	movs	r3, #20
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	f002 fbfc 	bl	80034e0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000ce8:	0021      	movs	r1, r4
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	2212      	movs	r2, #18
 8000cee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	2210      	movs	r2, #16
 8000d00:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	2210      	movs	r2, #16
 8000d06:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	0018      	movs	r0, r3
 8000d12:	f001 fa75 	bl	8002200 <HAL_RCC_OscConfig>
 8000d16:	1e03      	subs	r3, r0, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000d1a:	f000 f905 	bl	8000f28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1e:	2118      	movs	r1, #24
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	2207      	movs	r2, #7
 8000d24:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	2200      	movs	r2, #0
 8000d2a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	2290      	movs	r2, #144	; 0x90
 8000d30:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	2200      	movs	r2, #0
 8000d36:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f001 fd7d 	bl	800283c <HAL_RCC_ClockConfig>
 8000d42:	1e03      	subs	r3, r0, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d46:	f000 f8ef 	bl	8000f28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f001 fec3 	bl	8002ae4 <HAL_RCCEx_PeriphCLKConfig>
 8000d5e:	1e03      	subs	r3, r0, #0
 8000d60:	d001      	beq.n	8000d66 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000d62:	f000 f8e1 	bl	8000f28 <Error_Handler>
  }
}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	b017      	add	sp, #92	; 0x5c
 8000d6c:	bd90      	pop	{r4, r7, pc}
	...

08000d70 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	0018      	movs	r0, r3
 8000d7a:	230c      	movs	r3, #12
 8000d7c:	001a      	movs	r2, r3
 8000d7e:	2100      	movs	r1, #0
 8000d80:	f002 fbae 	bl	80034e0 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000d84:	4b32      	ldr	r3, [pc, #200]	; (8000e50 <MX_ADC_Init+0xe0>)
 8000d86:	4a33      	ldr	r2, [pc, #204]	; (8000e54 <MX_ADC_Init+0xe4>)
 8000d88:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d8a:	4b31      	ldr	r3, [pc, #196]	; (8000e50 <MX_ADC_Init+0xe0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000d90:	4b2f      	ldr	r3, [pc, #188]	; (8000e50 <MX_ADC_Init+0xe0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d96:	4b2e      	ldr	r3, [pc, #184]	; (8000e50 <MX_ADC_Init+0xe0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000d9c:	4b2c      	ldr	r3, [pc, #176]	; (8000e50 <MX_ADC_Init+0xe0>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000da2:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <MX_ADC_Init+0xe0>)
 8000da4:	2204      	movs	r2, #4
 8000da6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000da8:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <MX_ADC_Init+0xe0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000dae:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <MX_ADC_Init+0xe0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000db4:	4b26      	ldr	r3, [pc, #152]	; (8000e50 <MX_ADC_Init+0xe0>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000dba:	4b25      	ldr	r3, [pc, #148]	; (8000e50 <MX_ADC_Init+0xe0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dc0:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <MX_ADC_Init+0xe0>)
 8000dc2:	22c2      	movs	r2, #194	; 0xc2
 8000dc4:	32ff      	adds	r2, #255	; 0xff
 8000dc6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dc8:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <MX_ADC_Init+0xe0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000dce:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <MX_ADC_Init+0xe0>)
 8000dd0:	2224      	movs	r2, #36	; 0x24
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dd6:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <MX_ADC_Init+0xe0>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000ddc:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <MX_ADC_Init+0xe0>)
 8000dde:	0018      	movs	r0, r3
 8000de0:	f000 fa74 	bl	80012cc <HAL_ADC_Init>
 8000de4:	1e03      	subs	r3, r0, #0
 8000de6:	d001      	beq.n	8000dec <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000de8:	f000 f89e 	bl	8000f28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2280      	movs	r2, #128	; 0x80
 8000df6:	0152      	lsls	r2, r2, #5
 8000df8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2207      	movs	r2, #7
 8000dfe:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e00:	1d3a      	adds	r2, r7, #4
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <MX_ADC_Init+0xe0>)
 8000e04:	0011      	movs	r1, r2
 8000e06:	0018      	movs	r0, r3
 8000e08:	f000 fcd8 	bl	80017bc <HAL_ADC_ConfigChannel>
 8000e0c:	1e03      	subs	r3, r0, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000e10:	f000 f88a 	bl	8000f28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2201      	movs	r2, #1
 8000e18:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e1a:	1d3a      	adds	r2, r7, #4
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <MX_ADC_Init+0xe0>)
 8000e1e:	0011      	movs	r1, r2
 8000e20:	0018      	movs	r0, r3
 8000e22:	f000 fccb 	bl	80017bc <HAL_ADC_ConfigChannel>
 8000e26:	1e03      	subs	r3, r0, #0
 8000e28:	d001      	beq.n	8000e2e <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000e2a:	f000 f87d 	bl	8000f28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2202      	movs	r2, #2
 8000e32:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e34:	1d3a      	adds	r2, r7, #4
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <MX_ADC_Init+0xe0>)
 8000e38:	0011      	movs	r1, r2
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f000 fcbe 	bl	80017bc <HAL_ADC_ConfigChannel>
 8000e40:	1e03      	subs	r3, r0, #0
 8000e42:	d001      	beq.n	8000e48 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8000e44:	f000 f870 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b004      	add	sp, #16
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000130 	.word	0x20000130
 8000e54:	40012400 	.word	0x40012400

08000e58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_USART1_UART_Init+0x58>)
 8000e5e:	4a15      	ldr	r2, [pc, #84]	; (8000eb4 <MX_USART1_UART_Init+0x5c>)
 8000e60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <MX_USART1_UART_Init+0x58>)
 8000e64:	2296      	movs	r2, #150	; 0x96
 8000e66:	0192      	lsls	r2, r2, #6
 8000e68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_USART1_UART_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_USART1_UART_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_USART1_UART_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_USART1_UART_Init+0x58>)
 8000e7e:	220c      	movs	r2, #12
 8000e80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_USART1_UART_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_USART1_UART_Init+0x58>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <MX_USART1_UART_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_USART1_UART_Init+0x58>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e9a:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <MX_USART1_UART_Init+0x58>)
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f001 feff 	bl	8002ca0 <HAL_UART_Init>
 8000ea2:	1e03      	subs	r3, r0, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ea6:	f000 f83f 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200000a0 	.word	0x200000a0
 8000eb4:	40013800 	.word	0x40013800

08000eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	2314      	movs	r3, #20
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	f002 fb0a 	bl	80034e0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <MX_GPIO_Init+0x6c>)
 8000ece:	695a      	ldr	r2, [r3, #20]
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <MX_GPIO_Init+0x6c>)
 8000ed2:	2180      	movs	r1, #128	; 0x80
 8000ed4:	0289      	lsls	r1, r1, #10
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	615a      	str	r2, [r3, #20]
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <MX_GPIO_Init+0x6c>)
 8000edc:	695a      	ldr	r2, [r3, #20]
 8000ede:	2380      	movs	r3, #128	; 0x80
 8000ee0:	029b      	lsls	r3, r3, #10
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	603b      	str	r3, [r7, #0]
 8000ee6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8000ee8:	2390      	movs	r3, #144	; 0x90
 8000eea:	05db      	lsls	r3, r3, #23
 8000eec:	2200      	movs	r2, #0
 8000eee:	21f8      	movs	r1, #248	; 0xf8
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f001 f967 	bl	80021c4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA3 PA4 PA5 PA6 
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	22f8      	movs	r2, #248	; 0xf8
 8000efa:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2201      	movs	r2, #1
 8000f00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0e:	1d3a      	adds	r2, r7, #4
 8000f10:	2390      	movs	r3, #144	; 0x90
 8000f12:	05db      	lsls	r3, r3, #23
 8000f14:	0011      	movs	r1, r2
 8000f16:	0018      	movs	r0, r3
 8000f18:	f000 ffe4 	bl	8001ee4 <HAL_GPIO_Init>

}
 8000f1c:	46c0      	nop			; (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b006      	add	sp, #24
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40021000 	.word	0x40021000

08000f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <HAL_MspInit+0x44>)
 8000f3c:	699a      	ldr	r2, [r3, #24]
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_MspInit+0x44>)
 8000f40:	2101      	movs	r1, #1
 8000f42:	430a      	orrs	r2, r1
 8000f44:	619a      	str	r2, [r3, #24]
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <HAL_MspInit+0x44>)
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_MspInit+0x44>)
 8000f54:	69da      	ldr	r2, [r3, #28]
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_MspInit+0x44>)
 8000f58:	2180      	movs	r1, #128	; 0x80
 8000f5a:	0549      	lsls	r1, r1, #21
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	61da      	str	r2, [r3, #28]
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <HAL_MspInit+0x44>)
 8000f62:	69da      	ldr	r2, [r3, #28]
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	055b      	lsls	r3, r3, #21
 8000f68:	4013      	ands	r3, r2
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b002      	add	sp, #8
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	40021000 	.word	0x40021000

08000f7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	2314      	movs	r3, #20
 8000f86:	18fb      	adds	r3, r7, r3
 8000f88:	0018      	movs	r0, r3
 8000f8a:	2314      	movs	r3, #20
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	2100      	movs	r1, #0
 8000f90:	f002 faa6 	bl	80034e0 <memset>
  if(hadc->Instance==ADC1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a19      	ldr	r2, [pc, #100]	; (8001000 <HAL_ADC_MspInit+0x84>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d12c      	bne.n	8000ff8 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <HAL_ADC_MspInit+0x88>)
 8000fa0:	699a      	ldr	r2, [r3, #24]
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <HAL_ADC_MspInit+0x88>)
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	0089      	lsls	r1, r1, #2
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	619a      	str	r2, [r3, #24]
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_ADC_MspInit+0x88>)
 8000fae:	699a      	ldr	r2, [r3, #24]
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_ADC_MspInit+0x88>)
 8000fbc:	695a      	ldr	r2, [r3, #20]
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_ADC_MspInit+0x88>)
 8000fc0:	2180      	movs	r1, #128	; 0x80
 8000fc2:	0289      	lsls	r1, r1, #10
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	615a      	str	r2, [r3, #20]
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_ADC_MspInit+0x88>)
 8000fca:	695a      	ldr	r2, [r3, #20]
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	029b      	lsls	r3, r3, #10
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000fd6:	2114      	movs	r1, #20
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	2207      	movs	r2, #7
 8000fdc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	187b      	adds	r3, r7, r1
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	187a      	adds	r2, r7, r1
 8000fec:	2390      	movs	r3, #144	; 0x90
 8000fee:	05db      	lsls	r3, r3, #23
 8000ff0:	0011      	movs	r1, r2
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f000 ff76 	bl	8001ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b00a      	add	sp, #40	; 0x28
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40012400 	.word	0x40012400
 8001004:	40021000 	.word	0x40021000

08001008 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	2314      	movs	r3, #20
 8001012:	18fb      	adds	r3, r7, r3
 8001014:	0018      	movs	r0, r3
 8001016:	2314      	movs	r3, #20
 8001018:	001a      	movs	r2, r3
 800101a:	2100      	movs	r1, #0
 800101c:	f002 fa60 	bl	80034e0 <memset>
  if(huart->Instance==USART1)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a1d      	ldr	r2, [pc, #116]	; (800109c <HAL_UART_MspInit+0x94>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d133      	bne.n	8001092 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <HAL_UART_MspInit+0x98>)
 800102c:	699a      	ldr	r2, [r3, #24]
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <HAL_UART_MspInit+0x98>)
 8001030:	2180      	movs	r1, #128	; 0x80
 8001032:	01c9      	lsls	r1, r1, #7
 8001034:	430a      	orrs	r2, r1
 8001036:	619a      	str	r2, [r3, #24]
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <HAL_UART_MspInit+0x98>)
 800103a:	699a      	ldr	r2, [r3, #24]
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	01db      	lsls	r3, r3, #7
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <HAL_UART_MspInit+0x98>)
 8001048:	695a      	ldr	r2, [r3, #20]
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_UART_MspInit+0x98>)
 800104c:	2180      	movs	r1, #128	; 0x80
 800104e:	0289      	lsls	r1, r1, #10
 8001050:	430a      	orrs	r2, r1
 8001052:	615a      	str	r2, [r3, #20]
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_UART_MspInit+0x98>)
 8001056:	695a      	ldr	r2, [r3, #20]
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	029b      	lsls	r3, r3, #10
 800105c:	4013      	ands	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001062:	2114      	movs	r1, #20
 8001064:	187b      	adds	r3, r7, r1
 8001066:	22c0      	movs	r2, #192	; 0xc0
 8001068:	00d2      	lsls	r2, r2, #3
 800106a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	187b      	adds	r3, r7, r1
 800106e:	2202      	movs	r2, #2
 8001070:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	187b      	adds	r3, r7, r1
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001078:	187b      	adds	r3, r7, r1
 800107a:	2203      	movs	r2, #3
 800107c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800107e:	187b      	adds	r3, r7, r1
 8001080:	2201      	movs	r2, #1
 8001082:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	187a      	adds	r2, r7, r1
 8001086:	2390      	movs	r3, #144	; 0x90
 8001088:	05db      	lsls	r3, r3, #23
 800108a:	0011      	movs	r1, r2
 800108c:	0018      	movs	r0, r3
 800108e:	f000 ff29 	bl	8001ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	46bd      	mov	sp, r7
 8001096:	b00a      	add	sp, #40	; 0x28
 8001098:	bd80      	pop	{r7, pc}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	40013800 	.word	0x40013800
 80010a0:	40021000 	.word	0x40021000

080010a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010a8:	46c0      	nop			; (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <HardFault_Handler+0x4>

080010b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010cc:	f000 f8c0 	bl	8001250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d0:	46c0      	nop			; (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <_sbrk+0x50>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <_sbrk+0x16>
		heap_end = &end;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <_sbrk+0x50>)
 80010ea:	4a10      	ldr	r2, [pc, #64]	; (800112c <_sbrk+0x54>)
 80010ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <_sbrk+0x50>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <_sbrk+0x50>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	18d3      	adds	r3, r2, r3
 80010fc:	466a      	mov	r2, sp
 80010fe:	4293      	cmp	r3, r2
 8001100:	d907      	bls.n	8001112 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001102:	f002 f9c3 	bl	800348c <__errno>
 8001106:	0003      	movs	r3, r0
 8001108:	220c      	movs	r2, #12
 800110a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800110c:	2301      	movs	r3, #1
 800110e:	425b      	negs	r3, r3
 8001110:	e006      	b.n	8001120 <_sbrk+0x48>
	}

	heap_end += incr;
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <_sbrk+0x50>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	18d2      	adds	r2, r2, r3
 800111a:	4b03      	ldr	r3, [pc, #12]	; (8001128 <_sbrk+0x50>)
 800111c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	0018      	movs	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	b004      	add	sp, #16
 8001126:	bd80      	pop	{r7, pc}
 8001128:	2000008c 	.word	0x2000008c
 800112c:	20000178 	.word	0x20000178

08001130 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800113c:	4813      	ldr	r0, [pc, #76]	; (800118c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800113e:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001140:	4813      	ldr	r0, [pc, #76]	; (8001190 <LoopForever+0x6>)
    LDR R1, [R0]
 8001142:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001144:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001146:	4a13      	ldr	r2, [pc, #76]	; (8001194 <LoopForever+0xa>)
    CMP R1, R2
 8001148:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800114a:	d105      	bne.n	8001158 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800114c:	4812      	ldr	r0, [pc, #72]	; (8001198 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800114e:	4913      	ldr	r1, [pc, #76]	; (800119c <LoopForever+0x12>)
    STR R1, [R0]
 8001150:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001152:	4813      	ldr	r0, [pc, #76]	; (80011a0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001154:	4913      	ldr	r1, [pc, #76]	; (80011a4 <LoopForever+0x1a>)
    STR R1, [R0]
 8001156:	6001      	str	r1, [r0, #0]

08001158 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001158:	4813      	ldr	r0, [pc, #76]	; (80011a8 <LoopForever+0x1e>)
  ldr r1, =_edata
 800115a:	4914      	ldr	r1, [pc, #80]	; (80011ac <LoopForever+0x22>)
  ldr r2, =_sidata
 800115c:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <LoopForever+0x26>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001160:	e002      	b.n	8001168 <LoopCopyDataInit>

08001162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001166:	3304      	adds	r3, #4

08001168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800116c:	d3f9      	bcc.n	8001162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116e:	4a11      	ldr	r2, [pc, #68]	; (80011b4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001170:	4c11      	ldr	r4, [pc, #68]	; (80011b8 <LoopForever+0x2e>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001174:	e001      	b.n	800117a <LoopFillZerobss>

08001176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001178:	3204      	adds	r2, #4

0800117a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800117c:	d3fb      	bcc.n	8001176 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800117e:	f7ff ffd7 	bl	8001130 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001182:	f002 f989 	bl	8003498 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001186:	f7ff fced 	bl	8000b64 <main>

0800118a <LoopForever>:

LoopForever:
    b LoopForever
 800118a:	e7fe      	b.n	800118a <LoopForever>
  ldr   r0, =_estack
 800118c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001190:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001194:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001198:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 800119c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80011a0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80011a4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011b0:	08003dec 	.word	0x08003dec
  ldr r2, =_sbss
 80011b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011b8:	20000178 	.word	0x20000178

080011bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC1_IRQHandler>
	...

080011c0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <HAL_Init+0x24>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_Init+0x24>)
 80011ca:	2110      	movs	r1, #16
 80011cc:	430a      	orrs	r2, r1
 80011ce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80011d0:	2000      	movs	r0, #0
 80011d2:	f000 f809 	bl	80011e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d6:	f7ff fead 	bl	8000f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	0018      	movs	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	40022000 	.word	0x40022000

080011e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <HAL_InitTick+0x5c>)
 80011f2:	681c      	ldr	r4, [r3, #0]
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <HAL_InitTick+0x60>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	0019      	movs	r1, r3
 80011fa:	23fa      	movs	r3, #250	; 0xfa
 80011fc:	0098      	lsls	r0, r3, #2
 80011fe:	f7fe ff83 	bl	8000108 <__udivsi3>
 8001202:	0003      	movs	r3, r0
 8001204:	0019      	movs	r1, r3
 8001206:	0020      	movs	r0, r4
 8001208:	f7fe ff7e 	bl	8000108 <__udivsi3>
 800120c:	0003      	movs	r3, r0
 800120e:	0018      	movs	r0, r3
 8001210:	f000 fe5b 	bl	8001eca <HAL_SYSTICK_Config>
 8001214:	1e03      	subs	r3, r0, #0
 8001216:	d001      	beq.n	800121c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e00f      	b.n	800123c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b03      	cmp	r3, #3
 8001220:	d80b      	bhi.n	800123a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	2301      	movs	r3, #1
 8001226:	425b      	negs	r3, r3
 8001228:	2200      	movs	r2, #0
 800122a:	0018      	movs	r0, r3
 800122c:	f000 fe38 	bl	8001ea0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_InitTick+0x64>)
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e000      	b.n	800123c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
}
 800123c:	0018      	movs	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	b003      	add	sp, #12
 8001242:	bd90      	pop	{r4, r7, pc}
 8001244:	20000000 	.word	0x20000000
 8001248:	20000008 	.word	0x20000008
 800124c:	20000004 	.word	0x20000004

08001250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <HAL_IncTick+0x1c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	001a      	movs	r2, r3
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <HAL_IncTick+0x20>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	18d2      	adds	r2, r2, r3
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <HAL_IncTick+0x20>)
 8001262:	601a      	str	r2, [r3, #0]
}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	20000008 	.word	0x20000008
 8001270:	20000170 	.word	0x20000170

08001274 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;
 8001278:	4b02      	ldr	r3, [pc, #8]	; (8001284 <HAL_GetTick+0x10>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	0018      	movs	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	20000170 	.word	0x20000170

08001288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001290:	f7ff fff0 	bl	8001274 <HAL_GetTick>
 8001294:	0003      	movs	r3, r0
 8001296:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	3301      	adds	r3, #1
 80012a0:	d005      	beq.n	80012ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <HAL_Delay+0x40>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	001a      	movs	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	189b      	adds	r3, r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	f7ff ffe0 	bl	8001274 <HAL_GetTick>
 80012b4:	0002      	movs	r2, r0
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d8f7      	bhi.n	80012b0 <HAL_Delay+0x28>
  {
  }
}
 80012c0:	46c0      	nop			; (mov r8, r8)
 80012c2:	46bd      	mov	sp, r7
 80012c4:	b004      	add	sp, #16
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000008 	.word	0x20000008

080012cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012d4:	230f      	movs	r3, #15
 80012d6:	18fb      	adds	r3, r7, r3
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e125      	b.n	8001536 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10a      	bne.n	8001308 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2234      	movs	r2, #52	; 0x34
 80012fc:	2100      	movs	r1, #0
 80012fe:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	0018      	movs	r0, r3
 8001304:	f7ff fe3a 	bl	8000f7c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800130c:	2210      	movs	r2, #16
 800130e:	4013      	ands	r3, r2
 8001310:	d000      	beq.n	8001314 <HAL_ADC_Init+0x48>
 8001312:	e103      	b.n	800151c <HAL_ADC_Init+0x250>
 8001314:	230f      	movs	r3, #15
 8001316:	18fb      	adds	r3, r7, r3
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d000      	beq.n	8001320 <HAL_ADC_Init+0x54>
 800131e:	e0fd      	b.n	800151c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2204      	movs	r2, #4
 8001328:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800132a:	d000      	beq.n	800132e <HAL_ADC_Init+0x62>
 800132c:	e0f6      	b.n	800151c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001332:	4a83      	ldr	r2, [pc, #524]	; (8001540 <HAL_ADC_Init+0x274>)
 8001334:	4013      	ands	r3, r2
 8001336:	2202      	movs	r2, #2
 8001338:	431a      	orrs	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2203      	movs	r2, #3
 8001346:	4013      	ands	r3, r2
 8001348:	2b01      	cmp	r3, #1
 800134a:	d112      	bne.n	8001372 <HAL_ADC_Init+0xa6>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2201      	movs	r2, #1
 8001354:	4013      	ands	r3, r2
 8001356:	2b01      	cmp	r3, #1
 8001358:	d009      	beq.n	800136e <HAL_ADC_Init+0xa2>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	401a      	ands	r2, r3
 8001366:	2380      	movs	r3, #128	; 0x80
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	429a      	cmp	r2, r3
 800136c:	d101      	bne.n	8001372 <HAL_ADC_Init+0xa6>
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <HAL_ADC_Init+0xa8>
 8001372:	2300      	movs	r3, #0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d116      	bne.n	80013a6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	2218      	movs	r2, #24
 8001380:	4393      	bics	r3, r2
 8001382:	0019      	movs	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	430a      	orrs	r2, r1
 800138e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	0899      	lsrs	r1, r3, #2
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68da      	ldr	r2, [r3, #12]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4964      	ldr	r1, [pc, #400]	; (8001544 <HAL_ADC_Init+0x278>)
 80013b2:	400a      	ands	r2, r1
 80013b4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	7e1b      	ldrb	r3, [r3, #24]
 80013ba:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	7e5b      	ldrb	r3, [r3, #25]
 80013c0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013c2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	7e9b      	ldrb	r3, [r3, #26]
 80013c8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80013ca:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d002      	beq.n	80013da <HAL_ADC_Init+0x10e>
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	015b      	lsls	r3, r3, #5
 80013d8:	e000      	b.n	80013dc <HAL_ADC_Init+0x110>
 80013da:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80013dc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80013e2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d101      	bne.n	80013f0 <HAL_ADC_Init+0x124>
 80013ec:	2304      	movs	r3, #4
 80013ee:	e000      	b.n	80013f2 <HAL_ADC_Init+0x126>
 80013f0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80013f2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2124      	movs	r1, #36	; 0x24
 80013f8:	5c5b      	ldrb	r3, [r3, r1]
 80013fa:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80013fc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	4313      	orrs	r3, r2
 8001402:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7edb      	ldrb	r3, [r3, #27]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d115      	bne.n	8001438 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7e9b      	ldrb	r3, [r3, #26]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d105      	bne.n	8001420 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	2280      	movs	r2, #128	; 0x80
 8001418:	0252      	lsls	r2, r2, #9
 800141a:	4313      	orrs	r3, r2
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	e00b      	b.n	8001438 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	2220      	movs	r2, #32
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001430:	2201      	movs	r2, #1
 8001432:	431a      	orrs	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69da      	ldr	r2, [r3, #28]
 800143c:	23c2      	movs	r3, #194	; 0xc2
 800143e:	33ff      	adds	r3, #255	; 0xff
 8001440:	429a      	cmp	r2, r3
 8001442:	d007      	beq.n	8001454 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800144c:	4313      	orrs	r3, r2
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	4313      	orrs	r3, r2
 8001452:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68d9      	ldr	r1, [r3, #12]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	430a      	orrs	r2, r1
 8001462:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	055b      	lsls	r3, r3, #21
 800146c:	429a      	cmp	r2, r3
 800146e:	d01b      	beq.n	80014a8 <HAL_ADC_Init+0x1dc>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001474:	2b01      	cmp	r3, #1
 8001476:	d017      	beq.n	80014a8 <HAL_ADC_Init+0x1dc>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	2b02      	cmp	r3, #2
 800147e:	d013      	beq.n	80014a8 <HAL_ADC_Init+0x1dc>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001484:	2b03      	cmp	r3, #3
 8001486:	d00f      	beq.n	80014a8 <HAL_ADC_Init+0x1dc>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148c:	2b04      	cmp	r3, #4
 800148e:	d00b      	beq.n	80014a8 <HAL_ADC_Init+0x1dc>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001494:	2b05      	cmp	r3, #5
 8001496:	d007      	beq.n	80014a8 <HAL_ADC_Init+0x1dc>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149c:	2b06      	cmp	r3, #6
 800149e:	d003      	beq.n	80014a8 <HAL_ADC_Init+0x1dc>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	2b07      	cmp	r3, #7
 80014a6:	d112      	bne.n	80014ce <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	695a      	ldr	r2, [r3, #20]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2107      	movs	r1, #7
 80014b4:	438a      	bics	r2, r1
 80014b6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6959      	ldr	r1, [r3, #20]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	2207      	movs	r2, #7
 80014c4:	401a      	ands	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4a1c      	ldr	r2, [pc, #112]	; (8001548 <HAL_ADC_Init+0x27c>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	68ba      	ldr	r2, [r7, #8]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d10b      	bne.n	80014f6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e8:	2203      	movs	r2, #3
 80014ea:	4393      	bics	r3, r2
 80014ec:	2201      	movs	r2, #1
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80014f4:	e01c      	b.n	8001530 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fa:	2212      	movs	r2, #18
 80014fc:	4393      	bics	r3, r2
 80014fe:	2210      	movs	r2, #16
 8001500:	431a      	orrs	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800150a:	2201      	movs	r2, #1
 800150c:	431a      	orrs	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001512:	230f      	movs	r3, #15
 8001514:	18fb      	adds	r3, r7, r3
 8001516:	2201      	movs	r2, #1
 8001518:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800151a:	e009      	b.n	8001530 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001520:	2210      	movs	r2, #16
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001528:	230f      	movs	r3, #15
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001530:	230f      	movs	r3, #15
 8001532:	18fb      	adds	r3, r7, r3
 8001534:	781b      	ldrb	r3, [r3, #0]
}
 8001536:	0018      	movs	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	b004      	add	sp, #16
 800153c:	bd80      	pop	{r7, pc}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	fffffefd 	.word	0xfffffefd
 8001544:	fffe0219 	.word	0xfffe0219
 8001548:	833fffe7 	.word	0x833fffe7

0800154c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001554:	230f      	movs	r3, #15
 8001556:	18fb      	adds	r3, r7, r3
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2204      	movs	r2, #4
 8001564:	4013      	ands	r3, r2
 8001566:	d138      	bne.n	80015da <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2234      	movs	r2, #52	; 0x34
 800156c:	5c9b      	ldrb	r3, [r3, r2]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d101      	bne.n	8001576 <HAL_ADC_Start+0x2a>
 8001572:	2302      	movs	r3, #2
 8001574:	e038      	b.n	80015e8 <HAL_ADC_Start+0x9c>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2234      	movs	r2, #52	; 0x34
 800157a:	2101      	movs	r1, #1
 800157c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	7e5b      	ldrb	r3, [r3, #25]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d007      	beq.n	8001596 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001586:	230f      	movs	r3, #15
 8001588:	18fc      	adds	r4, r7, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	0018      	movs	r0, r3
 800158e:	f000 fa0b 	bl	80019a8 <ADC_Enable>
 8001592:	0003      	movs	r3, r0
 8001594:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001596:	230f      	movs	r3, #15
 8001598:	18fb      	adds	r3, r7, r3
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d120      	bne.n	80015e2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a4:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <HAL_ADC_Start+0xa4>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	2280      	movs	r2, #128	; 0x80
 80015aa:	0052      	lsls	r2, r2, #1
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2234      	movs	r2, #52	; 0x34
 80015bc:	2100      	movs	r1, #0
 80015be:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	221c      	movs	r2, #28
 80015c6:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2104      	movs	r1, #4
 80015d4:	430a      	orrs	r2, r1
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	e003      	b.n	80015e2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015da:	230f      	movs	r3, #15
 80015dc:	18fb      	adds	r3, r7, r3
 80015de:	2202      	movs	r2, #2
 80015e0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015e2:	230f      	movs	r3, #15
 80015e4:	18fb      	adds	r3, r7, r3
 80015e6:	781b      	ldrb	r3, [r3, #0]
}
 80015e8:	0018      	movs	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b005      	add	sp, #20
 80015ee:	bd90      	pop	{r4, r7, pc}
 80015f0:	fffff0fe 	.word	0xfffff0fe

080015f4 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 80015f4:	b5b0      	push	{r4, r5, r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015fc:	230f      	movs	r3, #15
 80015fe:	18fb      	adds	r3, r7, r3
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2234      	movs	r2, #52	; 0x34
 8001608:	5c9b      	ldrb	r3, [r3, r2]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d101      	bne.n	8001612 <HAL_ADC_Stop+0x1e>
 800160e:	2302      	movs	r3, #2
 8001610:	e02a      	b.n	8001668 <HAL_ADC_Stop+0x74>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2234      	movs	r2, #52	; 0x34
 8001616:	2101      	movs	r1, #1
 8001618:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800161a:	250f      	movs	r5, #15
 800161c:	197c      	adds	r4, r7, r5
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	0018      	movs	r0, r3
 8001622:	f000 fab6 	bl	8001b92 <ADC_ConversionStop>
 8001626:	0003      	movs	r3, r0
 8001628:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800162a:	197b      	adds	r3, r7, r5
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d113      	bne.n	800165a <HAL_ADC_Stop+0x66>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001632:	250f      	movs	r5, #15
 8001634:	197c      	adds	r4, r7, r5
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	0018      	movs	r0, r3
 800163a:	f000 fa39 	bl	8001ab0 <ADC_Disable>
 800163e:	0003      	movs	r3, r0
 8001640:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001642:	197b      	adds	r3, r7, r5
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d107      	bne.n	800165a <HAL_ADC_Stop+0x66>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164e:	4a08      	ldr	r2, [pc, #32]	; (8001670 <HAL_ADC_Stop+0x7c>)
 8001650:	4013      	ands	r3, r2
 8001652:	2201      	movs	r2, #1
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2234      	movs	r2, #52	; 0x34
 800165e:	2100      	movs	r1, #0
 8001660:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001662:	230f      	movs	r3, #15
 8001664:	18fb      	adds	r3, r7, r3
 8001666:	781b      	ldrb	r3, [r3, #0]
}
 8001668:	0018      	movs	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	b004      	add	sp, #16
 800166e:	bdb0      	pop	{r4, r5, r7, pc}
 8001670:	fffffefe 	.word	0xfffffefe

08001674 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	2b08      	cmp	r3, #8
 8001684:	d102      	bne.n	800168c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001686:	2308      	movs	r3, #8
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	e014      	b.n	80016b6 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	2201      	movs	r2, #1
 8001694:	4013      	ands	r3, r2
 8001696:	2b01      	cmp	r3, #1
 8001698:	d10b      	bne.n	80016b2 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169e:	2220      	movs	r2, #32
 80016a0:	431a      	orrs	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2234      	movs	r2, #52	; 0x34
 80016aa:	2100      	movs	r1, #0
 80016ac:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e071      	b.n	8001796 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80016b2:	230c      	movs	r3, #12
 80016b4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80016b6:	f7ff fddd 	bl	8001274 <HAL_GetTick>
 80016ba:	0003      	movs	r3, r0
 80016bc:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80016be:	e01f      	b.n	8001700 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	3301      	adds	r3, #1
 80016c4:	d01c      	beq.n	8001700 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d007      	beq.n	80016dc <HAL_ADC_PollForConversion+0x68>
 80016cc:	f7ff fdd2 	bl	8001274 <HAL_GetTick>
 80016d0:	0002      	movs	r2, r0
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d211      	bcs.n	8001700 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	4013      	ands	r3, r2
 80016e6:	d10b      	bne.n	8001700 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ec:	2204      	movs	r2, #4
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2234      	movs	r2, #52	; 0x34
 80016f8:	2100      	movs	r1, #0
 80016fa:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e04a      	b.n	8001796 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	4013      	ands	r3, r2
 800170a:	d0d9      	beq.n	80016c0 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001710:	2280      	movs	r2, #128	; 0x80
 8001712:	0092      	lsls	r2, r2, #2
 8001714:	431a      	orrs	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	23c0      	movs	r3, #192	; 0xc0
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	4013      	ands	r3, r2
 8001726:	d12d      	bne.n	8001784 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800172c:	2b00      	cmp	r3, #0
 800172e:	d129      	bne.n	8001784 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2208      	movs	r2, #8
 8001738:	4013      	ands	r3, r2
 800173a:	2b08      	cmp	r3, #8
 800173c:	d122      	bne.n	8001784 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2204      	movs	r2, #4
 8001746:	4013      	ands	r3, r2
 8001748:	d110      	bne.n	800176c <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	210c      	movs	r1, #12
 8001756:	438a      	bics	r2, r1
 8001758:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800175e:	4a10      	ldr	r2, [pc, #64]	; (80017a0 <HAL_ADC_PollForConversion+0x12c>)
 8001760:	4013      	ands	r3, r2
 8001762:	2201      	movs	r2, #1
 8001764:	431a      	orrs	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	639a      	str	r2, [r3, #56]	; 0x38
 800176a:	e00b      	b.n	8001784 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001770:	2220      	movs	r2, #32
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800177c:	2201      	movs	r2, #1
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7e1b      	ldrb	r3, [r3, #24]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d103      	bne.n	8001794 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	220c      	movs	r2, #12
 8001792:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	0018      	movs	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	b004      	add	sp, #16
 800179c:	bd80      	pop	{r7, pc}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	fffffefe 	.word	0xfffffefe

080017a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80017b2:	0018      	movs	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b002      	add	sp, #8
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c6:	230f      	movs	r3, #15
 80017c8:	18fb      	adds	r3, r7, r3
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	055b      	lsls	r3, r3, #21
 80017da:	429a      	cmp	r2, r3
 80017dc:	d011      	beq.n	8001802 <HAL_ADC_ConfigChannel+0x46>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d00d      	beq.n	8001802 <HAL_ADC_ConfigChannel+0x46>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d009      	beq.n	8001802 <HAL_ADC_ConfigChannel+0x46>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d005      	beq.n	8001802 <HAL_ADC_ConfigChannel+0x46>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d001      	beq.n	8001802 <HAL_ADC_ConfigChannel+0x46>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2234      	movs	r2, #52	; 0x34
 8001806:	5c9b      	ldrb	r3, [r3, r2]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x54>
 800180c:	2302      	movs	r3, #2
 800180e:	e0bb      	b.n	8001988 <HAL_ADC_ConfigChannel+0x1cc>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2234      	movs	r2, #52	; 0x34
 8001814:	2101      	movs	r1, #1
 8001816:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2204      	movs	r2, #4
 8001820:	4013      	ands	r3, r2
 8001822:	d000      	beq.n	8001826 <HAL_ADC_ConfigChannel+0x6a>
 8001824:	e09f      	b.n	8001966 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4a59      	ldr	r2, [pc, #356]	; (8001990 <HAL_ADC_ConfigChannel+0x1d4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d100      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x76>
 8001830:	e077      	b.n	8001922 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2201      	movs	r2, #1
 800183e:	409a      	lsls	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	055b      	lsls	r3, r3, #21
 8001850:	429a      	cmp	r2, r3
 8001852:	d037      	beq.n	80018c4 <HAL_ADC_ConfigChannel+0x108>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001858:	2b01      	cmp	r3, #1
 800185a:	d033      	beq.n	80018c4 <HAL_ADC_ConfigChannel+0x108>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001860:	2b02      	cmp	r3, #2
 8001862:	d02f      	beq.n	80018c4 <HAL_ADC_ConfigChannel+0x108>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	2b03      	cmp	r3, #3
 800186a:	d02b      	beq.n	80018c4 <HAL_ADC_ConfigChannel+0x108>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001870:	2b04      	cmp	r3, #4
 8001872:	d027      	beq.n	80018c4 <HAL_ADC_ConfigChannel+0x108>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	2b05      	cmp	r3, #5
 800187a:	d023      	beq.n	80018c4 <HAL_ADC_ConfigChannel+0x108>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001880:	2b06      	cmp	r3, #6
 8001882:	d01f      	beq.n	80018c4 <HAL_ADC_ConfigChannel+0x108>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	2b07      	cmp	r3, #7
 800188a:	d01b      	beq.n	80018c4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	2107      	movs	r1, #7
 8001898:	400b      	ands	r3, r1
 800189a:	429a      	cmp	r2, r3
 800189c:	d012      	beq.n	80018c4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	695a      	ldr	r2, [r3, #20]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2107      	movs	r1, #7
 80018aa:	438a      	bics	r2, r1
 80018ac:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6959      	ldr	r1, [r3, #20]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2207      	movs	r2, #7
 80018ba:	401a      	ands	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b10      	cmp	r3, #16
 80018ca:	d003      	beq.n	80018d4 <HAL_ADC_ConfigChannel+0x118>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b11      	cmp	r3, #17
 80018d2:	d152      	bne.n	800197a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80018d4:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <HAL_ADC_ConfigChannel+0x1d8>)
 80018d6:	6819      	ldr	r1, [r3, #0]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b10      	cmp	r3, #16
 80018de:	d102      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x12a>
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	041b      	lsls	r3, r3, #16
 80018e4:	e001      	b.n	80018ea <HAL_ADC_ConfigChannel+0x12e>
 80018e6:	2380      	movs	r3, #128	; 0x80
 80018e8:	03db      	lsls	r3, r3, #15
 80018ea:	4a2a      	ldr	r2, [pc, #168]	; (8001994 <HAL_ADC_ConfigChannel+0x1d8>)
 80018ec:	430b      	orrs	r3, r1
 80018ee:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b10      	cmp	r3, #16
 80018f6:	d140      	bne.n	800197a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018f8:	4b27      	ldr	r3, [pc, #156]	; (8001998 <HAL_ADC_ConfigChannel+0x1dc>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4927      	ldr	r1, [pc, #156]	; (800199c <HAL_ADC_ConfigChannel+0x1e0>)
 80018fe:	0018      	movs	r0, r3
 8001900:	f7fe fc02 	bl	8000108 <__udivsi3>
 8001904:	0003      	movs	r3, r0
 8001906:	001a      	movs	r2, r3
 8001908:	0013      	movs	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	189b      	adds	r3, r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001912:	e002      	b.n	800191a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	3b01      	subs	r3, #1
 8001918:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f9      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x158>
 8001920:	e02b      	b.n	800197a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2101      	movs	r1, #1
 800192e:	4099      	lsls	r1, r3
 8001930:	000b      	movs	r3, r1
 8001932:	43d9      	mvns	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	400a      	ands	r2, r1
 800193a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b10      	cmp	r3, #16
 8001942:	d003      	beq.n	800194c <HAL_ADC_ConfigChannel+0x190>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b11      	cmp	r3, #17
 800194a:	d116      	bne.n	800197a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <HAL_ADC_ConfigChannel+0x1d8>)
 800194e:	6819      	ldr	r1, [r3, #0]
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b10      	cmp	r3, #16
 8001956:	d101      	bne.n	800195c <HAL_ADC_ConfigChannel+0x1a0>
 8001958:	4a11      	ldr	r2, [pc, #68]	; (80019a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800195a:	e000      	b.n	800195e <HAL_ADC_ConfigChannel+0x1a2>
 800195c:	4a11      	ldr	r2, [pc, #68]	; (80019a4 <HAL_ADC_ConfigChannel+0x1e8>)
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <HAL_ADC_ConfigChannel+0x1d8>)
 8001960:	400a      	ands	r2, r1
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	e009      	b.n	800197a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196a:	2220      	movs	r2, #32
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001972:	230f      	movs	r3, #15
 8001974:	18fb      	adds	r3, r7, r3
 8001976:	2201      	movs	r2, #1
 8001978:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2234      	movs	r2, #52	; 0x34
 800197e:	2100      	movs	r1, #0
 8001980:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001982:	230f      	movs	r3, #15
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	781b      	ldrb	r3, [r3, #0]
}
 8001988:	0018      	movs	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	b004      	add	sp, #16
 800198e:	bd80      	pop	{r7, pc}
 8001990:	00001001 	.word	0x00001001
 8001994:	40012708 	.word	0x40012708
 8001998:	20000000 	.word	0x20000000
 800199c:	000f4240 	.word	0x000f4240
 80019a0:	ff7fffff 	.word	0xff7fffff
 80019a4:	ffbfffff 	.word	0xffbfffff

080019a8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2203      	movs	r2, #3
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d112      	bne.n	80019ec <ADC_Enable+0x44>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2201      	movs	r2, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d009      	beq.n	80019e8 <ADC_Enable+0x40>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	401a      	ands	r2, r3
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	021b      	lsls	r3, r3, #8
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d101      	bne.n	80019ec <ADC_Enable+0x44>
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <ADC_Enable+0x46>
 80019ec:	2300      	movs	r3, #0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d152      	bne.n	8001a98 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4a2a      	ldr	r2, [pc, #168]	; (8001aa4 <ADC_Enable+0xfc>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	d00d      	beq.n	8001a1a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a02:	2210      	movs	r2, #16
 8001a04:	431a      	orrs	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0e:	2201      	movs	r2, #1
 8001a10:	431a      	orrs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e03f      	b.n	8001a9a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2101      	movs	r1, #1
 8001a26:	430a      	orrs	r2, r1
 8001a28:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a2a:	4b1f      	ldr	r3, [pc, #124]	; (8001aa8 <ADC_Enable+0x100>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	491f      	ldr	r1, [pc, #124]	; (8001aac <ADC_Enable+0x104>)
 8001a30:	0018      	movs	r0, r3
 8001a32:	f7fe fb69 	bl	8000108 <__udivsi3>
 8001a36:	0003      	movs	r3, r0
 8001a38:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a3a:	e002      	b.n	8001a42 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f9      	bne.n	8001a3c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a48:	f7ff fc14 	bl	8001274 <HAL_GetTick>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a50:	e01b      	b.n	8001a8a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a52:	f7ff fc0f 	bl	8001274 <HAL_GetTick>
 8001a56:	0002      	movs	r2, r0
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d914      	bls.n	8001a8a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2201      	movs	r2, #1
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d00d      	beq.n	8001a8a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a72:	2210      	movs	r2, #16
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7e:	2201      	movs	r2, #1
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e007      	b.n	8001a9a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2201      	movs	r2, #1
 8001a92:	4013      	ands	r3, r2
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d1dc      	bne.n	8001a52 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b004      	add	sp, #16
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	80000017 	.word	0x80000017
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	000f4240 	.word	0x000f4240

08001ab0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d112      	bne.n	8001af0 <ADC_Disable+0x40>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d009      	beq.n	8001aec <ADC_Disable+0x3c>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	021b      	lsls	r3, r3, #8
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	021b      	lsls	r3, r3, #8
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d101      	bne.n	8001af0 <ADC_Disable+0x40>
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <ADC_Disable+0x42>
 8001af0:	2300      	movs	r3, #0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d048      	beq.n	8001b88 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2205      	movs	r2, #5
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d110      	bne.n	8001b26 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2102      	movs	r1, #2
 8001b10:	430a      	orrs	r2, r1
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2203      	movs	r2, #3
 8001b1a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b1c:	f7ff fbaa 	bl	8001274 <HAL_GetTick>
 8001b20:	0003      	movs	r3, r0
 8001b22:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b24:	e029      	b.n	8001b7a <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2a:	2210      	movs	r2, #16
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b36:	2201      	movs	r2, #1
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e023      	b.n	8001b8a <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b42:	f7ff fb97 	bl	8001274 <HAL_GetTick>
 8001b46:	0002      	movs	r2, r0
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d914      	bls.n	8001b7a <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2201      	movs	r2, #1
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d10d      	bne.n	8001b7a <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b62:	2210      	movs	r2, #16
 8001b64:	431a      	orrs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6e:	2201      	movs	r2, #1
 8001b70:	431a      	orrs	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e007      	b.n	8001b8a <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2201      	movs	r2, #1
 8001b82:	4013      	ands	r3, r2
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d0dc      	beq.n	8001b42 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b004      	add	sp, #16
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2204      	movs	r2, #4
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d03a      	beq.n	8001c20 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2204      	movs	r2, #4
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d10d      	bne.n	8001bd4 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001bc2:	d107      	bne.n	8001bd4 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2110      	movs	r1, #16
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bd4:	f7ff fb4e 	bl	8001274 <HAL_GetTick>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001bdc:	e01a      	b.n	8001c14 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001bde:	f7ff fb49 	bl	8001274 <HAL_GetTick>
 8001be2:	0002      	movs	r2, r0
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d913      	bls.n	8001c14 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d00d      	beq.n	8001c14 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c08:	2201      	movs	r2, #1
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e006      	b.n	8001c22 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d1de      	bne.n	8001bde <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	0018      	movs	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b004      	add	sp, #16
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c34:	2317      	movs	r3, #23
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2234      	movs	r2, #52	; 0x34
 8001c48:	5c9b      	ldrb	r3, [r3, r2]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_ADCEx_Calibration_Start+0x26>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e08d      	b.n	8001d6e <HAL_ADCEx_Calibration_Start+0x142>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2234      	movs	r2, #52	; 0x34
 8001c56:	2101      	movs	r1, #1
 8001c58:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2203      	movs	r2, #3
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d112      	bne.n	8001c8e <HAL_ADCEx_Calibration_Start+0x62>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4013      	ands	r3, r2
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d009      	beq.n	8001c8a <HAL_ADCEx_Calibration_Start+0x5e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	021b      	lsls	r3, r3, #8
 8001c80:	401a      	ands	r2, r3
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d101      	bne.n	8001c8e <HAL_ADCEx_Calibration_Start+0x62>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <HAL_ADCEx_Calibration_Start+0x64>
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d15b      	bne.n	8001d4c <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c98:	4a37      	ldr	r2, [pc, #220]	; (8001d78 <HAL_ADCEx_Calibration_Start+0x14c>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	2203      	movs	r2, #3
 8001cac:	4013      	ands	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2103      	movs	r1, #3
 8001cbc:	438a      	bics	r2, r1
 8001cbe:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2180      	movs	r1, #128	; 0x80
 8001ccc:	0609      	lsls	r1, r1, #24
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001cd2:	f7ff facf 	bl	8001274 <HAL_GetTick>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001cda:	e01d      	b.n	8001d18 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001cdc:	f7ff faca 	bl	8001274 <HAL_GetTick>
 8001ce0:	0002      	movs	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d916      	bls.n	8001d18 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	0fdb      	lsrs	r3, r3, #31
 8001cf2:	07da      	lsls	r2, r3, #31
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	061b      	lsls	r3, r3, #24
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d10d      	bne.n	8001d18 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d00:	2212      	movs	r2, #18
 8001d02:	4393      	bics	r3, r2
 8001d04:	2210      	movs	r2, #16
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2234      	movs	r2, #52	; 0x34
 8001d10:	2100      	movs	r1, #0
 8001d12:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e02a      	b.n	8001d6e <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	0fdb      	lsrs	r3, r3, #31
 8001d20:	07da      	lsls	r2, r3, #31
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	061b      	lsls	r3, r3, #24
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d0d8      	beq.n	8001cdc <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68d9      	ldr	r1, [r3, #12]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3e:	2203      	movs	r2, #3
 8001d40:	4393      	bics	r3, r2
 8001d42:	2201      	movs	r2, #1
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	639a      	str	r2, [r3, #56]	; 0x38
 8001d4a:	e009      	b.n	8001d60 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d50:	2220      	movs	r2, #32
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001d58:	2317      	movs	r3, #23
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2234      	movs	r2, #52	; 0x34
 8001d64:	2100      	movs	r1, #0
 8001d66:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001d68:	2317      	movs	r3, #23
 8001d6a:	18fb      	adds	r3, r7, r3
 8001d6c:	781b      	ldrb	r3, [r3, #0]
}
 8001d6e:	0018      	movs	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b006      	add	sp, #24
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	fffffefd 	.word	0xfffffefd

08001d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	0002      	movs	r2, r0
 8001d84:	6039      	str	r1, [r7, #0]
 8001d86:	1dfb      	adds	r3, r7, #7
 8001d88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d8a:	1dfb      	adds	r3, r7, #7
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b7f      	cmp	r3, #127	; 0x7f
 8001d90:	d828      	bhi.n	8001de4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d92:	4a2f      	ldr	r2, [pc, #188]	; (8001e50 <__NVIC_SetPriority+0xd4>)
 8001d94:	1dfb      	adds	r3, r7, #7
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b25b      	sxtb	r3, r3
 8001d9a:	089b      	lsrs	r3, r3, #2
 8001d9c:	33c0      	adds	r3, #192	; 0xc0
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	589b      	ldr	r3, [r3, r2]
 8001da2:	1dfa      	adds	r2, r7, #7
 8001da4:	7812      	ldrb	r2, [r2, #0]
 8001da6:	0011      	movs	r1, r2
 8001da8:	2203      	movs	r2, #3
 8001daa:	400a      	ands	r2, r1
 8001dac:	00d2      	lsls	r2, r2, #3
 8001dae:	21ff      	movs	r1, #255	; 0xff
 8001db0:	4091      	lsls	r1, r2
 8001db2:	000a      	movs	r2, r1
 8001db4:	43d2      	mvns	r2, r2
 8001db6:	401a      	ands	r2, r3
 8001db8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	019b      	lsls	r3, r3, #6
 8001dbe:	22ff      	movs	r2, #255	; 0xff
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	1dfb      	adds	r3, r7, #7
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	2303      	movs	r3, #3
 8001dca:	4003      	ands	r3, r0
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dd0:	481f      	ldr	r0, [pc, #124]	; (8001e50 <__NVIC_SetPriority+0xd4>)
 8001dd2:	1dfb      	adds	r3, r7, #7
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	b25b      	sxtb	r3, r3
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	33c0      	adds	r3, #192	; 0xc0
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001de2:	e031      	b.n	8001e48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001de4:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <__NVIC_SetPriority+0xd8>)
 8001de6:	1dfb      	adds	r3, r7, #7
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	0019      	movs	r1, r3
 8001dec:	230f      	movs	r3, #15
 8001dee:	400b      	ands	r3, r1
 8001df0:	3b08      	subs	r3, #8
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	3306      	adds	r3, #6
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	18d3      	adds	r3, r2, r3
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	1dfa      	adds	r2, r7, #7
 8001e00:	7812      	ldrb	r2, [r2, #0]
 8001e02:	0011      	movs	r1, r2
 8001e04:	2203      	movs	r2, #3
 8001e06:	400a      	ands	r2, r1
 8001e08:	00d2      	lsls	r2, r2, #3
 8001e0a:	21ff      	movs	r1, #255	; 0xff
 8001e0c:	4091      	lsls	r1, r2
 8001e0e:	000a      	movs	r2, r1
 8001e10:	43d2      	mvns	r2, r2
 8001e12:	401a      	ands	r2, r3
 8001e14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	019b      	lsls	r3, r3, #6
 8001e1a:	22ff      	movs	r2, #255	; 0xff
 8001e1c:	401a      	ands	r2, r3
 8001e1e:	1dfb      	adds	r3, r7, #7
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	0018      	movs	r0, r3
 8001e24:	2303      	movs	r3, #3
 8001e26:	4003      	ands	r3, r0
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e2c:	4809      	ldr	r0, [pc, #36]	; (8001e54 <__NVIC_SetPriority+0xd8>)
 8001e2e:	1dfb      	adds	r3, r7, #7
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	001c      	movs	r4, r3
 8001e34:	230f      	movs	r3, #15
 8001e36:	4023      	ands	r3, r4
 8001e38:	3b08      	subs	r3, #8
 8001e3a:	089b      	lsrs	r3, r3, #2
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	3306      	adds	r3, #6
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	18c3      	adds	r3, r0, r3
 8001e44:	3304      	adds	r3, #4
 8001e46:	601a      	str	r2, [r3, #0]
}
 8001e48:	46c0      	nop			; (mov r8, r8)
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b003      	add	sp, #12
 8001e4e:	bd90      	pop	{r4, r7, pc}
 8001e50:	e000e100 	.word	0xe000e100
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	4a0c      	ldr	r2, [pc, #48]	; (8001e98 <SysTick_Config+0x40>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e010      	b.n	8001e90 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <SysTick_Config+0x44>)
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	3a01      	subs	r2, #1
 8001e74:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e76:	2301      	movs	r3, #1
 8001e78:	425b      	negs	r3, r3
 8001e7a:	2103      	movs	r1, #3
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f7ff ff7d 	bl	8001d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <SysTick_Config+0x44>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <SysTick_Config+0x44>)
 8001e8a:	2207      	movs	r2, #7
 8001e8c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	0018      	movs	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	b002      	add	sp, #8
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	00ffffff 	.word	0x00ffffff
 8001e9c:	e000e010 	.word	0xe000e010

08001ea0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	210f      	movs	r1, #15
 8001eac:	187b      	adds	r3, r7, r1
 8001eae:	1c02      	adds	r2, r0, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	187b      	adds	r3, r7, r1
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	b25b      	sxtb	r3, r3
 8001eba:	0011      	movs	r1, r2
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f7ff ff5d 	bl	8001d7c <__NVIC_SetPriority>
}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	b004      	add	sp, #16
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f7ff ffbf 	bl	8001e58 <SysTick_Config>
 8001eda:	0003      	movs	r3, r0
}
 8001edc:	0018      	movs	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b002      	add	sp, #8
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ef2:	e14f      	b.n	8002194 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2101      	movs	r1, #1
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4091      	lsls	r1, r2
 8001efe:	000a      	movs	r2, r1
 8001f00:	4013      	ands	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d100      	bne.n	8001f0c <HAL_GPIO_Init+0x28>
 8001f0a:	e140      	b.n	800218e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2203      	movs	r2, #3
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d005      	beq.n	8001f24 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d130      	bne.n	8001f86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	2203      	movs	r2, #3
 8001f30:	409a      	lsls	r2, r3
 8001f32:	0013      	movs	r3, r2
 8001f34:	43da      	mvns	r2, r3
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	409a      	lsls	r2, r3
 8001f46:	0013      	movs	r3, r2
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	0013      	movs	r3, r2
 8001f62:	43da      	mvns	r2, r3
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	091b      	lsrs	r3, r3, #4
 8001f70:	2201      	movs	r2, #1
 8001f72:	401a      	ands	r2, r3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	409a      	lsls	r2, r3
 8001f78:	0013      	movs	r3, r2
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d017      	beq.n	8001fc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	0013      	movs	r3, r2
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	0013      	movs	r3, r2
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d123      	bne.n	8002016 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	08da      	lsrs	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3208      	adds	r2, #8
 8001fd6:	0092      	lsls	r2, r2, #2
 8001fd8:	58d3      	ldr	r3, [r2, r3]
 8001fda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	2207      	movs	r2, #7
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	220f      	movs	r2, #15
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	0013      	movs	r3, r2
 8001fea:	43da      	mvns	r2, r3
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	691a      	ldr	r2, [r3, #16]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2107      	movs	r1, #7
 8001ffa:	400b      	ands	r3, r1
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	409a      	lsls	r2, r3
 8002000:	0013      	movs	r3, r2
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	08da      	lsrs	r2, r3, #3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3208      	adds	r2, #8
 8002010:	0092      	lsls	r2, r2, #2
 8002012:	6939      	ldr	r1, [r7, #16]
 8002014:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	2203      	movs	r2, #3
 8002022:	409a      	lsls	r2, r3
 8002024:	0013      	movs	r3, r2
 8002026:	43da      	mvns	r2, r3
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2203      	movs	r2, #3
 8002034:	401a      	ands	r2, r3
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	409a      	lsls	r2, r3
 800203c:	0013      	movs	r3, r2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	23c0      	movs	r3, #192	; 0xc0
 8002050:	029b      	lsls	r3, r3, #10
 8002052:	4013      	ands	r3, r2
 8002054:	d100      	bne.n	8002058 <HAL_GPIO_Init+0x174>
 8002056:	e09a      	b.n	800218e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002058:	4b54      	ldr	r3, [pc, #336]	; (80021ac <HAL_GPIO_Init+0x2c8>)
 800205a:	699a      	ldr	r2, [r3, #24]
 800205c:	4b53      	ldr	r3, [pc, #332]	; (80021ac <HAL_GPIO_Init+0x2c8>)
 800205e:	2101      	movs	r1, #1
 8002060:	430a      	orrs	r2, r1
 8002062:	619a      	str	r2, [r3, #24]
 8002064:	4b51      	ldr	r3, [pc, #324]	; (80021ac <HAL_GPIO_Init+0x2c8>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	2201      	movs	r2, #1
 800206a:	4013      	ands	r3, r2
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002070:	4a4f      	ldr	r2, [pc, #316]	; (80021b0 <HAL_GPIO_Init+0x2cc>)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	089b      	lsrs	r3, r3, #2
 8002076:	3302      	adds	r3, #2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	589b      	ldr	r3, [r3, r2]
 800207c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2203      	movs	r2, #3
 8002082:	4013      	ands	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	220f      	movs	r2, #15
 8002088:	409a      	lsls	r2, r3
 800208a:	0013      	movs	r3, r2
 800208c:	43da      	mvns	r2, r3
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	2390      	movs	r3, #144	; 0x90
 8002098:	05db      	lsls	r3, r3, #23
 800209a:	429a      	cmp	r2, r3
 800209c:	d013      	beq.n	80020c6 <HAL_GPIO_Init+0x1e2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a44      	ldr	r2, [pc, #272]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00d      	beq.n	80020c2 <HAL_GPIO_Init+0x1de>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a43      	ldr	r2, [pc, #268]	; (80021b8 <HAL_GPIO_Init+0x2d4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d007      	beq.n	80020be <HAL_GPIO_Init+0x1da>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a42      	ldr	r2, [pc, #264]	; (80021bc <HAL_GPIO_Init+0x2d8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d101      	bne.n	80020ba <HAL_GPIO_Init+0x1d6>
 80020b6:	2303      	movs	r3, #3
 80020b8:	e006      	b.n	80020c8 <HAL_GPIO_Init+0x1e4>
 80020ba:	2305      	movs	r3, #5
 80020bc:	e004      	b.n	80020c8 <HAL_GPIO_Init+0x1e4>
 80020be:	2302      	movs	r3, #2
 80020c0:	e002      	b.n	80020c8 <HAL_GPIO_Init+0x1e4>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <HAL_GPIO_Init+0x1e4>
 80020c6:	2300      	movs	r3, #0
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	2103      	movs	r1, #3
 80020cc:	400a      	ands	r2, r1
 80020ce:	0092      	lsls	r2, r2, #2
 80020d0:	4093      	lsls	r3, r2
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020d8:	4935      	ldr	r1, [pc, #212]	; (80021b0 <HAL_GPIO_Init+0x2cc>)
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	089b      	lsrs	r3, r3, #2
 80020de:	3302      	adds	r3, #2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020e6:	4b36      	ldr	r3, [pc, #216]	; (80021c0 <HAL_GPIO_Init+0x2dc>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	43da      	mvns	r2, r3
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	2380      	movs	r3, #128	; 0x80
 80020fc:	025b      	lsls	r3, r3, #9
 80020fe:	4013      	ands	r3, r2
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4313      	orrs	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800210a:	4b2d      	ldr	r3, [pc, #180]	; (80021c0 <HAL_GPIO_Init+0x2dc>)
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002110:	4b2b      	ldr	r3, [pc, #172]	; (80021c0 <HAL_GPIO_Init+0x2dc>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	43da      	mvns	r2, r3
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	029b      	lsls	r3, r3, #10
 8002128:	4013      	ands	r3, r2
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002134:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <HAL_GPIO_Init+0x2dc>)
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800213a:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <HAL_GPIO_Init+0x2dc>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	43da      	mvns	r2, r3
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	035b      	lsls	r3, r3, #13
 8002152:	4013      	ands	r3, r2
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <HAL_GPIO_Init+0x2dc>)
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002164:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <HAL_GPIO_Init+0x2dc>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	43da      	mvns	r2, r3
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4013      	ands	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	039b      	lsls	r3, r3, #14
 800217c:	4013      	ands	r3, r2
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002188:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <HAL_GPIO_Init+0x2dc>)
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	3301      	adds	r3, #1
 8002192:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	40da      	lsrs	r2, r3
 800219c:	1e13      	subs	r3, r2, #0
 800219e:	d000      	beq.n	80021a2 <HAL_GPIO_Init+0x2be>
 80021a0:	e6a8      	b.n	8001ef4 <HAL_GPIO_Init+0x10>
  } 
}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	46bd      	mov	sp, r7
 80021a6:	b006      	add	sp, #24
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40010000 	.word	0x40010000
 80021b4:	48000400 	.word	0x48000400
 80021b8:	48000800 	.word	0x48000800
 80021bc:	48000c00 	.word	0x48000c00
 80021c0:	40010400 	.word	0x40010400

080021c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	0008      	movs	r0, r1
 80021ce:	0011      	movs	r1, r2
 80021d0:	1cbb      	adds	r3, r7, #2
 80021d2:	1c02      	adds	r2, r0, #0
 80021d4:	801a      	strh	r2, [r3, #0]
 80021d6:	1c7b      	adds	r3, r7, #1
 80021d8:	1c0a      	adds	r2, r1, #0
 80021da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021dc:	1c7b      	adds	r3, r7, #1
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d004      	beq.n	80021ee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021e4:	1cbb      	adds	r3, r7, #2
 80021e6:	881a      	ldrh	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021ec:	e003      	b.n	80021f6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ee:	1cbb      	adds	r3, r7, #2
 80021f0:	881a      	ldrh	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b002      	add	sp, #8
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e305      	b.n	800281e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2201      	movs	r2, #1
 8002218:	4013      	ands	r3, r2
 800221a:	d100      	bne.n	800221e <HAL_RCC_OscConfig+0x1e>
 800221c:	e08d      	b.n	800233a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800221e:	4bc5      	ldr	r3, [pc, #788]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	220c      	movs	r2, #12
 8002224:	4013      	ands	r3, r2
 8002226:	2b04      	cmp	r3, #4
 8002228:	d00e      	beq.n	8002248 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800222a:	4bc2      	ldr	r3, [pc, #776]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	220c      	movs	r2, #12
 8002230:	4013      	ands	r3, r2
 8002232:	2b08      	cmp	r3, #8
 8002234:	d116      	bne.n	8002264 <HAL_RCC_OscConfig+0x64>
 8002236:	4bbf      	ldr	r3, [pc, #764]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	23c0      	movs	r3, #192	; 0xc0
 800223c:	025b      	lsls	r3, r3, #9
 800223e:	401a      	ands	r2, r3
 8002240:	2380      	movs	r3, #128	; 0x80
 8002242:	025b      	lsls	r3, r3, #9
 8002244:	429a      	cmp	r2, r3
 8002246:	d10d      	bne.n	8002264 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002248:	4bba      	ldr	r3, [pc, #744]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	029b      	lsls	r3, r3, #10
 8002250:	4013      	ands	r3, r2
 8002252:	d100      	bne.n	8002256 <HAL_RCC_OscConfig+0x56>
 8002254:	e070      	b.n	8002338 <HAL_RCC_OscConfig+0x138>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d000      	beq.n	8002260 <HAL_RCC_OscConfig+0x60>
 800225e:	e06b      	b.n	8002338 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e2dc      	b.n	800281e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d107      	bne.n	800227c <HAL_RCC_OscConfig+0x7c>
 800226c:	4bb1      	ldr	r3, [pc, #708]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4bb0      	ldr	r3, [pc, #704]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 8002272:	2180      	movs	r1, #128	; 0x80
 8002274:	0249      	lsls	r1, r1, #9
 8002276:	430a      	orrs	r2, r1
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	e02f      	b.n	80022dc <HAL_RCC_OscConfig+0xdc>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10c      	bne.n	800229e <HAL_RCC_OscConfig+0x9e>
 8002284:	4bab      	ldr	r3, [pc, #684]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4baa      	ldr	r3, [pc, #680]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 800228a:	49ab      	ldr	r1, [pc, #684]	; (8002538 <HAL_RCC_OscConfig+0x338>)
 800228c:	400a      	ands	r2, r1
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	4ba8      	ldr	r3, [pc, #672]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4ba7      	ldr	r3, [pc, #668]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 8002296:	49a9      	ldr	r1, [pc, #676]	; (800253c <HAL_RCC_OscConfig+0x33c>)
 8002298:	400a      	ands	r2, r1
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	e01e      	b.n	80022dc <HAL_RCC_OscConfig+0xdc>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b05      	cmp	r3, #5
 80022a4:	d10e      	bne.n	80022c4 <HAL_RCC_OscConfig+0xc4>
 80022a6:	4ba3      	ldr	r3, [pc, #652]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	4ba2      	ldr	r3, [pc, #648]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 80022ac:	2180      	movs	r1, #128	; 0x80
 80022ae:	02c9      	lsls	r1, r1, #11
 80022b0:	430a      	orrs	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	4b9f      	ldr	r3, [pc, #636]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b9e      	ldr	r3, [pc, #632]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 80022ba:	2180      	movs	r1, #128	; 0x80
 80022bc:	0249      	lsls	r1, r1, #9
 80022be:	430a      	orrs	r2, r1
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	e00b      	b.n	80022dc <HAL_RCC_OscConfig+0xdc>
 80022c4:	4b9b      	ldr	r3, [pc, #620]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b9a      	ldr	r3, [pc, #616]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 80022ca:	499b      	ldr	r1, [pc, #620]	; (8002538 <HAL_RCC_OscConfig+0x338>)
 80022cc:	400a      	ands	r2, r1
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	4b98      	ldr	r3, [pc, #608]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b97      	ldr	r3, [pc, #604]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 80022d6:	4999      	ldr	r1, [pc, #612]	; (800253c <HAL_RCC_OscConfig+0x33c>)
 80022d8:	400a      	ands	r2, r1
 80022da:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d014      	beq.n	800230e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7fe ffc6 	bl	8001274 <HAL_GetTick>
 80022e8:	0003      	movs	r3, r0
 80022ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ee:	f7fe ffc1 	bl	8001274 <HAL_GetTick>
 80022f2:	0002      	movs	r2, r0
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b64      	cmp	r3, #100	; 0x64
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e28e      	b.n	800281e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002300:	4b8c      	ldr	r3, [pc, #560]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	029b      	lsls	r3, r3, #10
 8002308:	4013      	ands	r3, r2
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0xee>
 800230c:	e015      	b.n	800233a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230e:	f7fe ffb1 	bl	8001274 <HAL_GetTick>
 8002312:	0003      	movs	r3, r0
 8002314:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002318:	f7fe ffac 	bl	8001274 <HAL_GetTick>
 800231c:	0002      	movs	r2, r0
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	; 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e279      	b.n	800281e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232a:	4b82      	ldr	r3, [pc, #520]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	029b      	lsls	r3, r3, #10
 8002332:	4013      	ands	r3, r2
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x118>
 8002336:	e000      	b.n	800233a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2202      	movs	r2, #2
 8002340:	4013      	ands	r3, r2
 8002342:	d100      	bne.n	8002346 <HAL_RCC_OscConfig+0x146>
 8002344:	e06c      	b.n	8002420 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002346:	4b7b      	ldr	r3, [pc, #492]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	220c      	movs	r2, #12
 800234c:	4013      	ands	r3, r2
 800234e:	d00e      	beq.n	800236e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002350:	4b78      	ldr	r3, [pc, #480]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	220c      	movs	r2, #12
 8002356:	4013      	ands	r3, r2
 8002358:	2b08      	cmp	r3, #8
 800235a:	d11f      	bne.n	800239c <HAL_RCC_OscConfig+0x19c>
 800235c:	4b75      	ldr	r3, [pc, #468]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	23c0      	movs	r3, #192	; 0xc0
 8002362:	025b      	lsls	r3, r3, #9
 8002364:	401a      	ands	r2, r3
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	021b      	lsls	r3, r3, #8
 800236a:	429a      	cmp	r2, r3
 800236c:	d116      	bne.n	800239c <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236e:	4b71      	ldr	r3, [pc, #452]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2202      	movs	r2, #2
 8002374:	4013      	ands	r3, r2
 8002376:	d005      	beq.n	8002384 <HAL_RCC_OscConfig+0x184>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d001      	beq.n	8002384 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e24c      	b.n	800281e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002384:	4b6b      	ldr	r3, [pc, #428]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	22f8      	movs	r2, #248	; 0xf8
 800238a:	4393      	bics	r3, r2
 800238c:	0019      	movs	r1, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	00da      	lsls	r2, r3, #3
 8002394:	4b67      	ldr	r3, [pc, #412]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 8002396:	430a      	orrs	r2, r1
 8002398:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239a:	e041      	b.n	8002420 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d024      	beq.n	80023ee <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a4:	4b63      	ldr	r3, [pc, #396]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b62      	ldr	r3, [pc, #392]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 80023aa:	2101      	movs	r1, #1
 80023ac:	430a      	orrs	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7fe ff60 	bl	8001274 <HAL_GetTick>
 80023b4:	0003      	movs	r3, r0
 80023b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ba:	f7fe ff5b 	bl	8001274 <HAL_GetTick>
 80023be:	0002      	movs	r2, r0
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e228      	b.n	800281e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023cc:	4b59      	ldr	r3, [pc, #356]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2202      	movs	r2, #2
 80023d2:	4013      	ands	r3, r2
 80023d4:	d0f1      	beq.n	80023ba <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d6:	4b57      	ldr	r3, [pc, #348]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	22f8      	movs	r2, #248	; 0xf8
 80023dc:	4393      	bics	r3, r2
 80023de:	0019      	movs	r1, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	00da      	lsls	r2, r3, #3
 80023e6:	4b53      	ldr	r3, [pc, #332]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 80023e8:	430a      	orrs	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	e018      	b.n	8002420 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ee:	4b51      	ldr	r3, [pc, #324]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	4b50      	ldr	r3, [pc, #320]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 80023f4:	2101      	movs	r1, #1
 80023f6:	438a      	bics	r2, r1
 80023f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fa:	f7fe ff3b 	bl	8001274 <HAL_GetTick>
 80023fe:	0003      	movs	r3, r0
 8002400:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002404:	f7fe ff36 	bl	8001274 <HAL_GetTick>
 8002408:	0002      	movs	r2, r0
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e203      	b.n	800281e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002416:	4b47      	ldr	r3, [pc, #284]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2202      	movs	r2, #2
 800241c:	4013      	ands	r3, r2
 800241e:	d1f1      	bne.n	8002404 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2208      	movs	r2, #8
 8002426:	4013      	ands	r3, r2
 8002428:	d036      	beq.n	8002498 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d019      	beq.n	8002466 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002432:	4b40      	ldr	r3, [pc, #256]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 8002434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002436:	4b3f      	ldr	r3, [pc, #252]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 8002438:	2101      	movs	r1, #1
 800243a:	430a      	orrs	r2, r1
 800243c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243e:	f7fe ff19 	bl	8001274 <HAL_GetTick>
 8002442:	0003      	movs	r3, r0
 8002444:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002448:	f7fe ff14 	bl	8001274 <HAL_GetTick>
 800244c:	0002      	movs	r2, r0
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e1e1      	b.n	800281e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800245a:	4b36      	ldr	r3, [pc, #216]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	2202      	movs	r2, #2
 8002460:	4013      	ands	r3, r2
 8002462:	d0f1      	beq.n	8002448 <HAL_RCC_OscConfig+0x248>
 8002464:	e018      	b.n	8002498 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002466:	4b33      	ldr	r3, [pc, #204]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 8002468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800246a:	4b32      	ldr	r3, [pc, #200]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 800246c:	2101      	movs	r1, #1
 800246e:	438a      	bics	r2, r1
 8002470:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002472:	f7fe feff 	bl	8001274 <HAL_GetTick>
 8002476:	0003      	movs	r3, r0
 8002478:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800247c:	f7fe fefa 	bl	8001274 <HAL_GetTick>
 8002480:	0002      	movs	r2, r0
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e1c7      	b.n	800281e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800248e:	4b29      	ldr	r3, [pc, #164]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	2202      	movs	r2, #2
 8002494:	4013      	ands	r3, r2
 8002496:	d1f1      	bne.n	800247c <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2204      	movs	r2, #4
 800249e:	4013      	ands	r3, r2
 80024a0:	d100      	bne.n	80024a4 <HAL_RCC_OscConfig+0x2a4>
 80024a2:	e0b5      	b.n	8002610 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a4:	231f      	movs	r3, #31
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ac:	4b21      	ldr	r3, [pc, #132]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 80024ae:	69da      	ldr	r2, [r3, #28]
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	055b      	lsls	r3, r3, #21
 80024b4:	4013      	ands	r3, r2
 80024b6:	d111      	bne.n	80024dc <HAL_RCC_OscConfig+0x2dc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b8:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 80024ba:	69da      	ldr	r2, [r3, #28]
 80024bc:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 80024be:	2180      	movs	r1, #128	; 0x80
 80024c0:	0549      	lsls	r1, r1, #21
 80024c2:	430a      	orrs	r2, r1
 80024c4:	61da      	str	r2, [r3, #28]
 80024c6:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 80024c8:	69da      	ldr	r2, [r3, #28]
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	055b      	lsls	r3, r3, #21
 80024ce:	4013      	ands	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80024d4:	231f      	movs	r3, #31
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	4b18      	ldr	r3, [pc, #96]	; (8002540 <HAL_RCC_OscConfig+0x340>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4013      	ands	r3, r2
 80024e6:	d11a      	bne.n	800251e <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024e8:	4b15      	ldr	r3, [pc, #84]	; (8002540 <HAL_RCC_OscConfig+0x340>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b14      	ldr	r3, [pc, #80]	; (8002540 <HAL_RCC_OscConfig+0x340>)
 80024ee:	2180      	movs	r1, #128	; 0x80
 80024f0:	0049      	lsls	r1, r1, #1
 80024f2:	430a      	orrs	r2, r1
 80024f4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f6:	f7fe febd 	bl	8001274 <HAL_GetTick>
 80024fa:	0003      	movs	r3, r0
 80024fc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x312>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002500:	f7fe feb8 	bl	8001274 <HAL_GetTick>
 8002504:	0002      	movs	r2, r0
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	; 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x312>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e185      	b.n	800281e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002512:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_RCC_OscConfig+0x340>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	4013      	ands	r3, r2
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0x300>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d10e      	bne.n	8002544 <HAL_RCC_OscConfig+0x344>
 8002526:	4b03      	ldr	r3, [pc, #12]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 8002528:	6a1a      	ldr	r2, [r3, #32]
 800252a:	4b02      	ldr	r3, [pc, #8]	; (8002534 <HAL_RCC_OscConfig+0x334>)
 800252c:	2101      	movs	r1, #1
 800252e:	430a      	orrs	r2, r1
 8002530:	621a      	str	r2, [r3, #32]
 8002532:	e035      	b.n	80025a0 <HAL_RCC_OscConfig+0x3a0>
 8002534:	40021000 	.word	0x40021000
 8002538:	fffeffff 	.word	0xfffeffff
 800253c:	fffbffff 	.word	0xfffbffff
 8002540:	40007000 	.word	0x40007000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10c      	bne.n	8002566 <HAL_RCC_OscConfig+0x366>
 800254c:	4bb6      	ldr	r3, [pc, #728]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 800254e:	6a1a      	ldr	r2, [r3, #32]
 8002550:	4bb5      	ldr	r3, [pc, #724]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 8002552:	2101      	movs	r1, #1
 8002554:	438a      	bics	r2, r1
 8002556:	621a      	str	r2, [r3, #32]
 8002558:	4bb3      	ldr	r3, [pc, #716]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 800255a:	6a1a      	ldr	r2, [r3, #32]
 800255c:	4bb2      	ldr	r3, [pc, #712]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 800255e:	2104      	movs	r1, #4
 8002560:	438a      	bics	r2, r1
 8002562:	621a      	str	r2, [r3, #32]
 8002564:	e01c      	b.n	80025a0 <HAL_RCC_OscConfig+0x3a0>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b05      	cmp	r3, #5
 800256c:	d10c      	bne.n	8002588 <HAL_RCC_OscConfig+0x388>
 800256e:	4bae      	ldr	r3, [pc, #696]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 8002570:	6a1a      	ldr	r2, [r3, #32]
 8002572:	4bad      	ldr	r3, [pc, #692]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 8002574:	2104      	movs	r1, #4
 8002576:	430a      	orrs	r2, r1
 8002578:	621a      	str	r2, [r3, #32]
 800257a:	4bab      	ldr	r3, [pc, #684]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 800257c:	6a1a      	ldr	r2, [r3, #32]
 800257e:	4baa      	ldr	r3, [pc, #680]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 8002580:	2101      	movs	r1, #1
 8002582:	430a      	orrs	r2, r1
 8002584:	621a      	str	r2, [r3, #32]
 8002586:	e00b      	b.n	80025a0 <HAL_RCC_OscConfig+0x3a0>
 8002588:	4ba7      	ldr	r3, [pc, #668]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 800258a:	6a1a      	ldr	r2, [r3, #32]
 800258c:	4ba6      	ldr	r3, [pc, #664]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 800258e:	2101      	movs	r1, #1
 8002590:	438a      	bics	r2, r1
 8002592:	621a      	str	r2, [r3, #32]
 8002594:	4ba4      	ldr	r3, [pc, #656]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 8002596:	6a1a      	ldr	r2, [r3, #32]
 8002598:	4ba3      	ldr	r3, [pc, #652]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 800259a:	2104      	movs	r1, #4
 800259c:	438a      	bics	r2, r1
 800259e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d014      	beq.n	80025d2 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a8:	f7fe fe64 	bl	8001274 <HAL_GetTick>
 80025ac:	0003      	movs	r3, r0
 80025ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b0:	e009      	b.n	80025c6 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b2:	f7fe fe5f 	bl	8001274 <HAL_GetTick>
 80025b6:	0002      	movs	r2, r0
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	4a9b      	ldr	r2, [pc, #620]	; (800282c <HAL_RCC_OscConfig+0x62c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e12b      	b.n	800281e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c6:	4b98      	ldr	r3, [pc, #608]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	2202      	movs	r2, #2
 80025cc:	4013      	ands	r3, r2
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x3b2>
 80025d0:	e013      	b.n	80025fa <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d2:	f7fe fe4f 	bl	8001274 <HAL_GetTick>
 80025d6:	0003      	movs	r3, r0
 80025d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025da:	e009      	b.n	80025f0 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025dc:	f7fe fe4a 	bl	8001274 <HAL_GetTick>
 80025e0:	0002      	movs	r2, r0
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	4a91      	ldr	r2, [pc, #580]	; (800282c <HAL_RCC_OscConfig+0x62c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e116      	b.n	800281e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f0:	4b8d      	ldr	r3, [pc, #564]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	2202      	movs	r2, #2
 80025f6:	4013      	ands	r3, r2
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025fa:	231f      	movs	r3, #31
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d105      	bne.n	8002610 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002604:	4b88      	ldr	r3, [pc, #544]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 8002606:	69da      	ldr	r2, [r3, #28]
 8002608:	4b87      	ldr	r3, [pc, #540]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 800260a:	4989      	ldr	r1, [pc, #548]	; (8002830 <HAL_RCC_OscConfig+0x630>)
 800260c:	400a      	ands	r2, r1
 800260e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2210      	movs	r2, #16
 8002616:	4013      	ands	r3, r2
 8002618:	d063      	beq.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d12a      	bne.n	8002678 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002622:	4b81      	ldr	r3, [pc, #516]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 8002624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002626:	4b80      	ldr	r3, [pc, #512]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 8002628:	2104      	movs	r1, #4
 800262a:	430a      	orrs	r2, r1
 800262c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800262e:	4b7e      	ldr	r3, [pc, #504]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 8002630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002632:	4b7d      	ldr	r3, [pc, #500]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 8002634:	2101      	movs	r1, #1
 8002636:	430a      	orrs	r2, r1
 8002638:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263a:	f7fe fe1b 	bl	8001274 <HAL_GetTick>
 800263e:	0003      	movs	r3, r0
 8002640:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002644:	f7fe fe16 	bl	8001274 <HAL_GetTick>
 8002648:	0002      	movs	r2, r0
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e0e3      	b.n	800281e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002656:	4b74      	ldr	r3, [pc, #464]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 8002658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265a:	2202      	movs	r2, #2
 800265c:	4013      	ands	r3, r2
 800265e:	d0f1      	beq.n	8002644 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002660:	4b71      	ldr	r3, [pc, #452]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 8002662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002664:	22f8      	movs	r2, #248	; 0xf8
 8002666:	4393      	bics	r3, r2
 8002668:	0019      	movs	r1, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	00da      	lsls	r2, r3, #3
 8002670:	4b6d      	ldr	r3, [pc, #436]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 8002672:	430a      	orrs	r2, r1
 8002674:	635a      	str	r2, [r3, #52]	; 0x34
 8002676:	e034      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	3305      	adds	r3, #5
 800267e:	d111      	bne.n	80026a4 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002680:	4b69      	ldr	r3, [pc, #420]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 8002682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002684:	4b68      	ldr	r3, [pc, #416]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 8002686:	2104      	movs	r1, #4
 8002688:	438a      	bics	r2, r1
 800268a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800268c:	4b66      	ldr	r3, [pc, #408]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 800268e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002690:	22f8      	movs	r2, #248	; 0xf8
 8002692:	4393      	bics	r3, r2
 8002694:	0019      	movs	r1, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	00da      	lsls	r2, r3, #3
 800269c:	4b62      	ldr	r3, [pc, #392]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 800269e:	430a      	orrs	r2, r1
 80026a0:	635a      	str	r2, [r3, #52]	; 0x34
 80026a2:	e01e      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80026a4:	4b60      	ldr	r3, [pc, #384]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 80026a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026a8:	4b5f      	ldr	r3, [pc, #380]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 80026aa:	2104      	movs	r1, #4
 80026ac:	430a      	orrs	r2, r1
 80026ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80026b0:	4b5d      	ldr	r3, [pc, #372]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 80026b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026b4:	4b5c      	ldr	r3, [pc, #368]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 80026b6:	2101      	movs	r1, #1
 80026b8:	438a      	bics	r2, r1
 80026ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026bc:	f7fe fdda 	bl	8001274 <HAL_GetTick>
 80026c0:	0003      	movs	r3, r0
 80026c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80026c6:	f7fe fdd5 	bl	8001274 <HAL_GetTick>
 80026ca:	0002      	movs	r2, r0
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e0a2      	b.n	800281e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80026d8:	4b53      	ldr	r3, [pc, #332]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 80026da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026dc:	2202      	movs	r2, #2
 80026de:	4013      	ands	r3, r2
 80026e0:	d1f1      	bne.n	80026c6 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d100      	bne.n	80026ec <HAL_RCC_OscConfig+0x4ec>
 80026ea:	e097      	b.n	800281c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ec:	4b4e      	ldr	r3, [pc, #312]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	220c      	movs	r2, #12
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d100      	bne.n	80026fa <HAL_RCC_OscConfig+0x4fa>
 80026f8:	e06b      	b.n	80027d2 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d14c      	bne.n	800279c <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002702:	4b49      	ldr	r3, [pc, #292]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	4b48      	ldr	r3, [pc, #288]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 8002708:	494a      	ldr	r1, [pc, #296]	; (8002834 <HAL_RCC_OscConfig+0x634>)
 800270a:	400a      	ands	r2, r1
 800270c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270e:	f7fe fdb1 	bl	8001274 <HAL_GetTick>
 8002712:	0003      	movs	r3, r0
 8002714:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002718:	f7fe fdac 	bl	8001274 <HAL_GetTick>
 800271c:	0002      	movs	r2, r0
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e079      	b.n	800281e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800272a:	4b3f      	ldr	r3, [pc, #252]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	2380      	movs	r3, #128	; 0x80
 8002730:	049b      	lsls	r3, r3, #18
 8002732:	4013      	ands	r3, r2
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002736:	4b3c      	ldr	r3, [pc, #240]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	220f      	movs	r2, #15
 800273c:	4393      	bics	r3, r2
 800273e:	0019      	movs	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002744:	4b38      	ldr	r3, [pc, #224]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 8002746:	430a      	orrs	r2, r1
 8002748:	62da      	str	r2, [r3, #44]	; 0x2c
 800274a:	4b37      	ldr	r3, [pc, #220]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	4a3a      	ldr	r2, [pc, #232]	; (8002838 <HAL_RCC_OscConfig+0x638>)
 8002750:	4013      	ands	r3, r2
 8002752:	0019      	movs	r1, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	431a      	orrs	r2, r3
 800275e:	4b32      	ldr	r3, [pc, #200]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 8002760:	430a      	orrs	r2, r1
 8002762:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002764:	4b30      	ldr	r3, [pc, #192]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b2f      	ldr	r3, [pc, #188]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 800276a:	2180      	movs	r1, #128	; 0x80
 800276c:	0449      	lsls	r1, r1, #17
 800276e:	430a      	orrs	r2, r1
 8002770:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002772:	f7fe fd7f 	bl	8001274 <HAL_GetTick>
 8002776:	0003      	movs	r3, r0
 8002778:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277c:	f7fe fd7a 	bl	8001274 <HAL_GetTick>
 8002780:	0002      	movs	r2, r0
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e047      	b.n	800281e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800278e:	4b26      	ldr	r3, [pc, #152]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	049b      	lsls	r3, r3, #18
 8002796:	4013      	ands	r3, r2
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0x57c>
 800279a:	e03f      	b.n	800281c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279c:	4b22      	ldr	r3, [pc, #136]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4b21      	ldr	r3, [pc, #132]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 80027a2:	4924      	ldr	r1, [pc, #144]	; (8002834 <HAL_RCC_OscConfig+0x634>)
 80027a4:	400a      	ands	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a8:	f7fe fd64 	bl	8001274 <HAL_GetTick>
 80027ac:	0003      	movs	r3, r0
 80027ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b2:	f7fe fd5f 	bl	8001274 <HAL_GetTick>
 80027b6:	0002      	movs	r2, r0
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e02c      	b.n	800281e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c4:	4b18      	ldr	r3, [pc, #96]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	2380      	movs	r3, #128	; 0x80
 80027ca:	049b      	lsls	r3, r3, #18
 80027cc:	4013      	ands	r3, r2
 80027ce:	d1f0      	bne.n	80027b2 <HAL_RCC_OscConfig+0x5b2>
 80027d0:	e024      	b.n	800281c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e01f      	b.n	800281e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80027de:	4b12      	ldr	r3, [pc, #72]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80027e4:	4b10      	ldr	r3, [pc, #64]	; (8002828 <HAL_RCC_OscConfig+0x628>)
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	23c0      	movs	r3, #192	; 0xc0
 80027ee:	025b      	lsls	r3, r3, #9
 80027f0:	401a      	ands	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d10e      	bne.n	8002818 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	220f      	movs	r2, #15
 80027fe:	401a      	ands	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002804:	429a      	cmp	r2, r3
 8002806:	d107      	bne.n	8002818 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	23f0      	movs	r3, #240	; 0xf0
 800280c:	039b      	lsls	r3, r3, #14
 800280e:	401a      	ands	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002814:	429a      	cmp	r2, r3
 8002816:	d001      	beq.n	800281c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	0018      	movs	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	b008      	add	sp, #32
 8002824:	bd80      	pop	{r7, pc}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	40021000 	.word	0x40021000
 800282c:	00001388 	.word	0x00001388
 8002830:	efffffff 	.word	0xefffffff
 8002834:	feffffff 	.word	0xfeffffff
 8002838:	ffc27fff 	.word	0xffc27fff

0800283c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0b3      	b.n	80029b8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002850:	4b5b      	ldr	r3, [pc, #364]	; (80029c0 <HAL_RCC_ClockConfig+0x184>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2201      	movs	r2, #1
 8002856:	4013      	ands	r3, r2
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d911      	bls.n	8002882 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285e:	4b58      	ldr	r3, [pc, #352]	; (80029c0 <HAL_RCC_ClockConfig+0x184>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2201      	movs	r2, #1
 8002864:	4393      	bics	r3, r2
 8002866:	0019      	movs	r1, r3
 8002868:	4b55      	ldr	r3, [pc, #340]	; (80029c0 <HAL_RCC_ClockConfig+0x184>)
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002870:	4b53      	ldr	r3, [pc, #332]	; (80029c0 <HAL_RCC_ClockConfig+0x184>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2201      	movs	r2, #1
 8002876:	4013      	ands	r3, r2
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d001      	beq.n	8002882 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e09a      	b.n	80029b8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2202      	movs	r2, #2
 8002888:	4013      	ands	r3, r2
 800288a:	d015      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2204      	movs	r2, #4
 8002892:	4013      	ands	r3, r2
 8002894:	d006      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002896:	4b4b      	ldr	r3, [pc, #300]	; (80029c4 <HAL_RCC_ClockConfig+0x188>)
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	4b4a      	ldr	r3, [pc, #296]	; (80029c4 <HAL_RCC_ClockConfig+0x188>)
 800289c:	21e0      	movs	r1, #224	; 0xe0
 800289e:	00c9      	lsls	r1, r1, #3
 80028a0:	430a      	orrs	r2, r1
 80028a2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a4:	4b47      	ldr	r3, [pc, #284]	; (80029c4 <HAL_RCC_ClockConfig+0x188>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	22f0      	movs	r2, #240	; 0xf0
 80028aa:	4393      	bics	r3, r2
 80028ac:	0019      	movs	r1, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	4b44      	ldr	r3, [pc, #272]	; (80029c4 <HAL_RCC_ClockConfig+0x188>)
 80028b4:	430a      	orrs	r2, r1
 80028b6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2201      	movs	r2, #1
 80028be:	4013      	ands	r3, r2
 80028c0:	d040      	beq.n	8002944 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d107      	bne.n	80028da <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ca:	4b3e      	ldr	r3, [pc, #248]	; (80029c4 <HAL_RCC_ClockConfig+0x188>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	029b      	lsls	r3, r3, #10
 80028d2:	4013      	ands	r3, r2
 80028d4:	d114      	bne.n	8002900 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e06e      	b.n	80029b8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d107      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e2:	4b38      	ldr	r3, [pc, #224]	; (80029c4 <HAL_RCC_ClockConfig+0x188>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	049b      	lsls	r3, r3, #18
 80028ea:	4013      	ands	r3, r2
 80028ec:	d108      	bne.n	8002900 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e062      	b.n	80029b8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f2:	4b34      	ldr	r3, [pc, #208]	; (80029c4 <HAL_RCC_ClockConfig+0x188>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2202      	movs	r2, #2
 80028f8:	4013      	ands	r3, r2
 80028fa:	d101      	bne.n	8002900 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e05b      	b.n	80029b8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002900:	4b30      	ldr	r3, [pc, #192]	; (80029c4 <HAL_RCC_ClockConfig+0x188>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2203      	movs	r2, #3
 8002906:	4393      	bics	r3, r2
 8002908:	0019      	movs	r1, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	4b2d      	ldr	r3, [pc, #180]	; (80029c4 <HAL_RCC_ClockConfig+0x188>)
 8002910:	430a      	orrs	r2, r1
 8002912:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002914:	f7fe fcae 	bl	8001274 <HAL_GetTick>
 8002918:	0003      	movs	r3, r0
 800291a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291c:	e009      	b.n	8002932 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800291e:	f7fe fca9 	bl	8001274 <HAL_GetTick>
 8002922:	0002      	movs	r2, r0
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	4a27      	ldr	r2, [pc, #156]	; (80029c8 <HAL_RCC_ClockConfig+0x18c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e042      	b.n	80029b8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002932:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <HAL_RCC_ClockConfig+0x188>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	220c      	movs	r2, #12
 8002938:	401a      	ands	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	429a      	cmp	r2, r3
 8002942:	d1ec      	bne.n	800291e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002944:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <HAL_RCC_ClockConfig+0x184>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2201      	movs	r2, #1
 800294a:	4013      	ands	r3, r2
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d211      	bcs.n	8002976 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <HAL_RCC_ClockConfig+0x184>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2201      	movs	r2, #1
 8002958:	4393      	bics	r3, r2
 800295a:	0019      	movs	r1, r3
 800295c:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <HAL_RCC_ClockConfig+0x184>)
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002964:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <HAL_RCC_ClockConfig+0x184>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2201      	movs	r2, #1
 800296a:	4013      	ands	r3, r2
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d001      	beq.n	8002976 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e020      	b.n	80029b8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2204      	movs	r2, #4
 800297c:	4013      	ands	r3, r2
 800297e:	d009      	beq.n	8002994 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002980:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <HAL_RCC_ClockConfig+0x188>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	4a11      	ldr	r2, [pc, #68]	; (80029cc <HAL_RCC_ClockConfig+0x190>)
 8002986:	4013      	ands	r3, r2
 8002988:	0019      	movs	r1, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <HAL_RCC_ClockConfig+0x188>)
 8002990:	430a      	orrs	r2, r1
 8002992:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002994:	f000 f820 	bl	80029d8 <HAL_RCC_GetSysClockFreq>
 8002998:	0001      	movs	r1, r0
 800299a:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <HAL_RCC_ClockConfig+0x188>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	091b      	lsrs	r3, r3, #4
 80029a0:	220f      	movs	r2, #15
 80029a2:	4013      	ands	r3, r2
 80029a4:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <HAL_RCC_ClockConfig+0x194>)
 80029a6:	5cd3      	ldrb	r3, [r2, r3]
 80029a8:	000a      	movs	r2, r1
 80029aa:	40da      	lsrs	r2, r3
 80029ac:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <HAL_RCC_ClockConfig+0x198>)
 80029ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80029b0:	2000      	movs	r0, #0
 80029b2:	f7fe fc19 	bl	80011e8 <HAL_InitTick>
  
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	0018      	movs	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b004      	add	sp, #16
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40022000 	.word	0x40022000
 80029c4:	40021000 	.word	0x40021000
 80029c8:	00001388 	.word	0x00001388
 80029cc:	fffff8ff 	.word	0xfffff8ff
 80029d0:	08003d98 	.word	0x08003d98
 80029d4:	20000000 	.word	0x20000000

080029d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d8:	b590      	push	{r4, r7, lr}
 80029da:	b08f      	sub	sp, #60	; 0x3c
 80029dc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80029de:	2314      	movs	r3, #20
 80029e0:	18fb      	adds	r3, r7, r3
 80029e2:	4a2c      	ldr	r2, [pc, #176]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80029e6:	c313      	stmia	r3!, {r0, r1, r4}
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80029ec:	1d3b      	adds	r3, r7, #4
 80029ee:	4a2a      	ldr	r2, [pc, #168]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80029f2:	c313      	stmia	r3!, {r0, r1, r4}
 80029f4:	6812      	ldr	r2, [r2, #0]
 80029f6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029fc:	2300      	movs	r3, #0
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a00:	2300      	movs	r3, #0
 8002a02:	637b      	str	r3, [r7, #52]	; 0x34
 8002a04:	2300      	movs	r3, #0
 8002a06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002a0c:	4b23      	ldr	r3, [pc, #140]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a14:	220c      	movs	r2, #12
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d002      	beq.n	8002a22 <HAL_RCC_GetSysClockFreq+0x4a>
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d003      	beq.n	8002a28 <HAL_RCC_GetSysClockFreq+0x50>
 8002a20:	e02f      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a22:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a24:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a26:	e02f      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2a:	0c9b      	lsrs	r3, r3, #18
 8002a2c:	220f      	movs	r2, #15
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2214      	movs	r2, #20
 8002a32:	18ba      	adds	r2, r7, r2
 8002a34:	5cd3      	ldrb	r3, [r2, r3]
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002a38:	4b18      	ldr	r3, [pc, #96]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	220f      	movs	r2, #15
 8002a3e:	4013      	ands	r3, r2
 8002a40:	1d3a      	adds	r2, r7, #4
 8002a42:	5cd3      	ldrb	r3, [r2, r3]
 8002a44:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a48:	23c0      	movs	r3, #192	; 0xc0
 8002a4a:	025b      	lsls	r3, r3, #9
 8002a4c:	401a      	ands	r2, r3
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	025b      	lsls	r3, r3, #9
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d109      	bne.n	8002a6a <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a58:	4811      	ldr	r0, [pc, #68]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a5a:	f7fd fb55 	bl	8000108 <__udivsi3>
 8002a5e:	0003      	movs	r3, r0
 8002a60:	001a      	movs	r2, r3
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	4353      	muls	r3, r2
 8002a66:	637b      	str	r3, [r7, #52]	; 0x34
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a6c:	480c      	ldr	r0, [pc, #48]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a6e:	f7fd fb4b 	bl	8000108 <__udivsi3>
 8002a72:	0003      	movs	r3, r0
 8002a74:	001a      	movs	r2, r3
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	4353      	muls	r3, r2
 8002a7a:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a80:	e002      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a82:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a84:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a86:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	b00f      	add	sp, #60	; 0x3c
 8002a90:	bd90      	pop	{r4, r7, pc}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	08003d38 	.word	0x08003d38
 8002a98:	08003d48 	.word	0x08003d48
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	007a1200 	.word	0x007a1200

08002aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa8:	4b02      	ldr	r3, [pc, #8]	; (8002ab4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
}
 8002aac:	0018      	movs	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	20000000 	.word	0x20000000

08002ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002abc:	f7ff fff2 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8002ac0:	0001      	movs	r1, r0
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	0a1b      	lsrs	r3, r3, #8
 8002ac8:	2207      	movs	r2, #7
 8002aca:	4013      	ands	r3, r2
 8002acc:	4a04      	ldr	r2, [pc, #16]	; (8002ae0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ace:	5cd3      	ldrb	r3, [r2, r3]
 8002ad0:	40d9      	lsrs	r1, r3
 8002ad2:	000b      	movs	r3, r1
}    
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	08003da8 	.word	0x08003da8

08002ae4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	025b      	lsls	r3, r3, #9
 8002afc:	4013      	ands	r3, r2
 8002afe:	d100      	bne.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002b00:	e08f      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002b02:	2317      	movs	r3, #23
 8002b04:	18fb      	adds	r3, r7, r3
 8002b06:	2200      	movs	r2, #0
 8002b08:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b0a:	4b5f      	ldr	r3, [pc, #380]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b0c:	69da      	ldr	r2, [r3, #28]
 8002b0e:	2380      	movs	r3, #128	; 0x80
 8002b10:	055b      	lsls	r3, r3, #21
 8002b12:	4013      	ands	r3, r2
 8002b14:	d111      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b16:	4b5c      	ldr	r3, [pc, #368]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b18:	69da      	ldr	r2, [r3, #28]
 8002b1a:	4b5b      	ldr	r3, [pc, #364]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b1c:	2180      	movs	r1, #128	; 0x80
 8002b1e:	0549      	lsls	r1, r1, #21
 8002b20:	430a      	orrs	r2, r1
 8002b22:	61da      	str	r2, [r3, #28]
 8002b24:	4b58      	ldr	r3, [pc, #352]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b26:	69da      	ldr	r2, [r3, #28]
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	055b      	lsls	r3, r3, #21
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b32:	2317      	movs	r3, #23
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	2201      	movs	r2, #1
 8002b38:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3a:	4b54      	ldr	r3, [pc, #336]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	4013      	ands	r3, r2
 8002b44:	d11a      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b46:	4b51      	ldr	r3, [pc, #324]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	4b50      	ldr	r3, [pc, #320]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b4c:	2180      	movs	r1, #128	; 0x80
 8002b4e:	0049      	lsls	r1, r1, #1
 8002b50:	430a      	orrs	r2, r1
 8002b52:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b54:	f7fe fb8e 	bl	8001274 <HAL_GetTick>
 8002b58:	0003      	movs	r3, r0
 8002b5a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5c:	e008      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b5e:	f7fe fb89 	bl	8001274 <HAL_GetTick>
 8002b62:	0002      	movs	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b64      	cmp	r3, #100	; 0x64
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e087      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b70:	4b46      	ldr	r3, [pc, #280]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b7c:	4b42      	ldr	r3, [pc, #264]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b7e:	6a1a      	ldr	r2, [r3, #32]
 8002b80:	23c0      	movs	r3, #192	; 0xc0
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4013      	ands	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d034      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	23c0      	movs	r3, #192	; 0xc0
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4013      	ands	r3, r2
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d02c      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b9e:	4b3a      	ldr	r3, [pc, #232]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	4a3b      	ldr	r2, [pc, #236]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ba8:	4b37      	ldr	r3, [pc, #220]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002baa:	6a1a      	ldr	r2, [r3, #32]
 8002bac:	4b36      	ldr	r3, [pc, #216]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002bae:	2180      	movs	r1, #128	; 0x80
 8002bb0:	0249      	lsls	r1, r1, #9
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bb6:	4b34      	ldr	r3, [pc, #208]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002bb8:	6a1a      	ldr	r2, [r3, #32]
 8002bba:	4b33      	ldr	r3, [pc, #204]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002bbc:	4935      	ldr	r1, [pc, #212]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002bbe:	400a      	ands	r2, r1
 8002bc0:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bc2:	4b31      	ldr	r3, [pc, #196]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d013      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd0:	f7fe fb50 	bl	8001274 <HAL_GetTick>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd8:	e009      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bda:	f7fe fb4b 	bl	8001274 <HAL_GetTick>
 8002bde:	0002      	movs	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	4a2c      	ldr	r2, [pc, #176]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e048      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bee:	4b26      	ldr	r3, [pc, #152]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d0f0      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bf8:	4b23      	ldr	r3, [pc, #140]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	4a24      	ldr	r2, [pc, #144]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	0019      	movs	r1, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	4b20      	ldr	r3, [pc, #128]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c0c:	2317      	movs	r3, #23
 8002c0e:	18fb      	adds	r3, r7, r3
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d105      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c16:	4b1c      	ldr	r3, [pc, #112]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c18:	69da      	ldr	r2, [r3, #28]
 8002c1a:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c1c:	491f      	ldr	r1, [pc, #124]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c1e:	400a      	ands	r2, r1
 8002c20:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2201      	movs	r2, #1
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d009      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c2c:	4b16      	ldr	r3, [pc, #88]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c30:	2203      	movs	r2, #3
 8002c32:	4393      	bics	r3, r2
 8002c34:	0019      	movs	r1, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2220      	movs	r2, #32
 8002c46:	4013      	ands	r3, r2
 8002c48:	d009      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c4a:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	2210      	movs	r2, #16
 8002c50:	4393      	bics	r3, r2
 8002c52:	0019      	movs	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	029b      	lsls	r3, r3, #10
 8002c66:	4013      	ands	r3, r2
 8002c68:	d009      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c6a:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	2280      	movs	r2, #128	; 0x80
 8002c70:	4393      	bics	r3, r2
 8002c72:	0019      	movs	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	4b03      	ldr	r3, [pc, #12]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	0018      	movs	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b006      	add	sp, #24
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	40007000 	.word	0x40007000
 8002c90:	fffffcff 	.word	0xfffffcff
 8002c94:	fffeffff 	.word	0xfffeffff
 8002c98:	00001388 	.word	0x00001388
 8002c9c:	efffffff 	.word	0xefffffff

08002ca0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e044      	b.n	8002d3c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d107      	bne.n	8002cca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2274      	movs	r2, #116	; 0x74
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f7fe f99f 	bl	8001008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2224      	movs	r2, #36	; 0x24
 8002cce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2101      	movs	r1, #1
 8002cdc:	438a      	bics	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f000 f8da 	bl	8002e9c <UART_SetConfig>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e024      	b.n	8002d3c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f000 fa0b 	bl	8003118 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	490d      	ldr	r1, [pc, #52]	; (8002d44 <HAL_UART_Init+0xa4>)
 8002d0e:	400a      	ands	r2, r1
 8002d10:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2108      	movs	r1, #8
 8002d1e:	438a      	bics	r2, r1
 8002d20:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	0018      	movs	r0, r3
 8002d36:	f000 faa3 	bl	8003280 <UART_CheckIdleState>
 8002d3a:	0003      	movs	r3, r0
}
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b002      	add	sp, #8
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	fffff7ff 	.word	0xfffff7ff

08002d48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08a      	sub	sp, #40	; 0x28
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	1dbb      	adds	r3, r7, #6
 8002d56:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	d000      	beq.n	8002d62 <HAL_UART_Transmit+0x1a>
 8002d60:	e096      	b.n	8002e90 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_UART_Transmit+0x28>
 8002d68:	1dbb      	adds	r3, r7, #6
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e08e      	b.n	8002e92 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	015b      	lsls	r3, r3, #5
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d109      	bne.n	8002d94 <HAL_UART_Transmit+0x4c>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d105      	bne.n	8002d94 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d001      	beq.n	8002d94 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e07e      	b.n	8002e92 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2274      	movs	r2, #116	; 0x74
 8002d98:	5c9b      	ldrb	r3, [r3, r2]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_UART_Transmit+0x5a>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e077      	b.n	8002e92 <HAL_UART_Transmit+0x14a>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2274      	movs	r2, #116	; 0x74
 8002da6:	2101      	movs	r1, #1
 8002da8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2280      	movs	r2, #128	; 0x80
 8002dae:	2100      	movs	r1, #0
 8002db0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2221      	movs	r2, #33	; 0x21
 8002db6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002db8:	f7fe fa5c 	bl	8001274 <HAL_GetTick>
 8002dbc:	0003      	movs	r3, r0
 8002dbe:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	1dba      	adds	r2, r7, #6
 8002dc4:	2150      	movs	r1, #80	; 0x50
 8002dc6:	8812      	ldrh	r2, [r2, #0]
 8002dc8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1dba      	adds	r2, r7, #6
 8002dce:	2152      	movs	r1, #82	; 0x52
 8002dd0:	8812      	ldrh	r2, [r2, #0]
 8002dd2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	015b      	lsls	r3, r3, #5
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d108      	bne.n	8002df2 <HAL_UART_Transmit+0xaa>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d104      	bne.n	8002df2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	e003      	b.n	8002dfa <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2274      	movs	r2, #116	; 0x74
 8002dfe:	2100      	movs	r1, #0
 8002e00:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002e02:	e02d      	b.n	8002e60 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	0013      	movs	r3, r2
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2180      	movs	r1, #128	; 0x80
 8002e12:	f000 fa7f 	bl	8003314 <UART_WaitOnFlagUntilTimeout>
 8002e16:	1e03      	subs	r3, r0, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e039      	b.n	8002e92 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10b      	bne.n	8002e3c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	881a      	ldrh	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	05d2      	lsls	r2, r2, #23
 8002e2e:	0dd2      	lsrs	r2, r2, #23
 8002e30:	b292      	uxth	r2, r2
 8002e32:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	3302      	adds	r3, #2
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	e008      	b.n	8002e4e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	781a      	ldrb	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	b292      	uxth	r2, r2
 8002e46:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2252      	movs	r2, #82	; 0x52
 8002e52:	5a9b      	ldrh	r3, [r3, r2]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b299      	uxth	r1, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2252      	movs	r2, #82	; 0x52
 8002e5e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2252      	movs	r2, #82	; 0x52
 8002e64:	5a9b      	ldrh	r3, [r3, r2]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1cb      	bne.n	8002e04 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	0013      	movs	r3, r2
 8002e76:	2200      	movs	r2, #0
 8002e78:	2140      	movs	r1, #64	; 0x40
 8002e7a:	f000 fa4b 	bl	8003314 <UART_WaitOnFlagUntilTimeout>
 8002e7e:	1e03      	subs	r3, r0, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e005      	b.n	8002e92 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	e000      	b.n	8002e92 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002e90:	2302      	movs	r3, #2
  }
}
 8002e92:	0018      	movs	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b008      	add	sp, #32
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ea4:	231e      	movs	r3, #30
 8002ea6:	18fb      	adds	r3, r7, r3
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a8b      	ldr	r2, [pc, #556]	; (80030f8 <UART_SetConfig+0x25c>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	0019      	movs	r1, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	4a86      	ldr	r2, [pc, #536]	; (80030fc <UART_SetConfig+0x260>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4a7d      	ldr	r2, [pc, #500]	; (8003100 <UART_SetConfig+0x264>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	0019      	movs	r1, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a79      	ldr	r2, [pc, #484]	; (8003104 <UART_SetConfig+0x268>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d125      	bne.n	8002f6e <UART_SetConfig+0xd2>
 8002f22:	4b79      	ldr	r3, [pc, #484]	; (8003108 <UART_SetConfig+0x26c>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	2203      	movs	r2, #3
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d00f      	beq.n	8002f4e <UART_SetConfig+0xb2>
 8002f2e:	d304      	bcc.n	8002f3a <UART_SetConfig+0x9e>
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d011      	beq.n	8002f58 <UART_SetConfig+0xbc>
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d005      	beq.n	8002f44 <UART_SetConfig+0xa8>
 8002f38:	e013      	b.n	8002f62 <UART_SetConfig+0xc6>
 8002f3a:	231f      	movs	r3, #31
 8002f3c:	18fb      	adds	r3, r7, r3
 8002f3e:	2200      	movs	r2, #0
 8002f40:	701a      	strb	r2, [r3, #0]
 8002f42:	e022      	b.n	8002f8a <UART_SetConfig+0xee>
 8002f44:	231f      	movs	r3, #31
 8002f46:	18fb      	adds	r3, r7, r3
 8002f48:	2202      	movs	r2, #2
 8002f4a:	701a      	strb	r2, [r3, #0]
 8002f4c:	e01d      	b.n	8002f8a <UART_SetConfig+0xee>
 8002f4e:	231f      	movs	r3, #31
 8002f50:	18fb      	adds	r3, r7, r3
 8002f52:	2204      	movs	r2, #4
 8002f54:	701a      	strb	r2, [r3, #0]
 8002f56:	e018      	b.n	8002f8a <UART_SetConfig+0xee>
 8002f58:	231f      	movs	r3, #31
 8002f5a:	18fb      	adds	r3, r7, r3
 8002f5c:	2208      	movs	r2, #8
 8002f5e:	701a      	strb	r2, [r3, #0]
 8002f60:	e013      	b.n	8002f8a <UART_SetConfig+0xee>
 8002f62:	231f      	movs	r3, #31
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	2210      	movs	r2, #16
 8002f68:	701a      	strb	r2, [r3, #0]
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	e00d      	b.n	8002f8a <UART_SetConfig+0xee>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a66      	ldr	r2, [pc, #408]	; (800310c <UART_SetConfig+0x270>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d104      	bne.n	8002f82 <UART_SetConfig+0xe6>
 8002f78:	231f      	movs	r3, #31
 8002f7a:	18fb      	adds	r3, r7, r3
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	701a      	strb	r2, [r3, #0]
 8002f80:	e003      	b.n	8002f8a <UART_SetConfig+0xee>
 8002f82:	231f      	movs	r3, #31
 8002f84:	18fb      	adds	r3, r7, r3
 8002f86:	2210      	movs	r2, #16
 8002f88:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69da      	ldr	r2, [r3, #28]
 8002f8e:	2380      	movs	r3, #128	; 0x80
 8002f90:	021b      	lsls	r3, r3, #8
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d15c      	bne.n	8003050 <UART_SetConfig+0x1b4>
  {
    switch (clocksource)
 8002f96:	231f      	movs	r3, #31
 8002f98:	18fb      	adds	r3, r7, r3
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d00d      	beq.n	8002fbc <UART_SetConfig+0x120>
 8002fa0:	dc02      	bgt.n	8002fa8 <UART_SetConfig+0x10c>
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d005      	beq.n	8002fb2 <UART_SetConfig+0x116>
 8002fa6:	e015      	b.n	8002fd4 <UART_SetConfig+0x138>
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d00a      	beq.n	8002fc2 <UART_SetConfig+0x126>
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d00d      	beq.n	8002fcc <UART_SetConfig+0x130>
 8002fb0:	e010      	b.n	8002fd4 <UART_SetConfig+0x138>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fb2:	f7ff fd81 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 8002fb6:	0003      	movs	r3, r0
 8002fb8:	61bb      	str	r3, [r7, #24]
        break;
 8002fba:	e012      	b.n	8002fe2 <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fbc:	4b54      	ldr	r3, [pc, #336]	; (8003110 <UART_SetConfig+0x274>)
 8002fbe:	61bb      	str	r3, [r7, #24]
        break;
 8002fc0:	e00f      	b.n	8002fe2 <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fc2:	f7ff fd09 	bl	80029d8 <HAL_RCC_GetSysClockFreq>
 8002fc6:	0003      	movs	r3, r0
 8002fc8:	61bb      	str	r3, [r7, #24]
        break;
 8002fca:	e00a      	b.n	8002fe2 <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fcc:	2380      	movs	r3, #128	; 0x80
 8002fce:	021b      	lsls	r3, r3, #8
 8002fd0:	61bb      	str	r3, [r7, #24]
        break;
 8002fd2:	e006      	b.n	8002fe2 <UART_SetConfig+0x146>
      default:
        pclk = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fd8:	231e      	movs	r3, #30
 8002fda:	18fb      	adds	r3, r7, r3
 8002fdc:	2201      	movs	r2, #1
 8002fde:	701a      	strb	r2, [r3, #0]
        break;
 8002fe0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d100      	bne.n	8002fea <UART_SetConfig+0x14e>
 8002fe8:	e079      	b.n	80030de <UART_SetConfig+0x242>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	005a      	lsls	r2, r3, #1
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	085b      	lsrs	r3, r3, #1
 8002ff4:	18d2      	adds	r2, r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	0019      	movs	r1, r3
 8002ffc:	0010      	movs	r0, r2
 8002ffe:	f7fd f883 	bl	8000108 <__udivsi3>
 8003002:	0003      	movs	r3, r0
 8003004:	b29b      	uxth	r3, r3
 8003006:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	2b0f      	cmp	r3, #15
 800300c:	d91b      	bls.n	8003046 <UART_SetConfig+0x1aa>
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4a40      	ldr	r2, [pc, #256]	; (8003114 <UART_SetConfig+0x278>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d817      	bhi.n	8003046 <UART_SetConfig+0x1aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	b29a      	uxth	r2, r3
 800301a:	200e      	movs	r0, #14
 800301c:	183b      	adds	r3, r7, r0
 800301e:	210f      	movs	r1, #15
 8003020:	438a      	bics	r2, r1
 8003022:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	085b      	lsrs	r3, r3, #1
 8003028:	b29b      	uxth	r3, r3
 800302a:	2207      	movs	r2, #7
 800302c:	4013      	ands	r3, r2
 800302e:	b299      	uxth	r1, r3
 8003030:	183b      	adds	r3, r7, r0
 8003032:	183a      	adds	r2, r7, r0
 8003034:	8812      	ldrh	r2, [r2, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	183a      	adds	r2, r7, r0
 8003040:	8812      	ldrh	r2, [r2, #0]
 8003042:	60da      	str	r2, [r3, #12]
 8003044:	e04b      	b.n	80030de <UART_SetConfig+0x242>
      }
      else
      {
        ret = HAL_ERROR;
 8003046:	231e      	movs	r3, #30
 8003048:	18fb      	adds	r3, r7, r3
 800304a:	2201      	movs	r2, #1
 800304c:	701a      	strb	r2, [r3, #0]
 800304e:	e046      	b.n	80030de <UART_SetConfig+0x242>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003050:	231f      	movs	r3, #31
 8003052:	18fb      	adds	r3, r7, r3
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d00d      	beq.n	8003076 <UART_SetConfig+0x1da>
 800305a:	dc02      	bgt.n	8003062 <UART_SetConfig+0x1c6>
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <UART_SetConfig+0x1d0>
 8003060:	e015      	b.n	800308e <UART_SetConfig+0x1f2>
 8003062:	2b04      	cmp	r3, #4
 8003064:	d00a      	beq.n	800307c <UART_SetConfig+0x1e0>
 8003066:	2b08      	cmp	r3, #8
 8003068:	d00d      	beq.n	8003086 <UART_SetConfig+0x1ea>
 800306a:	e010      	b.n	800308e <UART_SetConfig+0x1f2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800306c:	f7ff fd24 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 8003070:	0003      	movs	r3, r0
 8003072:	61bb      	str	r3, [r7, #24]
        break;
 8003074:	e012      	b.n	800309c <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003076:	4b26      	ldr	r3, [pc, #152]	; (8003110 <UART_SetConfig+0x274>)
 8003078:	61bb      	str	r3, [r7, #24]
        break;
 800307a:	e00f      	b.n	800309c <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307c:	f7ff fcac 	bl	80029d8 <HAL_RCC_GetSysClockFreq>
 8003080:	0003      	movs	r3, r0
 8003082:	61bb      	str	r3, [r7, #24]
        break;
 8003084:	e00a      	b.n	800309c <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	021b      	lsls	r3, r3, #8
 800308a:	61bb      	str	r3, [r7, #24]
        break;
 800308c:	e006      	b.n	800309c <UART_SetConfig+0x200>
      default:
        pclk = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003092:	231e      	movs	r3, #30
 8003094:	18fb      	adds	r3, r7, r3
 8003096:	2201      	movs	r2, #1
 8003098:	701a      	strb	r2, [r3, #0]
        break;
 800309a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d01d      	beq.n	80030de <UART_SetConfig+0x242>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	085a      	lsrs	r2, r3, #1
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	18d2      	adds	r2, r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	0019      	movs	r1, r3
 80030b2:	0010      	movs	r0, r2
 80030b4:	f7fd f828 	bl	8000108 <__udivsi3>
 80030b8:	0003      	movs	r3, r0
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b0f      	cmp	r3, #15
 80030c2:	d908      	bls.n	80030d6 <UART_SetConfig+0x23a>
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	4a13      	ldr	r2, [pc, #76]	; (8003114 <UART_SetConfig+0x278>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d804      	bhi.n	80030d6 <UART_SetConfig+0x23a>
      {
        huart->Instance->BRR = usartdiv;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	60da      	str	r2, [r3, #12]
 80030d4:	e003      	b.n	80030de <UART_SetConfig+0x242>
      }
      else
      {
        ret = HAL_ERROR;
 80030d6:	231e      	movs	r3, #30
 80030d8:	18fb      	adds	r3, r7, r3
 80030da:	2201      	movs	r2, #1
 80030dc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80030ea:	231e      	movs	r3, #30
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	781b      	ldrb	r3, [r3, #0]
}
 80030f0:	0018      	movs	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b008      	add	sp, #32
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	efff69f3 	.word	0xefff69f3
 80030fc:	ffffcfff 	.word	0xffffcfff
 8003100:	fffff4ff 	.word	0xfffff4ff
 8003104:	40013800 	.word	0x40013800
 8003108:	40021000 	.word	0x40021000
 800310c:	40004400 	.word	0x40004400
 8003110:	007a1200 	.word	0x007a1200
 8003114:	0000ffff 	.word	0x0000ffff

08003118 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	2201      	movs	r2, #1
 8003126:	4013      	ands	r3, r2
 8003128:	d00b      	beq.n	8003142 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a4a      	ldr	r2, [pc, #296]	; (800325c <UART_AdvFeatureConfig+0x144>)
 8003132:	4013      	ands	r3, r2
 8003134:	0019      	movs	r1, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	2202      	movs	r2, #2
 8003148:	4013      	ands	r3, r2
 800314a:	d00b      	beq.n	8003164 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	4a43      	ldr	r2, [pc, #268]	; (8003260 <UART_AdvFeatureConfig+0x148>)
 8003154:	4013      	ands	r3, r2
 8003156:	0019      	movs	r1, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	2204      	movs	r2, #4
 800316a:	4013      	ands	r3, r2
 800316c:	d00b      	beq.n	8003186 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	4a3b      	ldr	r2, [pc, #236]	; (8003264 <UART_AdvFeatureConfig+0x14c>)
 8003176:	4013      	ands	r3, r2
 8003178:	0019      	movs	r1, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	2208      	movs	r2, #8
 800318c:	4013      	ands	r3, r2
 800318e:	d00b      	beq.n	80031a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	4a34      	ldr	r2, [pc, #208]	; (8003268 <UART_AdvFeatureConfig+0x150>)
 8003198:	4013      	ands	r3, r2
 800319a:	0019      	movs	r1, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	2210      	movs	r2, #16
 80031ae:	4013      	ands	r3, r2
 80031b0:	d00b      	beq.n	80031ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	4a2c      	ldr	r2, [pc, #176]	; (800326c <UART_AdvFeatureConfig+0x154>)
 80031ba:	4013      	ands	r3, r2
 80031bc:	0019      	movs	r1, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	2220      	movs	r2, #32
 80031d0:	4013      	ands	r3, r2
 80031d2:	d00b      	beq.n	80031ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	4a25      	ldr	r2, [pc, #148]	; (8003270 <UART_AdvFeatureConfig+0x158>)
 80031dc:	4013      	ands	r3, r2
 80031de:	0019      	movs	r1, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	2240      	movs	r2, #64	; 0x40
 80031f2:	4013      	ands	r3, r2
 80031f4:	d01d      	beq.n	8003232 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4a1d      	ldr	r2, [pc, #116]	; (8003274 <UART_AdvFeatureConfig+0x15c>)
 80031fe:	4013      	ands	r3, r2
 8003200:	0019      	movs	r1, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003212:	2380      	movs	r3, #128	; 0x80
 8003214:	035b      	lsls	r3, r3, #13
 8003216:	429a      	cmp	r2, r3
 8003218:	d10b      	bne.n	8003232 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	4a15      	ldr	r2, [pc, #84]	; (8003278 <UART_AdvFeatureConfig+0x160>)
 8003222:	4013      	ands	r3, r2
 8003224:	0019      	movs	r1, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	2280      	movs	r2, #128	; 0x80
 8003238:	4013      	ands	r3, r2
 800323a:	d00b      	beq.n	8003254 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	4a0e      	ldr	r2, [pc, #56]	; (800327c <UART_AdvFeatureConfig+0x164>)
 8003244:	4013      	ands	r3, r2
 8003246:	0019      	movs	r1, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	605a      	str	r2, [r3, #4]
  }
}
 8003254:	46c0      	nop			; (mov r8, r8)
 8003256:	46bd      	mov	sp, r7
 8003258:	b002      	add	sp, #8
 800325a:	bd80      	pop	{r7, pc}
 800325c:	fffdffff 	.word	0xfffdffff
 8003260:	fffeffff 	.word	0xfffeffff
 8003264:	fffbffff 	.word	0xfffbffff
 8003268:	ffff7fff 	.word	0xffff7fff
 800326c:	ffffefff 	.word	0xffffefff
 8003270:	ffffdfff 	.word	0xffffdfff
 8003274:	ffefffff 	.word	0xffefffff
 8003278:	ff9fffff 	.word	0xff9fffff
 800327c:	fff7ffff 	.word	0xfff7ffff

08003280 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af02      	add	r7, sp, #8
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2280      	movs	r2, #128	; 0x80
 800328c:	2100      	movs	r1, #0
 800328e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003290:	f7fd fff0 	bl	8001274 <HAL_GetTick>
 8003294:	0003      	movs	r3, r0
 8003296:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2208      	movs	r2, #8
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d10d      	bne.n	80032c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	2380      	movs	r3, #128	; 0x80
 80032aa:	0399      	lsls	r1, r3, #14
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	4b18      	ldr	r3, [pc, #96]	; (8003310 <UART_CheckIdleState+0x90>)
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	0013      	movs	r3, r2
 80032b4:	2200      	movs	r2, #0
 80032b6:	f000 f82d 	bl	8003314 <UART_WaitOnFlagUntilTimeout>
 80032ba:	1e03      	subs	r3, r0, #0
 80032bc:	d001      	beq.n	80032c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e022      	b.n	8003308 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2204      	movs	r2, #4
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d10d      	bne.n	80032ec <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	03d9      	lsls	r1, r3, #15
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	4b0d      	ldr	r3, [pc, #52]	; (8003310 <UART_CheckIdleState+0x90>)
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	0013      	movs	r3, r2
 80032de:	2200      	movs	r2, #0
 80032e0:	f000 f818 	bl	8003314 <UART_WaitOnFlagUntilTimeout>
 80032e4:	1e03      	subs	r3, r0, #0
 80032e6:	d001      	beq.n	80032ec <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e00d      	b.n	8003308 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2220      	movs	r2, #32
 80032f6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2274      	movs	r2, #116	; 0x74
 8003302:	2100      	movs	r1, #0
 8003304:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	0018      	movs	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	b004      	add	sp, #16
 800330e:	bd80      	pop	{r7, pc}
 8003310:	01ffffff 	.word	0x01ffffff

08003314 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b094      	sub	sp, #80	; 0x50
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	1dfb      	adds	r3, r7, #7
 8003322:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003324:	e09b      	b.n	800345e <UART_WaitOnFlagUntilTimeout+0x14a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003326:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003328:	3301      	adds	r3, #1
 800332a:	d100      	bne.n	800332e <UART_WaitOnFlagUntilTimeout+0x1a>
 800332c:	e097      	b.n	800345e <UART_WaitOnFlagUntilTimeout+0x14a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332e:	f7fd ffa1 	bl	8001274 <HAL_GetTick>
 8003332:	0002      	movs	r2, r0
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800333a:	429a      	cmp	r2, r3
 800333c:	d302      	bcc.n	8003344 <UART_WaitOnFlagUntilTimeout+0x30>
 800333e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003340:	2b00      	cmp	r3, #0
 8003342:	d139      	bne.n	80033b8 <UART_WaitOnFlagUntilTimeout+0xa4>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003344:	f3ef 8310 	mrs	r3, PRIMASK
 8003348:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800334a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800334c:	647b      	str	r3, [r7, #68]	; 0x44
 800334e:	2301      	movs	r3, #1
 8003350:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003354:	f383 8810 	msr	PRIMASK, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4949      	ldr	r1, [pc, #292]	; (8003488 <UART_WaitOnFlagUntilTimeout+0x174>)
 8003364:	400a      	ands	r2, r1
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800336a:	633b      	str	r3, [r7, #48]	; 0x30
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336e:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003372:	f3ef 8310 	mrs	r3, PRIMASK
 8003376:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800337a:	643b      	str	r3, [r7, #64]	; 0x40
 800337c:	2301      	movs	r3, #1
 800337e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003382:	f383 8810 	msr	PRIMASK, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2101      	movs	r1, #1
 8003392:	438a      	bics	r2, r1
 8003394:	609a      	str	r2, [r3, #8]
 8003396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003398:	63fb      	str	r3, [r7, #60]	; 0x3c
 800339a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800339c:	f383 8810 	msr	PRIMASK, r3

        huart->gState = HAL_UART_STATE_READY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2220      	movs	r2, #32
 80033a4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2220      	movs	r2, #32
 80033aa:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2274      	movs	r2, #116	; 0x74
 80033b0:	2100      	movs	r1, #0
 80033b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e063      	b.n	8003480 <UART_WaitOnFlagUntilTimeout+0x16c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2204      	movs	r2, #4
 80033c0:	4013      	ands	r3, r2
 80033c2:	d04c      	beq.n	800345e <UART_WaitOnFlagUntilTimeout+0x14a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	69da      	ldr	r2, [r3, #28]
 80033ca:	2380      	movs	r3, #128	; 0x80
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	401a      	ands	r2, r3
 80033d0:	2380      	movs	r3, #128	; 0x80
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d142      	bne.n	800345e <UART_WaitOnFlagUntilTimeout+0x14a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2280      	movs	r2, #128	; 0x80
 80033de:	0112      	lsls	r2, r2, #4
 80033e0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e2:	f3ef 8310 	mrs	r3, PRIMASK
 80033e6:	613b      	str	r3, [r7, #16]
  return(result);
 80033e8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033ec:	2301      	movs	r3, #1
 80033ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f383 8810 	msr	PRIMASK, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4921      	ldr	r1, [pc, #132]	; (8003488 <UART_WaitOnFlagUntilTimeout+0x174>)
 8003402:	400a      	ands	r2, r1
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003408:	61bb      	str	r3, [r7, #24]
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003410:	f3ef 8310 	mrs	r3, PRIMASK
 8003414:	61fb      	str	r3, [r7, #28]
  return(result);
 8003416:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003418:	64bb      	str	r3, [r7, #72]	; 0x48
 800341a:	2301      	movs	r3, #1
 800341c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	f383 8810 	msr	PRIMASK, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2101      	movs	r1, #1
 8003430:	438a      	bics	r2, r1
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003436:	627b      	str	r3, [r7, #36]	; 0x24
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	f383 8810 	msr	PRIMASK, r3

          huart->gState = HAL_UART_STATE_READY;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2220      	movs	r2, #32
 8003442:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2280      	movs	r2, #128	; 0x80
 800344e:	2120      	movs	r1, #32
 8003450:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2274      	movs	r2, #116	; 0x74
 8003456:	2100      	movs	r1, #0
 8003458:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e010      	b.n	8003480 <UART_WaitOnFlagUntilTimeout+0x16c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	4013      	ands	r3, r2
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	425a      	negs	r2, r3
 800346e:	4153      	adcs	r3, r2
 8003470:	b2db      	uxtb	r3, r3
 8003472:	001a      	movs	r2, r3
 8003474:	1dfb      	adds	r3, r7, #7
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d100      	bne.n	800347e <UART_WaitOnFlagUntilTimeout+0x16a>
 800347c:	e753      	b.n	8003326 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	0018      	movs	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	b014      	add	sp, #80	; 0x50
 8003486:	bd80      	pop	{r7, pc}
 8003488:	fffffe5f 	.word	0xfffffe5f

0800348c <__errno>:
 800348c:	4b01      	ldr	r3, [pc, #4]	; (8003494 <__errno+0x8>)
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	4770      	bx	lr
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	2000000c 	.word	0x2000000c

08003498 <__libc_init_array>:
 8003498:	b570      	push	{r4, r5, r6, lr}
 800349a:	2600      	movs	r6, #0
 800349c:	4d0c      	ldr	r5, [pc, #48]	; (80034d0 <__libc_init_array+0x38>)
 800349e:	4c0d      	ldr	r4, [pc, #52]	; (80034d4 <__libc_init_array+0x3c>)
 80034a0:	1b64      	subs	r4, r4, r5
 80034a2:	10a4      	asrs	r4, r4, #2
 80034a4:	42a6      	cmp	r6, r4
 80034a6:	d109      	bne.n	80034bc <__libc_init_array+0x24>
 80034a8:	2600      	movs	r6, #0
 80034aa:	f000 fc29 	bl	8003d00 <_init>
 80034ae:	4d0a      	ldr	r5, [pc, #40]	; (80034d8 <__libc_init_array+0x40>)
 80034b0:	4c0a      	ldr	r4, [pc, #40]	; (80034dc <__libc_init_array+0x44>)
 80034b2:	1b64      	subs	r4, r4, r5
 80034b4:	10a4      	asrs	r4, r4, #2
 80034b6:	42a6      	cmp	r6, r4
 80034b8:	d105      	bne.n	80034c6 <__libc_init_array+0x2e>
 80034ba:	bd70      	pop	{r4, r5, r6, pc}
 80034bc:	00b3      	lsls	r3, r6, #2
 80034be:	58eb      	ldr	r3, [r5, r3]
 80034c0:	4798      	blx	r3
 80034c2:	3601      	adds	r6, #1
 80034c4:	e7ee      	b.n	80034a4 <__libc_init_array+0xc>
 80034c6:	00b3      	lsls	r3, r6, #2
 80034c8:	58eb      	ldr	r3, [r5, r3]
 80034ca:	4798      	blx	r3
 80034cc:	3601      	adds	r6, #1
 80034ce:	e7f2      	b.n	80034b6 <__libc_init_array+0x1e>
 80034d0:	08003de4 	.word	0x08003de4
 80034d4:	08003de4 	.word	0x08003de4
 80034d8:	08003de4 	.word	0x08003de4
 80034dc:	08003de8 	.word	0x08003de8

080034e0 <memset>:
 80034e0:	0003      	movs	r3, r0
 80034e2:	1812      	adds	r2, r2, r0
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d100      	bne.n	80034ea <memset+0xa>
 80034e8:	4770      	bx	lr
 80034ea:	7019      	strb	r1, [r3, #0]
 80034ec:	3301      	adds	r3, #1
 80034ee:	e7f9      	b.n	80034e4 <memset+0x4>

080034f0 <siprintf>:
 80034f0:	b40e      	push	{r1, r2, r3}
 80034f2:	b500      	push	{lr}
 80034f4:	490b      	ldr	r1, [pc, #44]	; (8003524 <siprintf+0x34>)
 80034f6:	b09c      	sub	sp, #112	; 0x70
 80034f8:	ab1d      	add	r3, sp, #116	; 0x74
 80034fa:	9002      	str	r0, [sp, #8]
 80034fc:	9006      	str	r0, [sp, #24]
 80034fe:	9107      	str	r1, [sp, #28]
 8003500:	9104      	str	r1, [sp, #16]
 8003502:	4809      	ldr	r0, [pc, #36]	; (8003528 <siprintf+0x38>)
 8003504:	4909      	ldr	r1, [pc, #36]	; (800352c <siprintf+0x3c>)
 8003506:	cb04      	ldmia	r3!, {r2}
 8003508:	9105      	str	r1, [sp, #20]
 800350a:	6800      	ldr	r0, [r0, #0]
 800350c:	a902      	add	r1, sp, #8
 800350e:	9301      	str	r3, [sp, #4]
 8003510:	f000 f870 	bl	80035f4 <_svfiprintf_r>
 8003514:	2300      	movs	r3, #0
 8003516:	9a02      	ldr	r2, [sp, #8]
 8003518:	7013      	strb	r3, [r2, #0]
 800351a:	b01c      	add	sp, #112	; 0x70
 800351c:	bc08      	pop	{r3}
 800351e:	b003      	add	sp, #12
 8003520:	4718      	bx	r3
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	7fffffff 	.word	0x7fffffff
 8003528:	2000000c 	.word	0x2000000c
 800352c:	ffff0208 	.word	0xffff0208

08003530 <__ssputs_r>:
 8003530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003532:	688e      	ldr	r6, [r1, #8]
 8003534:	b085      	sub	sp, #20
 8003536:	0007      	movs	r7, r0
 8003538:	000c      	movs	r4, r1
 800353a:	9203      	str	r2, [sp, #12]
 800353c:	9301      	str	r3, [sp, #4]
 800353e:	429e      	cmp	r6, r3
 8003540:	d83c      	bhi.n	80035bc <__ssputs_r+0x8c>
 8003542:	2390      	movs	r3, #144	; 0x90
 8003544:	898a      	ldrh	r2, [r1, #12]
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	421a      	tst	r2, r3
 800354a:	d034      	beq.n	80035b6 <__ssputs_r+0x86>
 800354c:	2503      	movs	r5, #3
 800354e:	6909      	ldr	r1, [r1, #16]
 8003550:	6823      	ldr	r3, [r4, #0]
 8003552:	1a5b      	subs	r3, r3, r1
 8003554:	9302      	str	r3, [sp, #8]
 8003556:	6963      	ldr	r3, [r4, #20]
 8003558:	9802      	ldr	r0, [sp, #8]
 800355a:	435d      	muls	r5, r3
 800355c:	0feb      	lsrs	r3, r5, #31
 800355e:	195d      	adds	r5, r3, r5
 8003560:	9b01      	ldr	r3, [sp, #4]
 8003562:	106d      	asrs	r5, r5, #1
 8003564:	3301      	adds	r3, #1
 8003566:	181b      	adds	r3, r3, r0
 8003568:	42ab      	cmp	r3, r5
 800356a:	d900      	bls.n	800356e <__ssputs_r+0x3e>
 800356c:	001d      	movs	r5, r3
 800356e:	0553      	lsls	r3, r2, #21
 8003570:	d532      	bpl.n	80035d8 <__ssputs_r+0xa8>
 8003572:	0029      	movs	r1, r5
 8003574:	0038      	movs	r0, r7
 8003576:	f000 fb23 	bl	8003bc0 <_malloc_r>
 800357a:	1e06      	subs	r6, r0, #0
 800357c:	d109      	bne.n	8003592 <__ssputs_r+0x62>
 800357e:	230c      	movs	r3, #12
 8003580:	603b      	str	r3, [r7, #0]
 8003582:	2340      	movs	r3, #64	; 0x40
 8003584:	2001      	movs	r0, #1
 8003586:	89a2      	ldrh	r2, [r4, #12]
 8003588:	4240      	negs	r0, r0
 800358a:	4313      	orrs	r3, r2
 800358c:	81a3      	strh	r3, [r4, #12]
 800358e:	b005      	add	sp, #20
 8003590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003592:	9a02      	ldr	r2, [sp, #8]
 8003594:	6921      	ldr	r1, [r4, #16]
 8003596:	f000 faac 	bl	8003af2 <memcpy>
 800359a:	89a3      	ldrh	r3, [r4, #12]
 800359c:	4a14      	ldr	r2, [pc, #80]	; (80035f0 <__ssputs_r+0xc0>)
 800359e:	401a      	ands	r2, r3
 80035a0:	2380      	movs	r3, #128	; 0x80
 80035a2:	4313      	orrs	r3, r2
 80035a4:	81a3      	strh	r3, [r4, #12]
 80035a6:	9b02      	ldr	r3, [sp, #8]
 80035a8:	6126      	str	r6, [r4, #16]
 80035aa:	18f6      	adds	r6, r6, r3
 80035ac:	6026      	str	r6, [r4, #0]
 80035ae:	6165      	str	r5, [r4, #20]
 80035b0:	9e01      	ldr	r6, [sp, #4]
 80035b2:	1aed      	subs	r5, r5, r3
 80035b4:	60a5      	str	r5, [r4, #8]
 80035b6:	9b01      	ldr	r3, [sp, #4]
 80035b8:	429e      	cmp	r6, r3
 80035ba:	d900      	bls.n	80035be <__ssputs_r+0x8e>
 80035bc:	9e01      	ldr	r6, [sp, #4]
 80035be:	0032      	movs	r2, r6
 80035c0:	9903      	ldr	r1, [sp, #12]
 80035c2:	6820      	ldr	r0, [r4, #0]
 80035c4:	f000 fa9e 	bl	8003b04 <memmove>
 80035c8:	68a3      	ldr	r3, [r4, #8]
 80035ca:	2000      	movs	r0, #0
 80035cc:	1b9b      	subs	r3, r3, r6
 80035ce:	60a3      	str	r3, [r4, #8]
 80035d0:	6823      	ldr	r3, [r4, #0]
 80035d2:	199e      	adds	r6, r3, r6
 80035d4:	6026      	str	r6, [r4, #0]
 80035d6:	e7da      	b.n	800358e <__ssputs_r+0x5e>
 80035d8:	002a      	movs	r2, r5
 80035da:	0038      	movs	r0, r7
 80035dc:	f000 fb4e 	bl	8003c7c <_realloc_r>
 80035e0:	1e06      	subs	r6, r0, #0
 80035e2:	d1e0      	bne.n	80035a6 <__ssputs_r+0x76>
 80035e4:	6921      	ldr	r1, [r4, #16]
 80035e6:	0038      	movs	r0, r7
 80035e8:	f000 faa0 	bl	8003b2c <_free_r>
 80035ec:	e7c7      	b.n	800357e <__ssputs_r+0x4e>
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	fffffb7f 	.word	0xfffffb7f

080035f4 <_svfiprintf_r>:
 80035f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035f6:	b0a1      	sub	sp, #132	; 0x84
 80035f8:	9003      	str	r0, [sp, #12]
 80035fa:	001d      	movs	r5, r3
 80035fc:	898b      	ldrh	r3, [r1, #12]
 80035fe:	000f      	movs	r7, r1
 8003600:	0016      	movs	r6, r2
 8003602:	061b      	lsls	r3, r3, #24
 8003604:	d511      	bpl.n	800362a <_svfiprintf_r+0x36>
 8003606:	690b      	ldr	r3, [r1, #16]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10e      	bne.n	800362a <_svfiprintf_r+0x36>
 800360c:	2140      	movs	r1, #64	; 0x40
 800360e:	f000 fad7 	bl	8003bc0 <_malloc_r>
 8003612:	6038      	str	r0, [r7, #0]
 8003614:	6138      	str	r0, [r7, #16]
 8003616:	2800      	cmp	r0, #0
 8003618:	d105      	bne.n	8003626 <_svfiprintf_r+0x32>
 800361a:	230c      	movs	r3, #12
 800361c:	9a03      	ldr	r2, [sp, #12]
 800361e:	3801      	subs	r0, #1
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	b021      	add	sp, #132	; 0x84
 8003624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003626:	2340      	movs	r3, #64	; 0x40
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	2300      	movs	r3, #0
 800362c:	ac08      	add	r4, sp, #32
 800362e:	6163      	str	r3, [r4, #20]
 8003630:	3320      	adds	r3, #32
 8003632:	7663      	strb	r3, [r4, #25]
 8003634:	3310      	adds	r3, #16
 8003636:	76a3      	strb	r3, [r4, #26]
 8003638:	9507      	str	r5, [sp, #28]
 800363a:	0035      	movs	r5, r6
 800363c:	782b      	ldrb	r3, [r5, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <_svfiprintf_r+0x52>
 8003642:	2b25      	cmp	r3, #37	; 0x25
 8003644:	d146      	bne.n	80036d4 <_svfiprintf_r+0xe0>
 8003646:	1bab      	subs	r3, r5, r6
 8003648:	9305      	str	r3, [sp, #20]
 800364a:	d00c      	beq.n	8003666 <_svfiprintf_r+0x72>
 800364c:	0032      	movs	r2, r6
 800364e:	0039      	movs	r1, r7
 8003650:	9803      	ldr	r0, [sp, #12]
 8003652:	f7ff ff6d 	bl	8003530 <__ssputs_r>
 8003656:	1c43      	adds	r3, r0, #1
 8003658:	d100      	bne.n	800365c <_svfiprintf_r+0x68>
 800365a:	e0ae      	b.n	80037ba <_svfiprintf_r+0x1c6>
 800365c:	6962      	ldr	r2, [r4, #20]
 800365e:	9b05      	ldr	r3, [sp, #20]
 8003660:	4694      	mov	ip, r2
 8003662:	4463      	add	r3, ip
 8003664:	6163      	str	r3, [r4, #20]
 8003666:	782b      	ldrb	r3, [r5, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d100      	bne.n	800366e <_svfiprintf_r+0x7a>
 800366c:	e0a5      	b.n	80037ba <_svfiprintf_r+0x1c6>
 800366e:	2201      	movs	r2, #1
 8003670:	2300      	movs	r3, #0
 8003672:	4252      	negs	r2, r2
 8003674:	6062      	str	r2, [r4, #4]
 8003676:	a904      	add	r1, sp, #16
 8003678:	3254      	adds	r2, #84	; 0x54
 800367a:	1852      	adds	r2, r2, r1
 800367c:	1c6e      	adds	r6, r5, #1
 800367e:	6023      	str	r3, [r4, #0]
 8003680:	60e3      	str	r3, [r4, #12]
 8003682:	60a3      	str	r3, [r4, #8]
 8003684:	7013      	strb	r3, [r2, #0]
 8003686:	65a3      	str	r3, [r4, #88]	; 0x58
 8003688:	7831      	ldrb	r1, [r6, #0]
 800368a:	2205      	movs	r2, #5
 800368c:	4853      	ldr	r0, [pc, #332]	; (80037dc <_svfiprintf_r+0x1e8>)
 800368e:	f000 fa25 	bl	8003adc <memchr>
 8003692:	1c75      	adds	r5, r6, #1
 8003694:	2800      	cmp	r0, #0
 8003696:	d11f      	bne.n	80036d8 <_svfiprintf_r+0xe4>
 8003698:	6822      	ldr	r2, [r4, #0]
 800369a:	06d3      	lsls	r3, r2, #27
 800369c:	d504      	bpl.n	80036a8 <_svfiprintf_r+0xb4>
 800369e:	2353      	movs	r3, #83	; 0x53
 80036a0:	a904      	add	r1, sp, #16
 80036a2:	185b      	adds	r3, r3, r1
 80036a4:	2120      	movs	r1, #32
 80036a6:	7019      	strb	r1, [r3, #0]
 80036a8:	0713      	lsls	r3, r2, #28
 80036aa:	d504      	bpl.n	80036b6 <_svfiprintf_r+0xc2>
 80036ac:	2353      	movs	r3, #83	; 0x53
 80036ae:	a904      	add	r1, sp, #16
 80036b0:	185b      	adds	r3, r3, r1
 80036b2:	212b      	movs	r1, #43	; 0x2b
 80036b4:	7019      	strb	r1, [r3, #0]
 80036b6:	7833      	ldrb	r3, [r6, #0]
 80036b8:	2b2a      	cmp	r3, #42	; 0x2a
 80036ba:	d016      	beq.n	80036ea <_svfiprintf_r+0xf6>
 80036bc:	0035      	movs	r5, r6
 80036be:	2100      	movs	r1, #0
 80036c0:	200a      	movs	r0, #10
 80036c2:	68e3      	ldr	r3, [r4, #12]
 80036c4:	782a      	ldrb	r2, [r5, #0]
 80036c6:	1c6e      	adds	r6, r5, #1
 80036c8:	3a30      	subs	r2, #48	; 0x30
 80036ca:	2a09      	cmp	r2, #9
 80036cc:	d94e      	bls.n	800376c <_svfiprintf_r+0x178>
 80036ce:	2900      	cmp	r1, #0
 80036d0:	d018      	beq.n	8003704 <_svfiprintf_r+0x110>
 80036d2:	e010      	b.n	80036f6 <_svfiprintf_r+0x102>
 80036d4:	3501      	adds	r5, #1
 80036d6:	e7b1      	b.n	800363c <_svfiprintf_r+0x48>
 80036d8:	4b40      	ldr	r3, [pc, #256]	; (80037dc <_svfiprintf_r+0x1e8>)
 80036da:	6822      	ldr	r2, [r4, #0]
 80036dc:	1ac0      	subs	r0, r0, r3
 80036de:	2301      	movs	r3, #1
 80036e0:	4083      	lsls	r3, r0
 80036e2:	4313      	orrs	r3, r2
 80036e4:	6023      	str	r3, [r4, #0]
 80036e6:	002e      	movs	r6, r5
 80036e8:	e7ce      	b.n	8003688 <_svfiprintf_r+0x94>
 80036ea:	9b07      	ldr	r3, [sp, #28]
 80036ec:	1d19      	adds	r1, r3, #4
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	9107      	str	r1, [sp, #28]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	db01      	blt.n	80036fa <_svfiprintf_r+0x106>
 80036f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80036f8:	e004      	b.n	8003704 <_svfiprintf_r+0x110>
 80036fa:	425b      	negs	r3, r3
 80036fc:	60e3      	str	r3, [r4, #12]
 80036fe:	2302      	movs	r3, #2
 8003700:	4313      	orrs	r3, r2
 8003702:	6023      	str	r3, [r4, #0]
 8003704:	782b      	ldrb	r3, [r5, #0]
 8003706:	2b2e      	cmp	r3, #46	; 0x2e
 8003708:	d10a      	bne.n	8003720 <_svfiprintf_r+0x12c>
 800370a:	786b      	ldrb	r3, [r5, #1]
 800370c:	2b2a      	cmp	r3, #42	; 0x2a
 800370e:	d135      	bne.n	800377c <_svfiprintf_r+0x188>
 8003710:	9b07      	ldr	r3, [sp, #28]
 8003712:	3502      	adds	r5, #2
 8003714:	1d1a      	adds	r2, r3, #4
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	9207      	str	r2, [sp, #28]
 800371a:	2b00      	cmp	r3, #0
 800371c:	db2b      	blt.n	8003776 <_svfiprintf_r+0x182>
 800371e:	9309      	str	r3, [sp, #36]	; 0x24
 8003720:	4e2f      	ldr	r6, [pc, #188]	; (80037e0 <_svfiprintf_r+0x1ec>)
 8003722:	7829      	ldrb	r1, [r5, #0]
 8003724:	2203      	movs	r2, #3
 8003726:	0030      	movs	r0, r6
 8003728:	f000 f9d8 	bl	8003adc <memchr>
 800372c:	2800      	cmp	r0, #0
 800372e:	d006      	beq.n	800373e <_svfiprintf_r+0x14a>
 8003730:	2340      	movs	r3, #64	; 0x40
 8003732:	1b80      	subs	r0, r0, r6
 8003734:	4083      	lsls	r3, r0
 8003736:	6822      	ldr	r2, [r4, #0]
 8003738:	3501      	adds	r5, #1
 800373a:	4313      	orrs	r3, r2
 800373c:	6023      	str	r3, [r4, #0]
 800373e:	7829      	ldrb	r1, [r5, #0]
 8003740:	2206      	movs	r2, #6
 8003742:	4828      	ldr	r0, [pc, #160]	; (80037e4 <_svfiprintf_r+0x1f0>)
 8003744:	1c6e      	adds	r6, r5, #1
 8003746:	7621      	strb	r1, [r4, #24]
 8003748:	f000 f9c8 	bl	8003adc <memchr>
 800374c:	2800      	cmp	r0, #0
 800374e:	d03c      	beq.n	80037ca <_svfiprintf_r+0x1d6>
 8003750:	4b25      	ldr	r3, [pc, #148]	; (80037e8 <_svfiprintf_r+0x1f4>)
 8003752:	2b00      	cmp	r3, #0
 8003754:	d125      	bne.n	80037a2 <_svfiprintf_r+0x1ae>
 8003756:	2207      	movs	r2, #7
 8003758:	9b07      	ldr	r3, [sp, #28]
 800375a:	3307      	adds	r3, #7
 800375c:	4393      	bics	r3, r2
 800375e:	3308      	adds	r3, #8
 8003760:	9307      	str	r3, [sp, #28]
 8003762:	6963      	ldr	r3, [r4, #20]
 8003764:	9a04      	ldr	r2, [sp, #16]
 8003766:	189b      	adds	r3, r3, r2
 8003768:	6163      	str	r3, [r4, #20]
 800376a:	e766      	b.n	800363a <_svfiprintf_r+0x46>
 800376c:	4343      	muls	r3, r0
 800376e:	2101      	movs	r1, #1
 8003770:	189b      	adds	r3, r3, r2
 8003772:	0035      	movs	r5, r6
 8003774:	e7a6      	b.n	80036c4 <_svfiprintf_r+0xd0>
 8003776:	2301      	movs	r3, #1
 8003778:	425b      	negs	r3, r3
 800377a:	e7d0      	b.n	800371e <_svfiprintf_r+0x12a>
 800377c:	2300      	movs	r3, #0
 800377e:	200a      	movs	r0, #10
 8003780:	001a      	movs	r2, r3
 8003782:	3501      	adds	r5, #1
 8003784:	6063      	str	r3, [r4, #4]
 8003786:	7829      	ldrb	r1, [r5, #0]
 8003788:	1c6e      	adds	r6, r5, #1
 800378a:	3930      	subs	r1, #48	; 0x30
 800378c:	2909      	cmp	r1, #9
 800378e:	d903      	bls.n	8003798 <_svfiprintf_r+0x1a4>
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0c5      	beq.n	8003720 <_svfiprintf_r+0x12c>
 8003794:	9209      	str	r2, [sp, #36]	; 0x24
 8003796:	e7c3      	b.n	8003720 <_svfiprintf_r+0x12c>
 8003798:	4342      	muls	r2, r0
 800379a:	2301      	movs	r3, #1
 800379c:	1852      	adds	r2, r2, r1
 800379e:	0035      	movs	r5, r6
 80037a0:	e7f1      	b.n	8003786 <_svfiprintf_r+0x192>
 80037a2:	ab07      	add	r3, sp, #28
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	003a      	movs	r2, r7
 80037a8:	4b10      	ldr	r3, [pc, #64]	; (80037ec <_svfiprintf_r+0x1f8>)
 80037aa:	0021      	movs	r1, r4
 80037ac:	9803      	ldr	r0, [sp, #12]
 80037ae:	e000      	b.n	80037b2 <_svfiprintf_r+0x1be>
 80037b0:	bf00      	nop
 80037b2:	9004      	str	r0, [sp, #16]
 80037b4:	9b04      	ldr	r3, [sp, #16]
 80037b6:	3301      	adds	r3, #1
 80037b8:	d1d3      	bne.n	8003762 <_svfiprintf_r+0x16e>
 80037ba:	89bb      	ldrh	r3, [r7, #12]
 80037bc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80037be:	065b      	lsls	r3, r3, #25
 80037c0:	d400      	bmi.n	80037c4 <_svfiprintf_r+0x1d0>
 80037c2:	e72e      	b.n	8003622 <_svfiprintf_r+0x2e>
 80037c4:	2001      	movs	r0, #1
 80037c6:	4240      	negs	r0, r0
 80037c8:	e72b      	b.n	8003622 <_svfiprintf_r+0x2e>
 80037ca:	ab07      	add	r3, sp, #28
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	003a      	movs	r2, r7
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <_svfiprintf_r+0x1f8>)
 80037d2:	0021      	movs	r1, r4
 80037d4:	9803      	ldr	r0, [sp, #12]
 80037d6:	f000 f879 	bl	80038cc <_printf_i>
 80037da:	e7ea      	b.n	80037b2 <_svfiprintf_r+0x1be>
 80037dc:	08003db0 	.word	0x08003db0
 80037e0:	08003db6 	.word	0x08003db6
 80037e4:	08003dba 	.word	0x08003dba
 80037e8:	00000000 	.word	0x00000000
 80037ec:	08003531 	.word	0x08003531

080037f0 <_printf_common>:
 80037f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037f2:	0015      	movs	r5, r2
 80037f4:	9301      	str	r3, [sp, #4]
 80037f6:	688a      	ldr	r2, [r1, #8]
 80037f8:	690b      	ldr	r3, [r1, #16]
 80037fa:	9000      	str	r0, [sp, #0]
 80037fc:	000c      	movs	r4, r1
 80037fe:	4293      	cmp	r3, r2
 8003800:	da00      	bge.n	8003804 <_printf_common+0x14>
 8003802:	0013      	movs	r3, r2
 8003804:	0022      	movs	r2, r4
 8003806:	602b      	str	r3, [r5, #0]
 8003808:	3243      	adds	r2, #67	; 0x43
 800380a:	7812      	ldrb	r2, [r2, #0]
 800380c:	2a00      	cmp	r2, #0
 800380e:	d001      	beq.n	8003814 <_printf_common+0x24>
 8003810:	3301      	adds	r3, #1
 8003812:	602b      	str	r3, [r5, #0]
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	069b      	lsls	r3, r3, #26
 8003818:	d502      	bpl.n	8003820 <_printf_common+0x30>
 800381a:	682b      	ldr	r3, [r5, #0]
 800381c:	3302      	adds	r3, #2
 800381e:	602b      	str	r3, [r5, #0]
 8003820:	2706      	movs	r7, #6
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	401f      	ands	r7, r3
 8003826:	d027      	beq.n	8003878 <_printf_common+0x88>
 8003828:	0023      	movs	r3, r4
 800382a:	3343      	adds	r3, #67	; 0x43
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	1e5a      	subs	r2, r3, #1
 8003830:	4193      	sbcs	r3, r2
 8003832:	6822      	ldr	r2, [r4, #0]
 8003834:	0692      	lsls	r2, r2, #26
 8003836:	d430      	bmi.n	800389a <_printf_common+0xaa>
 8003838:	0022      	movs	r2, r4
 800383a:	9901      	ldr	r1, [sp, #4]
 800383c:	3243      	adds	r2, #67	; 0x43
 800383e:	9800      	ldr	r0, [sp, #0]
 8003840:	9e08      	ldr	r6, [sp, #32]
 8003842:	47b0      	blx	r6
 8003844:	1c43      	adds	r3, r0, #1
 8003846:	d025      	beq.n	8003894 <_printf_common+0xa4>
 8003848:	2306      	movs	r3, #6
 800384a:	6820      	ldr	r0, [r4, #0]
 800384c:	682a      	ldr	r2, [r5, #0]
 800384e:	68e1      	ldr	r1, [r4, #12]
 8003850:	4003      	ands	r3, r0
 8003852:	2500      	movs	r5, #0
 8003854:	2b04      	cmp	r3, #4
 8003856:	d103      	bne.n	8003860 <_printf_common+0x70>
 8003858:	1a8d      	subs	r5, r1, r2
 800385a:	43eb      	mvns	r3, r5
 800385c:	17db      	asrs	r3, r3, #31
 800385e:	401d      	ands	r5, r3
 8003860:	68a3      	ldr	r3, [r4, #8]
 8003862:	6922      	ldr	r2, [r4, #16]
 8003864:	4293      	cmp	r3, r2
 8003866:	dd01      	ble.n	800386c <_printf_common+0x7c>
 8003868:	1a9b      	subs	r3, r3, r2
 800386a:	18ed      	adds	r5, r5, r3
 800386c:	2700      	movs	r7, #0
 800386e:	42bd      	cmp	r5, r7
 8003870:	d120      	bne.n	80038b4 <_printf_common+0xc4>
 8003872:	2000      	movs	r0, #0
 8003874:	e010      	b.n	8003898 <_printf_common+0xa8>
 8003876:	3701      	adds	r7, #1
 8003878:	68e3      	ldr	r3, [r4, #12]
 800387a:	682a      	ldr	r2, [r5, #0]
 800387c:	1a9b      	subs	r3, r3, r2
 800387e:	42bb      	cmp	r3, r7
 8003880:	ddd2      	ble.n	8003828 <_printf_common+0x38>
 8003882:	0022      	movs	r2, r4
 8003884:	2301      	movs	r3, #1
 8003886:	3219      	adds	r2, #25
 8003888:	9901      	ldr	r1, [sp, #4]
 800388a:	9800      	ldr	r0, [sp, #0]
 800388c:	9e08      	ldr	r6, [sp, #32]
 800388e:	47b0      	blx	r6
 8003890:	1c43      	adds	r3, r0, #1
 8003892:	d1f0      	bne.n	8003876 <_printf_common+0x86>
 8003894:	2001      	movs	r0, #1
 8003896:	4240      	negs	r0, r0
 8003898:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800389a:	2030      	movs	r0, #48	; 0x30
 800389c:	18e1      	adds	r1, r4, r3
 800389e:	3143      	adds	r1, #67	; 0x43
 80038a0:	7008      	strb	r0, [r1, #0]
 80038a2:	0021      	movs	r1, r4
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	3145      	adds	r1, #69	; 0x45
 80038a8:	7809      	ldrb	r1, [r1, #0]
 80038aa:	18a2      	adds	r2, r4, r2
 80038ac:	3243      	adds	r2, #67	; 0x43
 80038ae:	3302      	adds	r3, #2
 80038b0:	7011      	strb	r1, [r2, #0]
 80038b2:	e7c1      	b.n	8003838 <_printf_common+0x48>
 80038b4:	0022      	movs	r2, r4
 80038b6:	2301      	movs	r3, #1
 80038b8:	321a      	adds	r2, #26
 80038ba:	9901      	ldr	r1, [sp, #4]
 80038bc:	9800      	ldr	r0, [sp, #0]
 80038be:	9e08      	ldr	r6, [sp, #32]
 80038c0:	47b0      	blx	r6
 80038c2:	1c43      	adds	r3, r0, #1
 80038c4:	d0e6      	beq.n	8003894 <_printf_common+0xa4>
 80038c6:	3701      	adds	r7, #1
 80038c8:	e7d1      	b.n	800386e <_printf_common+0x7e>
	...

080038cc <_printf_i>:
 80038cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ce:	b089      	sub	sp, #36	; 0x24
 80038d0:	9204      	str	r2, [sp, #16]
 80038d2:	000a      	movs	r2, r1
 80038d4:	3243      	adds	r2, #67	; 0x43
 80038d6:	9305      	str	r3, [sp, #20]
 80038d8:	9003      	str	r0, [sp, #12]
 80038da:	9202      	str	r2, [sp, #8]
 80038dc:	7e0a      	ldrb	r2, [r1, #24]
 80038de:	000c      	movs	r4, r1
 80038e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038e2:	2a6e      	cmp	r2, #110	; 0x6e
 80038e4:	d100      	bne.n	80038e8 <_printf_i+0x1c>
 80038e6:	e086      	b.n	80039f6 <_printf_i+0x12a>
 80038e8:	d81f      	bhi.n	800392a <_printf_i+0x5e>
 80038ea:	2a63      	cmp	r2, #99	; 0x63
 80038ec:	d033      	beq.n	8003956 <_printf_i+0x8a>
 80038ee:	d808      	bhi.n	8003902 <_printf_i+0x36>
 80038f0:	2a00      	cmp	r2, #0
 80038f2:	d100      	bne.n	80038f6 <_printf_i+0x2a>
 80038f4:	e08c      	b.n	8003a10 <_printf_i+0x144>
 80038f6:	2a58      	cmp	r2, #88	; 0x58
 80038f8:	d04d      	beq.n	8003996 <_printf_i+0xca>
 80038fa:	0025      	movs	r5, r4
 80038fc:	3542      	adds	r5, #66	; 0x42
 80038fe:	702a      	strb	r2, [r5, #0]
 8003900:	e030      	b.n	8003964 <_printf_i+0x98>
 8003902:	2a64      	cmp	r2, #100	; 0x64
 8003904:	d001      	beq.n	800390a <_printf_i+0x3e>
 8003906:	2a69      	cmp	r2, #105	; 0x69
 8003908:	d1f7      	bne.n	80038fa <_printf_i+0x2e>
 800390a:	6819      	ldr	r1, [r3, #0]
 800390c:	6825      	ldr	r5, [r4, #0]
 800390e:	1d0a      	adds	r2, r1, #4
 8003910:	0628      	lsls	r0, r5, #24
 8003912:	d529      	bpl.n	8003968 <_printf_i+0x9c>
 8003914:	6808      	ldr	r0, [r1, #0]
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	2800      	cmp	r0, #0
 800391a:	da03      	bge.n	8003924 <_printf_i+0x58>
 800391c:	232d      	movs	r3, #45	; 0x2d
 800391e:	9a02      	ldr	r2, [sp, #8]
 8003920:	4240      	negs	r0, r0
 8003922:	7013      	strb	r3, [r2, #0]
 8003924:	4e6b      	ldr	r6, [pc, #428]	; (8003ad4 <_printf_i+0x208>)
 8003926:	270a      	movs	r7, #10
 8003928:	e04f      	b.n	80039ca <_printf_i+0xfe>
 800392a:	2a73      	cmp	r2, #115	; 0x73
 800392c:	d074      	beq.n	8003a18 <_printf_i+0x14c>
 800392e:	d808      	bhi.n	8003942 <_printf_i+0x76>
 8003930:	2a6f      	cmp	r2, #111	; 0x6f
 8003932:	d01f      	beq.n	8003974 <_printf_i+0xa8>
 8003934:	2a70      	cmp	r2, #112	; 0x70
 8003936:	d1e0      	bne.n	80038fa <_printf_i+0x2e>
 8003938:	2220      	movs	r2, #32
 800393a:	6809      	ldr	r1, [r1, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	6022      	str	r2, [r4, #0]
 8003940:	e003      	b.n	800394a <_printf_i+0x7e>
 8003942:	2a75      	cmp	r2, #117	; 0x75
 8003944:	d016      	beq.n	8003974 <_printf_i+0xa8>
 8003946:	2a78      	cmp	r2, #120	; 0x78
 8003948:	d1d7      	bne.n	80038fa <_printf_i+0x2e>
 800394a:	0022      	movs	r2, r4
 800394c:	2178      	movs	r1, #120	; 0x78
 800394e:	3245      	adds	r2, #69	; 0x45
 8003950:	7011      	strb	r1, [r2, #0]
 8003952:	4e61      	ldr	r6, [pc, #388]	; (8003ad8 <_printf_i+0x20c>)
 8003954:	e022      	b.n	800399c <_printf_i+0xd0>
 8003956:	0025      	movs	r5, r4
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	3542      	adds	r5, #66	; 0x42
 800395c:	1d11      	adds	r1, r2, #4
 800395e:	6019      	str	r1, [r3, #0]
 8003960:	6813      	ldr	r3, [r2, #0]
 8003962:	702b      	strb	r3, [r5, #0]
 8003964:	2301      	movs	r3, #1
 8003966:	e065      	b.n	8003a34 <_printf_i+0x168>
 8003968:	6808      	ldr	r0, [r1, #0]
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	0669      	lsls	r1, r5, #25
 800396e:	d5d3      	bpl.n	8003918 <_printf_i+0x4c>
 8003970:	b200      	sxth	r0, r0
 8003972:	e7d1      	b.n	8003918 <_printf_i+0x4c>
 8003974:	6819      	ldr	r1, [r3, #0]
 8003976:	6825      	ldr	r5, [r4, #0]
 8003978:	1d08      	adds	r0, r1, #4
 800397a:	6018      	str	r0, [r3, #0]
 800397c:	6808      	ldr	r0, [r1, #0]
 800397e:	062e      	lsls	r6, r5, #24
 8003980:	d505      	bpl.n	800398e <_printf_i+0xc2>
 8003982:	4e54      	ldr	r6, [pc, #336]	; (8003ad4 <_printf_i+0x208>)
 8003984:	2708      	movs	r7, #8
 8003986:	2a6f      	cmp	r2, #111	; 0x6f
 8003988:	d01b      	beq.n	80039c2 <_printf_i+0xf6>
 800398a:	270a      	movs	r7, #10
 800398c:	e019      	b.n	80039c2 <_printf_i+0xf6>
 800398e:	066d      	lsls	r5, r5, #25
 8003990:	d5f7      	bpl.n	8003982 <_printf_i+0xb6>
 8003992:	b280      	uxth	r0, r0
 8003994:	e7f5      	b.n	8003982 <_printf_i+0xb6>
 8003996:	3145      	adds	r1, #69	; 0x45
 8003998:	4e4e      	ldr	r6, [pc, #312]	; (8003ad4 <_printf_i+0x208>)
 800399a:	700a      	strb	r2, [r1, #0]
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	6822      	ldr	r2, [r4, #0]
 80039a0:	1d01      	adds	r1, r0, #4
 80039a2:	6800      	ldr	r0, [r0, #0]
 80039a4:	6019      	str	r1, [r3, #0]
 80039a6:	0615      	lsls	r5, r2, #24
 80039a8:	d521      	bpl.n	80039ee <_printf_i+0x122>
 80039aa:	07d3      	lsls	r3, r2, #31
 80039ac:	d502      	bpl.n	80039b4 <_printf_i+0xe8>
 80039ae:	2320      	movs	r3, #32
 80039b0:	431a      	orrs	r2, r3
 80039b2:	6022      	str	r2, [r4, #0]
 80039b4:	2710      	movs	r7, #16
 80039b6:	2800      	cmp	r0, #0
 80039b8:	d103      	bne.n	80039c2 <_printf_i+0xf6>
 80039ba:	2320      	movs	r3, #32
 80039bc:	6822      	ldr	r2, [r4, #0]
 80039be:	439a      	bics	r2, r3
 80039c0:	6022      	str	r2, [r4, #0]
 80039c2:	0023      	movs	r3, r4
 80039c4:	2200      	movs	r2, #0
 80039c6:	3343      	adds	r3, #67	; 0x43
 80039c8:	701a      	strb	r2, [r3, #0]
 80039ca:	6863      	ldr	r3, [r4, #4]
 80039cc:	60a3      	str	r3, [r4, #8]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	db58      	blt.n	8003a84 <_printf_i+0x1b8>
 80039d2:	2204      	movs	r2, #4
 80039d4:	6821      	ldr	r1, [r4, #0]
 80039d6:	4391      	bics	r1, r2
 80039d8:	6021      	str	r1, [r4, #0]
 80039da:	2800      	cmp	r0, #0
 80039dc:	d154      	bne.n	8003a88 <_printf_i+0x1bc>
 80039de:	9d02      	ldr	r5, [sp, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d05a      	beq.n	8003a9a <_printf_i+0x1ce>
 80039e4:	0025      	movs	r5, r4
 80039e6:	7833      	ldrb	r3, [r6, #0]
 80039e8:	3542      	adds	r5, #66	; 0x42
 80039ea:	702b      	strb	r3, [r5, #0]
 80039ec:	e055      	b.n	8003a9a <_printf_i+0x1ce>
 80039ee:	0655      	lsls	r5, r2, #25
 80039f0:	d5db      	bpl.n	80039aa <_printf_i+0xde>
 80039f2:	b280      	uxth	r0, r0
 80039f4:	e7d9      	b.n	80039aa <_printf_i+0xde>
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	680d      	ldr	r5, [r1, #0]
 80039fa:	1d10      	adds	r0, r2, #4
 80039fc:	6949      	ldr	r1, [r1, #20]
 80039fe:	6018      	str	r0, [r3, #0]
 8003a00:	6813      	ldr	r3, [r2, #0]
 8003a02:	062e      	lsls	r6, r5, #24
 8003a04:	d501      	bpl.n	8003a0a <_printf_i+0x13e>
 8003a06:	6019      	str	r1, [r3, #0]
 8003a08:	e002      	b.n	8003a10 <_printf_i+0x144>
 8003a0a:	066d      	lsls	r5, r5, #25
 8003a0c:	d5fb      	bpl.n	8003a06 <_printf_i+0x13a>
 8003a0e:	8019      	strh	r1, [r3, #0]
 8003a10:	2300      	movs	r3, #0
 8003a12:	9d02      	ldr	r5, [sp, #8]
 8003a14:	6123      	str	r3, [r4, #16]
 8003a16:	e04f      	b.n	8003ab8 <_printf_i+0x1ec>
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	1d11      	adds	r1, r2, #4
 8003a1c:	6019      	str	r1, [r3, #0]
 8003a1e:	6815      	ldr	r5, [r2, #0]
 8003a20:	2100      	movs	r1, #0
 8003a22:	6862      	ldr	r2, [r4, #4]
 8003a24:	0028      	movs	r0, r5
 8003a26:	f000 f859 	bl	8003adc <memchr>
 8003a2a:	2800      	cmp	r0, #0
 8003a2c:	d001      	beq.n	8003a32 <_printf_i+0x166>
 8003a2e:	1b40      	subs	r0, r0, r5
 8003a30:	6060      	str	r0, [r4, #4]
 8003a32:	6863      	ldr	r3, [r4, #4]
 8003a34:	6123      	str	r3, [r4, #16]
 8003a36:	2300      	movs	r3, #0
 8003a38:	9a02      	ldr	r2, [sp, #8]
 8003a3a:	7013      	strb	r3, [r2, #0]
 8003a3c:	e03c      	b.n	8003ab8 <_printf_i+0x1ec>
 8003a3e:	6923      	ldr	r3, [r4, #16]
 8003a40:	002a      	movs	r2, r5
 8003a42:	9904      	ldr	r1, [sp, #16]
 8003a44:	9803      	ldr	r0, [sp, #12]
 8003a46:	9d05      	ldr	r5, [sp, #20]
 8003a48:	47a8      	blx	r5
 8003a4a:	1c43      	adds	r3, r0, #1
 8003a4c:	d03e      	beq.n	8003acc <_printf_i+0x200>
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	079b      	lsls	r3, r3, #30
 8003a52:	d415      	bmi.n	8003a80 <_printf_i+0x1b4>
 8003a54:	9b07      	ldr	r3, [sp, #28]
 8003a56:	68e0      	ldr	r0, [r4, #12]
 8003a58:	4298      	cmp	r0, r3
 8003a5a:	da39      	bge.n	8003ad0 <_printf_i+0x204>
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	e037      	b.n	8003ad0 <_printf_i+0x204>
 8003a60:	0022      	movs	r2, r4
 8003a62:	2301      	movs	r3, #1
 8003a64:	3219      	adds	r2, #25
 8003a66:	9904      	ldr	r1, [sp, #16]
 8003a68:	9803      	ldr	r0, [sp, #12]
 8003a6a:	9e05      	ldr	r6, [sp, #20]
 8003a6c:	47b0      	blx	r6
 8003a6e:	1c43      	adds	r3, r0, #1
 8003a70:	d02c      	beq.n	8003acc <_printf_i+0x200>
 8003a72:	3501      	adds	r5, #1
 8003a74:	68e3      	ldr	r3, [r4, #12]
 8003a76:	9a07      	ldr	r2, [sp, #28]
 8003a78:	1a9b      	subs	r3, r3, r2
 8003a7a:	42ab      	cmp	r3, r5
 8003a7c:	dcf0      	bgt.n	8003a60 <_printf_i+0x194>
 8003a7e:	e7e9      	b.n	8003a54 <_printf_i+0x188>
 8003a80:	2500      	movs	r5, #0
 8003a82:	e7f7      	b.n	8003a74 <_printf_i+0x1a8>
 8003a84:	2800      	cmp	r0, #0
 8003a86:	d0ad      	beq.n	80039e4 <_printf_i+0x118>
 8003a88:	9d02      	ldr	r5, [sp, #8]
 8003a8a:	0039      	movs	r1, r7
 8003a8c:	f7fc fbc2 	bl	8000214 <__aeabi_uidivmod>
 8003a90:	5c73      	ldrb	r3, [r6, r1]
 8003a92:	3d01      	subs	r5, #1
 8003a94:	702b      	strb	r3, [r5, #0]
 8003a96:	2800      	cmp	r0, #0
 8003a98:	d1f7      	bne.n	8003a8a <_printf_i+0x1be>
 8003a9a:	2f08      	cmp	r7, #8
 8003a9c:	d109      	bne.n	8003ab2 <_printf_i+0x1e6>
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	07db      	lsls	r3, r3, #31
 8003aa2:	d506      	bpl.n	8003ab2 <_printf_i+0x1e6>
 8003aa4:	6863      	ldr	r3, [r4, #4]
 8003aa6:	6922      	ldr	r2, [r4, #16]
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	dc02      	bgt.n	8003ab2 <_printf_i+0x1e6>
 8003aac:	2330      	movs	r3, #48	; 0x30
 8003aae:	3d01      	subs	r5, #1
 8003ab0:	702b      	strb	r3, [r5, #0]
 8003ab2:	9b02      	ldr	r3, [sp, #8]
 8003ab4:	1b5b      	subs	r3, r3, r5
 8003ab6:	6123      	str	r3, [r4, #16]
 8003ab8:	9b05      	ldr	r3, [sp, #20]
 8003aba:	aa07      	add	r2, sp, #28
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	0021      	movs	r1, r4
 8003ac0:	9b04      	ldr	r3, [sp, #16]
 8003ac2:	9803      	ldr	r0, [sp, #12]
 8003ac4:	f7ff fe94 	bl	80037f0 <_printf_common>
 8003ac8:	1c43      	adds	r3, r0, #1
 8003aca:	d1b8      	bne.n	8003a3e <_printf_i+0x172>
 8003acc:	2001      	movs	r0, #1
 8003ace:	4240      	negs	r0, r0
 8003ad0:	b009      	add	sp, #36	; 0x24
 8003ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad4:	08003dc1 	.word	0x08003dc1
 8003ad8:	08003dd2 	.word	0x08003dd2

08003adc <memchr>:
 8003adc:	b2c9      	uxtb	r1, r1
 8003ade:	1882      	adds	r2, r0, r2
 8003ae0:	4290      	cmp	r0, r2
 8003ae2:	d101      	bne.n	8003ae8 <memchr+0xc>
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	4770      	bx	lr
 8003ae8:	7803      	ldrb	r3, [r0, #0]
 8003aea:	428b      	cmp	r3, r1
 8003aec:	d0fb      	beq.n	8003ae6 <memchr+0xa>
 8003aee:	3001      	adds	r0, #1
 8003af0:	e7f6      	b.n	8003ae0 <memchr+0x4>

08003af2 <memcpy>:
 8003af2:	2300      	movs	r3, #0
 8003af4:	b510      	push	{r4, lr}
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d100      	bne.n	8003afc <memcpy+0xa>
 8003afa:	bd10      	pop	{r4, pc}
 8003afc:	5ccc      	ldrb	r4, [r1, r3]
 8003afe:	54c4      	strb	r4, [r0, r3]
 8003b00:	3301      	adds	r3, #1
 8003b02:	e7f8      	b.n	8003af6 <memcpy+0x4>

08003b04 <memmove>:
 8003b04:	b510      	push	{r4, lr}
 8003b06:	4288      	cmp	r0, r1
 8003b08:	d902      	bls.n	8003b10 <memmove+0xc>
 8003b0a:	188b      	adds	r3, r1, r2
 8003b0c:	4298      	cmp	r0, r3
 8003b0e:	d303      	bcc.n	8003b18 <memmove+0x14>
 8003b10:	2300      	movs	r3, #0
 8003b12:	e007      	b.n	8003b24 <memmove+0x20>
 8003b14:	5c8b      	ldrb	r3, [r1, r2]
 8003b16:	5483      	strb	r3, [r0, r2]
 8003b18:	3a01      	subs	r2, #1
 8003b1a:	d2fb      	bcs.n	8003b14 <memmove+0x10>
 8003b1c:	bd10      	pop	{r4, pc}
 8003b1e:	5ccc      	ldrb	r4, [r1, r3]
 8003b20:	54c4      	strb	r4, [r0, r3]
 8003b22:	3301      	adds	r3, #1
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d1fa      	bne.n	8003b1e <memmove+0x1a>
 8003b28:	e7f8      	b.n	8003b1c <memmove+0x18>
	...

08003b2c <_free_r>:
 8003b2c:	b570      	push	{r4, r5, r6, lr}
 8003b2e:	0005      	movs	r5, r0
 8003b30:	2900      	cmp	r1, #0
 8003b32:	d010      	beq.n	8003b56 <_free_r+0x2a>
 8003b34:	1f0c      	subs	r4, r1, #4
 8003b36:	6823      	ldr	r3, [r4, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	da00      	bge.n	8003b3e <_free_r+0x12>
 8003b3c:	18e4      	adds	r4, r4, r3
 8003b3e:	0028      	movs	r0, r5
 8003b40:	f000 f8d4 	bl	8003cec <__malloc_lock>
 8003b44:	4a1d      	ldr	r2, [pc, #116]	; (8003bbc <_free_r+0x90>)
 8003b46:	6813      	ldr	r3, [r2, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d105      	bne.n	8003b58 <_free_r+0x2c>
 8003b4c:	6063      	str	r3, [r4, #4]
 8003b4e:	6014      	str	r4, [r2, #0]
 8003b50:	0028      	movs	r0, r5
 8003b52:	f000 f8cc 	bl	8003cee <__malloc_unlock>
 8003b56:	bd70      	pop	{r4, r5, r6, pc}
 8003b58:	42a3      	cmp	r3, r4
 8003b5a:	d909      	bls.n	8003b70 <_free_r+0x44>
 8003b5c:	6821      	ldr	r1, [r4, #0]
 8003b5e:	1860      	adds	r0, r4, r1
 8003b60:	4283      	cmp	r3, r0
 8003b62:	d1f3      	bne.n	8003b4c <_free_r+0x20>
 8003b64:	6818      	ldr	r0, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	1841      	adds	r1, r0, r1
 8003b6a:	6021      	str	r1, [r4, #0]
 8003b6c:	e7ee      	b.n	8003b4c <_free_r+0x20>
 8003b6e:	0013      	movs	r3, r2
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	2a00      	cmp	r2, #0
 8003b74:	d001      	beq.n	8003b7a <_free_r+0x4e>
 8003b76:	42a2      	cmp	r2, r4
 8003b78:	d9f9      	bls.n	8003b6e <_free_r+0x42>
 8003b7a:	6819      	ldr	r1, [r3, #0]
 8003b7c:	1858      	adds	r0, r3, r1
 8003b7e:	42a0      	cmp	r0, r4
 8003b80:	d10b      	bne.n	8003b9a <_free_r+0x6e>
 8003b82:	6820      	ldr	r0, [r4, #0]
 8003b84:	1809      	adds	r1, r1, r0
 8003b86:	1858      	adds	r0, r3, r1
 8003b88:	6019      	str	r1, [r3, #0]
 8003b8a:	4282      	cmp	r2, r0
 8003b8c:	d1e0      	bne.n	8003b50 <_free_r+0x24>
 8003b8e:	6810      	ldr	r0, [r2, #0]
 8003b90:	6852      	ldr	r2, [r2, #4]
 8003b92:	1841      	adds	r1, r0, r1
 8003b94:	6019      	str	r1, [r3, #0]
 8003b96:	605a      	str	r2, [r3, #4]
 8003b98:	e7da      	b.n	8003b50 <_free_r+0x24>
 8003b9a:	42a0      	cmp	r0, r4
 8003b9c:	d902      	bls.n	8003ba4 <_free_r+0x78>
 8003b9e:	230c      	movs	r3, #12
 8003ba0:	602b      	str	r3, [r5, #0]
 8003ba2:	e7d5      	b.n	8003b50 <_free_r+0x24>
 8003ba4:	6821      	ldr	r1, [r4, #0]
 8003ba6:	1860      	adds	r0, r4, r1
 8003ba8:	4282      	cmp	r2, r0
 8003baa:	d103      	bne.n	8003bb4 <_free_r+0x88>
 8003bac:	6810      	ldr	r0, [r2, #0]
 8003bae:	6852      	ldr	r2, [r2, #4]
 8003bb0:	1841      	adds	r1, r0, r1
 8003bb2:	6021      	str	r1, [r4, #0]
 8003bb4:	6062      	str	r2, [r4, #4]
 8003bb6:	605c      	str	r4, [r3, #4]
 8003bb8:	e7ca      	b.n	8003b50 <_free_r+0x24>
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	20000090 	.word	0x20000090

08003bc0 <_malloc_r>:
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	b570      	push	{r4, r5, r6, lr}
 8003bc4:	1ccd      	adds	r5, r1, #3
 8003bc6:	439d      	bics	r5, r3
 8003bc8:	3508      	adds	r5, #8
 8003bca:	0006      	movs	r6, r0
 8003bcc:	2d0c      	cmp	r5, #12
 8003bce:	d21e      	bcs.n	8003c0e <_malloc_r+0x4e>
 8003bd0:	250c      	movs	r5, #12
 8003bd2:	42a9      	cmp	r1, r5
 8003bd4:	d81d      	bhi.n	8003c12 <_malloc_r+0x52>
 8003bd6:	0030      	movs	r0, r6
 8003bd8:	f000 f888 	bl	8003cec <__malloc_lock>
 8003bdc:	4a25      	ldr	r2, [pc, #148]	; (8003c74 <_malloc_r+0xb4>)
 8003bde:	6814      	ldr	r4, [r2, #0]
 8003be0:	0021      	movs	r1, r4
 8003be2:	2900      	cmp	r1, #0
 8003be4:	d119      	bne.n	8003c1a <_malloc_r+0x5a>
 8003be6:	4c24      	ldr	r4, [pc, #144]	; (8003c78 <_malloc_r+0xb8>)
 8003be8:	6823      	ldr	r3, [r4, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d103      	bne.n	8003bf6 <_malloc_r+0x36>
 8003bee:	0030      	movs	r0, r6
 8003bf0:	f000 f86a 	bl	8003cc8 <_sbrk_r>
 8003bf4:	6020      	str	r0, [r4, #0]
 8003bf6:	0029      	movs	r1, r5
 8003bf8:	0030      	movs	r0, r6
 8003bfa:	f000 f865 	bl	8003cc8 <_sbrk_r>
 8003bfe:	1c43      	adds	r3, r0, #1
 8003c00:	d12b      	bne.n	8003c5a <_malloc_r+0x9a>
 8003c02:	230c      	movs	r3, #12
 8003c04:	0030      	movs	r0, r6
 8003c06:	6033      	str	r3, [r6, #0]
 8003c08:	f000 f871 	bl	8003cee <__malloc_unlock>
 8003c0c:	e003      	b.n	8003c16 <_malloc_r+0x56>
 8003c0e:	2d00      	cmp	r5, #0
 8003c10:	dadf      	bge.n	8003bd2 <_malloc_r+0x12>
 8003c12:	230c      	movs	r3, #12
 8003c14:	6033      	str	r3, [r6, #0]
 8003c16:	2000      	movs	r0, #0
 8003c18:	bd70      	pop	{r4, r5, r6, pc}
 8003c1a:	680b      	ldr	r3, [r1, #0]
 8003c1c:	1b5b      	subs	r3, r3, r5
 8003c1e:	d419      	bmi.n	8003c54 <_malloc_r+0x94>
 8003c20:	2b0b      	cmp	r3, #11
 8003c22:	d903      	bls.n	8003c2c <_malloc_r+0x6c>
 8003c24:	600b      	str	r3, [r1, #0]
 8003c26:	18cc      	adds	r4, r1, r3
 8003c28:	6025      	str	r5, [r4, #0]
 8003c2a:	e003      	b.n	8003c34 <_malloc_r+0x74>
 8003c2c:	684b      	ldr	r3, [r1, #4]
 8003c2e:	428c      	cmp	r4, r1
 8003c30:	d10d      	bne.n	8003c4e <_malloc_r+0x8e>
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	0030      	movs	r0, r6
 8003c36:	f000 f85a 	bl	8003cee <__malloc_unlock>
 8003c3a:	0020      	movs	r0, r4
 8003c3c:	2207      	movs	r2, #7
 8003c3e:	300b      	adds	r0, #11
 8003c40:	1d23      	adds	r3, r4, #4
 8003c42:	4390      	bics	r0, r2
 8003c44:	1ac3      	subs	r3, r0, r3
 8003c46:	d0e7      	beq.n	8003c18 <_malloc_r+0x58>
 8003c48:	425a      	negs	r2, r3
 8003c4a:	50e2      	str	r2, [r4, r3]
 8003c4c:	e7e4      	b.n	8003c18 <_malloc_r+0x58>
 8003c4e:	6063      	str	r3, [r4, #4]
 8003c50:	000c      	movs	r4, r1
 8003c52:	e7ef      	b.n	8003c34 <_malloc_r+0x74>
 8003c54:	000c      	movs	r4, r1
 8003c56:	6849      	ldr	r1, [r1, #4]
 8003c58:	e7c3      	b.n	8003be2 <_malloc_r+0x22>
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	1cc4      	adds	r4, r0, #3
 8003c5e:	439c      	bics	r4, r3
 8003c60:	42a0      	cmp	r0, r4
 8003c62:	d0e1      	beq.n	8003c28 <_malloc_r+0x68>
 8003c64:	1a21      	subs	r1, r4, r0
 8003c66:	0030      	movs	r0, r6
 8003c68:	f000 f82e 	bl	8003cc8 <_sbrk_r>
 8003c6c:	1c43      	adds	r3, r0, #1
 8003c6e:	d1db      	bne.n	8003c28 <_malloc_r+0x68>
 8003c70:	e7c7      	b.n	8003c02 <_malloc_r+0x42>
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	20000090 	.word	0x20000090
 8003c78:	20000094 	.word	0x20000094

08003c7c <_realloc_r>:
 8003c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7e:	0007      	movs	r7, r0
 8003c80:	000d      	movs	r5, r1
 8003c82:	0016      	movs	r6, r2
 8003c84:	2900      	cmp	r1, #0
 8003c86:	d105      	bne.n	8003c94 <_realloc_r+0x18>
 8003c88:	0011      	movs	r1, r2
 8003c8a:	f7ff ff99 	bl	8003bc0 <_malloc_r>
 8003c8e:	0004      	movs	r4, r0
 8003c90:	0020      	movs	r0, r4
 8003c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c94:	2a00      	cmp	r2, #0
 8003c96:	d103      	bne.n	8003ca0 <_realloc_r+0x24>
 8003c98:	f7ff ff48 	bl	8003b2c <_free_r>
 8003c9c:	0034      	movs	r4, r6
 8003c9e:	e7f7      	b.n	8003c90 <_realloc_r+0x14>
 8003ca0:	f000 f826 	bl	8003cf0 <_malloc_usable_size_r>
 8003ca4:	002c      	movs	r4, r5
 8003ca6:	42b0      	cmp	r0, r6
 8003ca8:	d2f2      	bcs.n	8003c90 <_realloc_r+0x14>
 8003caa:	0031      	movs	r1, r6
 8003cac:	0038      	movs	r0, r7
 8003cae:	f7ff ff87 	bl	8003bc0 <_malloc_r>
 8003cb2:	1e04      	subs	r4, r0, #0
 8003cb4:	d0ec      	beq.n	8003c90 <_realloc_r+0x14>
 8003cb6:	0029      	movs	r1, r5
 8003cb8:	0032      	movs	r2, r6
 8003cba:	f7ff ff1a 	bl	8003af2 <memcpy>
 8003cbe:	0029      	movs	r1, r5
 8003cc0:	0038      	movs	r0, r7
 8003cc2:	f7ff ff33 	bl	8003b2c <_free_r>
 8003cc6:	e7e3      	b.n	8003c90 <_realloc_r+0x14>

08003cc8 <_sbrk_r>:
 8003cc8:	2300      	movs	r3, #0
 8003cca:	b570      	push	{r4, r5, r6, lr}
 8003ccc:	4c06      	ldr	r4, [pc, #24]	; (8003ce8 <_sbrk_r+0x20>)
 8003cce:	0005      	movs	r5, r0
 8003cd0:	0008      	movs	r0, r1
 8003cd2:	6023      	str	r3, [r4, #0]
 8003cd4:	f7fd fa00 	bl	80010d8 <_sbrk>
 8003cd8:	1c43      	adds	r3, r0, #1
 8003cda:	d103      	bne.n	8003ce4 <_sbrk_r+0x1c>
 8003cdc:	6823      	ldr	r3, [r4, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d000      	beq.n	8003ce4 <_sbrk_r+0x1c>
 8003ce2:	602b      	str	r3, [r5, #0]
 8003ce4:	bd70      	pop	{r4, r5, r6, pc}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	20000174 	.word	0x20000174

08003cec <__malloc_lock>:
 8003cec:	4770      	bx	lr

08003cee <__malloc_unlock>:
 8003cee:	4770      	bx	lr

08003cf0 <_malloc_usable_size_r>:
 8003cf0:	1f0b      	subs	r3, r1, #4
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	1f18      	subs	r0, r3, #4
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	da01      	bge.n	8003cfe <_malloc_usable_size_r+0xe>
 8003cfa:	580b      	ldr	r3, [r1, r0]
 8003cfc:	18c0      	adds	r0, r0, r3
 8003cfe:	4770      	bx	lr

08003d00 <_init>:
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d06:	bc08      	pop	{r3}
 8003d08:	469e      	mov	lr, r3
 8003d0a:	4770      	bx	lr

08003d0c <_fini>:
 8003d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d12:	bc08      	pop	{r3}
 8003d14:	469e      	mov	lr, r3
 8003d16:	4770      	bx	lr
